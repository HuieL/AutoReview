{"name": "ICLR_2017_115.pdf", "metadata": {"source": "CRF", "title": "THE CONCRETE DISTRIBUTION: A CONTINUOUS RELAXATION OF DISCRETE RANDOM VARIABLES", "authors": ["Chris J. Maddison", "Andriy Mnih", "Yee Whye Teh"], "emails": ["cmaddis@stats.ox.ac.uk"], "sections": [{"heading": "1 INTRODUCTION", "text": "Software libraries for automatic differentiation (AD) (Abadi et al., 2015; Theano Development Team, 2016) are enjoying broad use, spurred on by the success of neural networks on some of the most challenging problems of machine learning. The dominant mode of development in these libraries is to define a forward parametric computation, in the form of a directed acyclic graph, that computes the desired objective. If the components of the graph are differentiable, then a backwards computation for the gradient of the objective can be derived automatically with the chain rule. The ease of use and unreasonable effectiveness of gradient descent has led to an explosion in the diversity of architectures and objective functions. Thus, expanding the range of useful continuous operations can have an outsized impact on the development of new models. For example, a topic of recent attention has been the optimization of stochastic computation graphs from samples of their states. Here, the observation that AD \u201cjust works\u201d when stochastic nodes1 can be reparameterized into deterministic functions of their parameters and a fixed noise distribution (Kingma & Welling, 2013; Rezende et al., 2014), has liberated researchers in the development of large complex stochastic architectures (e.g. Gregor et al., 2015).\nComputing with discrete stochastic nodes still poses a significant challenge for AD libraries. Deterministic discreteness can be relaxed and approximated reasonably well with sigmoidal functions or the softmax (see e.g., Grefenstette et al., 2015; Graves et al., 2016), but, if a distribution over discrete states is needed, there is no clear solution. There are well known unbiased estimators for the gradi-\n1For our purposes a stochastic node of a computation graph is just a random variable whose distribution depends in some deterministic way on the values of the parent nodes.\nents of the parameters of a discrete stochastic node from samples. While these can be made to work with AD, they involve special casing and defining surrogate objectives (Schulman et al., 2015), and even then they can have high variance. Still, reasoning about discrete computation comes naturally to humans, and so, despite the difficulty associated, many modern architectures incorporate discrete stochasticity (Mnih et al., 2014; Xu et al., 2015; Koc\u030cisky\u0301 et al., 2016).\nThis work is inspired by the observation that many architectures treat discrete nodes continuously, and gradients rich with counterfactual information are available for each of their possible states. We introduce a CONtinuous relaxation of disCRETE random variables, CONCRETE for short, which allow gradients to flow through their states. The Concrete distribution is a new parametric family of continuous distributions on the simplex with closed form densities. Sampling from the Concrete distribution is as simple as taking the softmax of logits perturbed by fixed additive noise. This reparameterization means that Concrete stochastic nodes are quick to implement in a way that \u201cjust works\u201d with AD. Crucially, every discrete random variable corresponds to the zero temperature limit of a Concrete one. In this view optimizing an objective over an architecture with discrete stochastic nodes can be accomplished by gradient descent on the samples of the corresponding Concrete relaxation. When the objective depends, as in variational inference, on the log-probability of discrete nodes, the Concrete density is used during training in place of the discrete mass. At test time, the graph with discrete nodes is evaluated.\nThe paper is organized as follows. We provide a background on stochastic computation graphs and their optimization in Section 2. Section 3 reviews a reparameterization for discrete random variables, introduces the Concrete distribution, and discusses its application as a relaxation. Section 4 reviews related work. In Section 5 we present results on a density estimation task and a structured prediction task on the MNIST and Omniglot datasets. In Appendices C and F we provide details on the practical implementation and use of Concrete random variables. When comparing the effectiveness of gradients obtained via Concrete relaxations to a state-of-the-art-method (VIMCO, Mnih & Rezende, 2016), we find that they are competitive\u2014occasionally outperforming and occasionally underperforming\u2014all the while being implemented in an AD library without special casing."}, {"heading": "2 BACKGROUND", "text": ""}, {"heading": "2.1 OPTIMIZING STOCHASTIC COMPUTATION GRAPHS", "text": "Stochastic computation graphs (SCGs) provide a formalism for specifying input-output mappings, potentially stochastic, with learnable parameters using directed acyclic graphs (see Schulman et al. (2015) for a review). The state of each non-input node in such a graph is obtained from the states of its parent nodes by either evaluating a deterministic function or sampling from a conditional distribution. Many training objectives in supervised, unsupervised, and reinforcement learning can be expressed in terms of SCGs.\nTo optimize an objective represented as a SCG, we need estimates of its parameter gradients. We will concentrate on graphs with some stochastic nodes (backpropagation covers the rest). For simplicity, we restrict our attention to graphs with a single stochastic node X . We can interpret the forward pass in the graph as first sampling X from the conditional distribution p\u03c6(x) of the stochastic node given its parents, then evaluating a deterministic function f\u03b8(x) at X . We can think of f\u03b8(X) as a noisy objective, and we are interested in optimizing its expected value L(\u03b8, \u03c6) = EX\u223cp\u03c6(x)[f\u03b8(X)] w.r.t. parameters \u03b8, \u03c6.\nIn general, both the objective and its gradients are intractable. We will side-step this issue by estimating them with samples from p\u03c6(x). The gradient w.r.t. to the parameters \u03b8 has the form \u2207\u03b8L(\u03b8, \u03c6) = \u2207\u03b8EX\u223cp\u03c6(x)[f\u03b8(X)] = EX\u223cp\u03c6(x)[\u2207\u03b8f\u03b8(X)] (1) and can be easily estimated using Monte Carlo sampling:\n\u2207\u03b8L(\u03b8, \u03c6) ' 1\nS \u2211S s=1 \u2207\u03b8f\u03b8(Xs), (2)\nwhere Xs \u223c p\u03c6(x) i.i.d. The more challenging task is to compute the gradient w.r.t. the parameters \u03c6 of p\u03c6(x). The expression obtained by differentiating the expected objective,\n\u2207\u03c6L(\u03b8, \u03c6) = \u2207\u03c6 \u222b p\u03c6(x)f\u03b8(x) dx = \u222b f\u03b8(x)\u2207\u03c6p\u03c6(x) dx, (3)\ndoes not have the form of an expectation w.r.t. x and thus does not directly lead to a Monte Carlo gradient estimator. However, there are two ways of getting around this difficulty which lead to the two classes of estimators we will now discuss."}, {"heading": "2.2 SCORE FUNCTION ESTIMATORS", "text": "The score function estimator (SFE, Fu, 2006), also known as the REINFORCE (Williams, 1992) or likelihood-ratio estimator (Glynn, 1990), is based on the identity \u2207\u03c6p\u03c6(x) = p\u03c6(x)\u2207\u03c6 log p\u03c6(x), which allows the gradient in Eq. 3 to be written as an expectation:\n\u2207\u03c6L(\u03b8, \u03c6) = EX\u223cp\u03c6(x) [f\u03b8(X)\u2207\u03c6 log p\u03c6(X)] . (4) Estimating this expectation using naive Monte Carlo gives the estimator\n\u2207\u03c6L(\u03b8, \u03c6) ' 1\nS \u2211S s=1 f\u03b8(X s)\u2207\u03c6 log p\u03c6(Xs), (5)\nwhere Xs \u223c p\u03c6(x) i.i.d. This is a very general estimator that is applicable whenever log p\u03c6(x) is differentiable w.r.t. \u03c6. As it does not require f\u03b8(x) to be differentiable or even continuous as a function of x, the SFE can be used with both discrete and continuous random variables.\nThough the basic version of the estimator can suffer from high variance, various variance reduction techniques can be used to make the estimator much more effective (Greensmith et al., 2004). Baselines are the most important and widely used of these techniques (Williams, 1992). A number of score function estimators have been developed in machine learning (Paisley et al., 2012; Gregor et al., 2013; Ranganath et al., 2014; Mnih & Gregor, 2014; Titsias & La\u0301zaro-Gredilla, 2015; Gu et al., 2016), which differ primarily in the variance reduction techniques used."}, {"heading": "2.3 REPARAMETERIZATION TRICK", "text": "In many cases we can sample from p\u03c6(x) by first sampling Z from some fixed distribution q(z) and then transforming the sample using some function g\u03c6(z). For example, a sample from Normal(\u00b5, \u03c32) can be obtained by sampling Z from the standard form of the distribution Normal(0, 1) and then transforming it using g\u00b5,\u03c3(Z) = \u00b5 + \u03c3Z. This two-stage reformulation of the sampling process, called the reparameterization trick, allows us to transfer the dependence on \u03c6 from p into f by writing f\u03b8(x) = f\u03b8(g\u03c6(z)) for x = g\u03c6(z), making it possible to reduce the problem of estimating the gradient w.r.t. parameters of a distribution to the simpler problem of estimating the gradient w.r.t. parameters of a deterministic function.\nHaving reparameterized p\u03c6(x), we can now express the objective as an expectation w.r.t. q(z):\nL(\u03b8, \u03c6) = EX\u223cp\u03c6(x)[f\u03b8(X)] = EZ\u223cq(z)[f\u03b8(g\u03c6(Z))]. (6)\nAs q(z) does not depend on \u03c6, we can estimate the gradient w.r.t. \u03c6 in exactly the same way we estimated the gradient w.r.t. \u03b8 in Eq. 1. Assuming differentiability of f\u03b8(x) w.r.t. x and of g\u03c6(z) w.r.t. \u03c6 and using the chain rule gives\n\u2207\u03c6L(\u03b8, \u03c6) = EZ\u223cq(z)[\u2207\u03c6f\u03b8(g\u03c6(Z))] = EZ\u223cq(z) [f \u2032\u03b8(g\u03c6(Z))\u2207\u03c6g\u03c6(Z)] . (7)\nThe reparameterization trick, introduced in the context of variational inference independently by Kingma & Welling (2014), Rezende et al. (2014), and Titsias & La\u0301zaro-Gredilla (2014), is usually the estimator of choice when it is applicable. For continuous latent variables which are not directly reparameterizable, new hybrid estimators have also been developed, by combining partial reparameterizations with score function estimators (Ruiz et al., 2016; Naesseth et al., 2016)."}, {"heading": "2.4 APPLICATION: VARIATIONAL TRAINING OF LATENT VARIABLE MODELS", "text": "We will now see how the task of training latent variable models can be formulated in the SCG framework. Such models assume that each observation x is obtained by first sampling a vector of latent variables Z from the prior p\u03b8(z) before sampling the observation itself from p\u03b8(x | z). Thus the probability of observation x is p\u03b8(x) = \u2211 z p\u03b8(z)p\u03b8(x | z). Maximum likelihood training of such models is infeasible, because the log-likelihood (LL) objective L(\u03b8) = log p\u03b8(x) =\nlogEZ\u223cp\u03b8(z)[p\u03b8(x | Z)] is typically intractable and does not fit into the above framework due to the expectation being inside the log. The multi-sample variational objective (Burda et al., 2016),\nLm(\u03b8, \u03c6) = E Zi\u223cq\u03c6(z|x)\n[ log ( 1\nm m\u2211 i=1 p\u03b8(Z i, x) q\u03c6(Zi | x)\n)] . (8)\nprovides a convenient alternative which has precisely the form we considered in Section 2.1. This approach relies on introducing an auxiliary distribution q\u03c6(z | x) with its own parameters, which serves as approximation to the intractable posterior p\u03b8(z | x). The model is trained by jointly maximizing the objective w.r.t. to the parameters of p and q. The number of samples used inside the objective m allows trading off the computational cost against the tightness of the bound. For m = 1, Lm(\u03b8, \u03c6) becomes is the widely used evidence lower bound (ELBO, Hoffman et al., 2013) on log p\u03b8(x), while for m > 1, it is known as the importance weighted bound (Burda et al., 2016)."}, {"heading": "3 THE CONCRETE DISTRIBUTION", "text": ""}, {"heading": "3.1 DISCRETE RANDOM VARIABLES AND THE GUMBEL-MAX TRICK", "text": "To motivate the construction of Concrete random variables, we review a method for sampling from discrete distributions called the Gumbel-Max trick (Luce, 1959; Yellott, 1977; Papandreou & Yuille, 2011; Hazan & Jaakkola, 2012; Maddison et al., 2014). We restrict ourselves to a representation of discrete states as vectors d \u2208 {0, 1}n of bits that are one-hot, or \u2211nk=1 dk = 1. This is a flexible representation in a computation graph; to achieve an integral representation take the inner product of d with (1, . . . , n), and to achieve a point mass representation in Rm take Wd where W \u2208 Rm\u00d7n. Consider an unnormalized parameterization (\u03b11, . . . , \u03b1n) where \u03b1k \u2208 (0,\u221e) of a discrete distribution D \u223c Discrete(\u03b1)\u2014we can assume that states with 0 probability are excluded. The GumbelMax trick proceeds as follows: sample Uk \u223c Uniform(0, 1) i.i.d. for each k, find k that maximizes {log\u03b1k \u2212 log(\u2212 logUk)}, set Dk = 1 and the remaining Di = 0 for i 6= k. Then\nP(Dk = 1) = \u03b1k\u2211n i=1 \u03b1i . (9)\nIn other words, the sampling of a discrete random variable can be refactored into a deterministic function\u2014componentwise addition followed by argmax\u2014of the parameters log\u03b1k and fixed distribution \u2212 log(\u2212 logUk). See Figure 1a for a visualization. The apparently arbitrary choice of noise gives the trick its name, as \u2212 log(\u2212 logU) has a Gumbel distribution. This distribution features in extreme value theory (Gumbel, 1954) where it plays a central role similar to the Normal distribution: the Gumbel distribution is stable under max operations, and for some distributions, the order statistics (suitably normalized) of i.i.d. draws approach the Gumbel in distribution. The Gumbel can also be recognized as a \u2212 log-transformed exponential random variable. So, the correctness of (9) also reduces to a well known result regarding the argmin of exponential random variables. See (Hazan et al., 2016) for a collection of related work, and particularly the chapter (Maddison, 2016) for a proof and generalization of this trick."}, {"heading": "3.2 CONCRETE RANDOM VARIABLES", "text": "The derivative of the argmax is 0 everywhere except at the boundary of state changes, where it is undefined. For this reason the Gumbel-Max trick is not a suitable reparameterization for use in SCGs with AD. Here we introduce the Concrete distribution motivated by considering a graph, which is the same as Figure 1a up to a continuous relaxation of the argmax computation, see Figure 1b. This will ultimately allow the optimization of parameters \u03b1k via gradients.\nThe argmax computation returns states on the vertices of the simplex \u2206n\u22121 = {x \u2208 Rn | xk \u2208 [0, 1], \u2211n k=1 xk = 1}. The idea behind Concrete random variables is to relax the state of a discrete variable from the vertices into the interior where it is a random probability vector\u2014a vector of numbers between 0 and 1 that sum to 1. To sample a Concrete random variable X \u2208 \u2206n\u22121 at temperature \u03bb \u2208 (0,\u221e) with parameters \u03b1k \u2208 (0,\u221e), sample Gk \u223c Gumbel i.i.d. and set\nXk = exp((log\u03b1k +Gk)/\u03bb)\u2211n i=1 exp((log\u03b1i +Gi)/\u03bb) . (10)\nThe softmax computation of (10) smoothly approaches the discrete argmax computation as \u03bb \u2192 0 while preserving the relative order of the Gumbels log\u03b1k + Gk. So, imagine making a series of forward passes on the graphs of Figure 1. Both graphs return a stochastic value for each forward pass, but for smaller temperatures the outputs of Figure 1b become more discrete and eventually indistinguishable from a typical forward pass of Figure 1a.\nThe distribution ofX sampled via (10) has a closed form density on the simplex. Because there may be other ways to sample a Concrete random variable, we take the density to be its definition. Definition 1 (Concrete Random Variables). Let \u03b1 \u2208 (0,\u221e)n and \u03bb \u2208 (0,\u221e). X \u2208 \u2206n\u22121 has a Concrete distribution X \u223c Concrete(\u03b1, \u03bb) with location \u03b1 and temperature \u03bb, if its density is:\np\u03b1,\u03bb(x) = (n\u2212 1)! \u03bbn\u22121 n\u220f k=1\n( \u03b1kx\n\u2212\u03bb\u22121 k\u2211n\ni=1 \u03b1ix \u2212\u03bb i\n) . (11)\nProposition 1 lists a few properties of the Concrete distribution. (a) is confirmation that our definition corresponds to the sampling routine (10). (b) confirms that rounding a Concrete random variable results in the discrete random variable whose distribution is described by the logits log\u03b1k, (c) confirms that taking the zero temperature limit of a Concrete random variable is the same as rounding. Finally, (d) is a convexity result on the density. We prove these results in Appendix A. Proposition 1 (Some Properties of Concrete Random Variables). Let X \u223c Concrete(\u03b1, \u03bb) with location parameters \u03b1 \u2208 (0,\u221e)n and temperature \u03bb \u2208 (0,\u221e), then\n(a) (Reparameterization) If Gk \u223c Gumbel i.i.d., then Xk d= exp((log\u03b1k+Gk)/\u03bb)\u2211n i=1 exp((log\u03b1i+Gi)/\u03bb) ,\n(b) (Rounding) P (Xk > Xi for i 6= k) = \u03b1k/( \u2211n i=1 \u03b1i),\n(c) (Zero temperature) P (lim\u03bb\u21920Xk = 1) = \u03b1k/( \u2211n i=1 \u03b1i),\n(d) (Convex eventually) If \u03bb \u2264 (n\u2212 1)\u22121, then p\u03b1,\u03bb(x) is log-convex in x.\nThe binary case of the Gumbel-Max trick simplifies to passing additive noise through a step function. The corresponding Concrete relaxation is implemented by passing additive noise through a sigmoid\u2014see Figure 3. We cover this more thoroughly in Appendix B, along with a cheat sheet (Appendix F) on the density and implementation of all the random variables discussed in this work."}, {"heading": "3.3 CONCRETE RELAXATIONS", "text": "Concrete random variables may have some intrinsic value, but we investigate them simply as surrogates for optimizing a SCG with discrete nodes. When it is computationally feasible to integrate over the discreteness, that will always be a better choice. Thus, we consider the use case of optimizing a large graph with discrete stochastic nodes from samples.\nFirst, we outline our proposal for how to use Concrete relaxations by considering a variational autoencoder with a single discrete latent variable. Let Pa(d) be the mass function of some ndimensional one-hot discrete random variable with unnormalized probabilities a \u2208 (0,\u221e)n and p\u03b8(x|d) some distribution over a data point x given d \u2208 (0, 1)n one-hot. The generative model is then p\u03b8,a(x, d) = p\u03b8(x|d)Pa(d). Let Q\u03b1(d|x) be an approximating posterior over d \u2208 (0, 1)n onehot whose unnormalized probabilities \u03b1(x) \u2208 (0,\u221e)n depend on x. All together the variational lowerbound we care about stochastically optimizing is\nL1(\u03b8, a, \u03b1) = E D\u223cQ\u03b1(d|x)\n[ log\np\u03b8(x|D)Pa(D) Q\u03b1(D|x)\n] , (12)\nwith respect to \u03b8, a, and any parameters of \u03b1. First, we relax the stochastic computation D \u223c Discrete(\u03b1(x)) by replacing D with a Concrete random variable Z \u223c Concrete(\u03b1(x), \u03bb1) with density q\u03b1,\u03bb1(z|x). Simply replacing every instance of D with Z in Eq. 12 will result in a non-interpretable objective, which does not necessarily lowerbound log p(x), because EZ\u223cq\u03b1,\u03bb1 (a|x)[\u2212 logQ\u03b1(Z|x)/Pa(Z)] is not a KL divergence. Thus we propose \u201crelaxing\u201d the terms Pa(d) and Q\u03b1(d|x) to reflect the true sampling distribution. Thus, the relaxed objective is:\nL1(\u03b8, a, \u03b1) relax E Z\u223cq\u03b1,\u03bb1 (z|x)\n[ log\np\u03b8(x|Z)pa,\u03bb2(Z) q\u03b1,\u03bb1(Z|x)\n] (13)\nwhere pa,\u03bb2(z) is a Concrete density with location a and temperature \u03bb2. At test time we evaluate the discrete lowerbound L1(\u03b8, a, \u03b1). Naively implementing Eq. 13 will result in numerical issues. We discuss this and other details in Appendix C.\nThus, the basic paradigm we propose is the following: during training replace every discrete node with a Concrete node at some fixed temperature (or with an annealing schedule). The graphs are identical up to the softmax / argmax computations, so the parameters of the relaxed graph and discrete graph are the same. When an objective depends on the log-probability of discrete variables in the SCG, as the variational lowerbound does, we propose that the log-probability terms are also \u201crelaxed\u201d to represent the true distribution of the relaxed node. At test time the original discrete loss is evaluated. This is possible, because the discretization of any Concrete distribution has a closed form mass function, and the relaxation of any discrete distribution into a Concrete distribution has a closed form density. This is not always possible. For example, the multinomial probit model\u2014the Gumbel-Max trick with Gaussians replacing Gumbels\u2014does not have a closed form mass.\nThe success of Concrete relaxations will depend on the choice of temperature during training. It is important that the relaxed nodes are not able to represent a precise real valued mode in the interior\nof the simplex as in Figure 2d. If this is the case, it is possible for the relaxed random variable to communicate much more than log2(n) bits of information about its \u03b1 parameters. This might lead the relaxation to prefer the interior of the simplex to the vertices, and as a result there will be a large integrality gap in the overall performance of the discrete graph. Therefore Proposition 1 (d) is a conservative guideline for generic n-ary Concrete relaxations; at temperatures lower than (n\u2212 1)\u22121 we are guaranteed not to have any modes in the interior for any \u03b1 \u2208 (0,\u221e)n. We discuss the subtleties of choosing the temperatures in more detail in Appendix C. Ultimately the best choice of \u03bb and the performance of the relaxation for any specific n will be an empirical question."}, {"heading": "4 RELATED WORK", "text": "Perhaps the most common distribution over the simplex is the Dirichlet with density p\u03b1(x) \u221d\u220fn k=1 x \u03b1k\u22121 k on x \u2208 \u2206n\u22121. The Dirichlet can be characterized by strong independence properties, and a great deal of work has been done to generalize it (Connor & Mosimann, 1969; Aitchison, 1985; Rayens & Srinivasan, 1994; Favaro et al., 2011). Of note is the Logistic Normal distribution (Atchison & Shen, 1980), which can be simulated by taking the softmax of n \u2212 1 normal random variables and an nth logit that is deterministically zero. The Logistic Normal is an important distribution, because it can effectively model correlations within the simplex (Blei & Lafferty, 2006). To our knowledge the Concrete distribution does not fall completely into any family of distributions previously described. For \u03bb \u2264 1 the Concrete is in a class of normalized infinitely divisible distributions (S. Favaro, personal communication), and the results of Favaro et al. (2011) apply.\nThe idea of using a softmax of Gumbels as a relaxation for a discrete random variable was concurrently considered by (Jang et al., 2016), where it was called the Gumbel-Softmax. They do not use the density in the relaxed objective, opting instead to compute all aspects of the graph, including discrete log-probability computations, with the relaxed stochastic state of the graph. In the case of variational inference, this relaxed objective is not a lower bound on the marginal likelihood of the observations, and care needs to be taken when optimizing it. The idea of using sigmoidal functions with additive input noise to approximate discreteness is also not a new idea. (Frey, 1997) introduced nonlinear Gaussian units which computed their activation by passing Gaussian noise with the mean and variance specified by the input to the unit through a nonlinearity, such as the logistic function. Salakhutdinov & Hinton (2009) binarized real-valued codes of an autoencoder by adding (Gaussian) noise to the logits before passing them through the logistic function. Most recently, to avoid the difficulty associated with likelihood-ratio methods (Koc\u030cisky\u0301 et al., 2016) relaxed the discrete sampling operation by sampling a vector of Gaussians instead and passing those through a softmax.\nThere is another family of gradient estimators that have been studied in the context of training neural networks with discrete units. These are usually collected under the umbrella of straightthrough estimators (Bengio et al., 2013; Raiko et al., 2014). The basic idea they use is passing forward discrete values, but taking gradients through the expected value. They have good empirical performance, but have not been shown to be the estimators of any loss function. This is in contrast to gradients from Concrete relaxations, which are biased with respect to the discrete graph, but unbiased with respect to the continuous one."}, {"heading": "5 EXPERIMENTS", "text": ""}, {"heading": "5.1 PROTOCOL", "text": "The aim of our experiments was to evaluate the effectiveness of the gradients of Concrete relaxations for optimizing SCGs with discrete nodes. We considered the tasks in (Mnih & Rezende, 2016): structured output prediction and density estimation. Both tasks are difficult optimization problems involving fitting probability distributions with hundreds of latent discrete nodes. We compared the performance of Concrete reparameterizations to two state-of-the-art score function estimators: VIMCO (Mnih & Rezende, 2016) for optimizing the multisample variational objective (m > 1) and NVIL (Mnih & Gregor, 2014) for optimizing the single-sample one (m = 1). We performed the experiments using the MNIST and Omniglot datasets. These are datasets of 28\u00d7 28 images of handwritten digits (MNIST) or letters (Omniglot). For MNIST we used the fixed binarization of Salakhutdinov & Murray (2008) and the standard 50,000/10,000/10,000 split into\ntraining/validation/testing sets. For Omniglot we sampled a fixed binarization and used the standard 24,345/8,070 split into training/testing sets. We report the negative log-likelihood (NLL) of the discrete graph on the test data as the performance metric.\nAll of our models were neural networks with layers of n-ary discrete stochastic nodes with values on the corners of the hypercube {\u22121, 1}log2(n). The distributions were parameterized by n real values log\u03b1k \u2208 R, which we took to be the logits of a discrete random variable D \u223c Discrete(\u03b1) with n states. Model descriptions are of the form \u201c(200V\u2013200H\u223c784V)\u201d, read from left to right. This describes the order of conditional sampling, again from left to right, with each integer representing the number of stochastic units in a layer. The letters V and H represent observed and latent variables, respectively. If the leftmost layer is H, then it was sampled unconditionally from some parameters. Conditioning functions are described by {\u2013, \u223c}, where \u201c\u2013\u201d means a linear function of the previous layer and \u201c\u223c\u201d means a non-linear function. A \u201clayer\u201d of these units is simply the concatenation of some number of independent nodes whose parameters are determined as a function the previous layer. For example a 240 binary layer is a factored distribution over the {\u22121, 1}240 hypercube. Whereas a 240 8-ary layer can be seen as a distribution over the same hypercube where each of the 80 triples of units are sampled independently from an 8 way discrete distribution over {\u22121, 1}3. All models were initialized with the heuristic of Glorot & Bengio (2010) and optimized using Adam (Kingma & Ba, 2014). All temperatures were fixed throughout training. Appendix D for hyperparameter details."}, {"heading": "5.2 DENSITY ESTIMATION", "text": "Density estimation, or generative modelling, is the problem of fitting the distribution of data. We took the latent variable approach described in Section 2.4 and trained the models by optimizing the variational objective Lm(\u03b8, \u03c6) given by Eq. 8 averaged uniformly over minibatches of data points x. Both our generative models p\u03b8(z, x) and variational distributions q\u03c6(z | x) were parameterized with neural networks as described above. We trained models with Lm(\u03b8, \u03c6) for m \u2208 {1, 5, 50} and approximated the NLL with L50,000(\u03b8, \u03c6) averaged uniformly over the whole dataset. The results are shown in Table 1. In general, VIMCO outperformed Concrete relaxations for linear models and Concrete relaxations outperformed VIMCO for non-linear models. We also tested the effectiveness of Concrete relaxations on generative models with n-ary layers on the L5(\u03b8, \u03c6) objective. The best 4-ary model achieved test/train NLL 86.7/83.3, the best 8-ary achieved 87.4/84.6 with Concrete relaxations, more complete results in Appendix E. The relatively poor performance of the 8-ary model may be because moving from 4 to 8 results in a more difficult objective without much added capacity. As a control we trained n-ary models using logistic normals as relaxations of discrete distributions (with retuned temperature hyperparameters). Because the discrete zero temperature limit of logistic Normals is a multinomial probit whose mass function is not known, we evaluated the discrete model by sampling from the discrete distribution parameterized by the logits\nlearned during training. The best 4-ary model achieved test/train NLL of 88.7/85.0, the best 8-ary model achieved 89.1/85.1."}, {"heading": "5.3 STRUCTURED OUTPUT PREDICTION", "text": "Structured output prediction is concerned with modelling the high-dimensional distribution of the observation given a context and can be seen as conditional density estimation. We considered the task of predicting the bottom half x1 of an image of an MNIST digit given its top half x2, as introduced by Raiko et al. (2014). We followed Raiko et al. (2014) in using a model with layers of discrete stochastic units between the context and the observation. Conditioned on the top half x2 the network samples from a distribution p\u03c6(z | x2) over layers of stochastic units z then predicts x1 by sampling from a distribution p\u03b8(x1 | z). The training objective for a single pair (x1, x2) is\nLSPm (\u03b8, \u03c6) = E Zi\u223cp\u03c6(z|x2)\n[ log ( 1\nm m\u2211 i=1\np\u03b8(x1 | Zi) )] .\nThis objective is a special case ofLm(\u03b8, \u03c6) (Eq. 8) where we use the prior p\u03c6(z|x2) as the variational distribution. Thus, the objective is a lower bound on log p\u03b8,\u03c6(x1 | x2). We trained the models by optimizing LSPm (\u03b8, \u03c6) for m \u2208 {1, 5, 50} averaged uniformly over minibatches and evaluated them by computingLSP100(\u03b8, \u03c6) averaged uniformly over the entire dataset. The results are shown in Figure 4. Concrete relaxations more uniformly outperformed VIMCO in this instance. We also trained n-ary (392V\u2013240H\u2013240H\u2013240H\u2013392V) models on the LSP1 (\u03b8, \u03c6) objective using the best temperature hyperparameters from density estimation. 4-ary achieved a test/train NLL of 55.4/46.0 and 8-ary achieved 54.7/44.8. As opposed to density estimation, increasing arity uniformly improved the models. We also investigated the hypothesis that for higher temperatures Concrete relaxations might prefer the interior of the interval to the boundary points {\u22121, 1}. Figure 4 was generated with binary (392V\u2013240H\u2013240H\u2013240H\u2013392V) model trained on LSP1 (\u03b8, \u03c6)."}, {"heading": "6 CONCLUSION", "text": "We introduced the Concrete distribution, a continuous relaxation of discrete random variables. The Concrete distribution is a new distribution on the simplex with a closed form density parameterized by a vector of positive location parameters and a positive temperature. Crucially, the zero temperature limit of every Concrete distribution corresponds to a discrete distribution, and any discrete distribution can be seen as the discretization of a Concrete one. The application we considered was training stochastic computation graphs with discrete stochastic nodes. The gradients of Concrete relaxations are biased with respect to the original discrete objective, but they are low variance unbiased estimators of a continuous surrogate objective. We showed in a series of experiments that stochastic nodes with Concrete distributions can be used effectively to optimize the parameters of a stochastic computation graph with discrete stochastic nodes. We did not find that annealing or automatically tuning the temperature was important for these experiments, but it remains interesting and possibly valuable future work."}, {"heading": "ACKNOWLEDGMENTS", "text": "We thank Jimmy Ba for the excitement and ideas in the early days, Stefano Favarro for some analysis of the distribution. We also thank Gabriel Barth-Maron and Roger Grosse."}, {"heading": "A PROOF OF PROPOSITION 1", "text": "Let X \u223c Concrete(\u03b1, \u03bb) with location parameters \u03b1 \u2208 (0,\u221e)n and temperature \u03bb \u2208 (0,\u221e).\n1. Let Gk \u223c Gumbel i.i.d., consider\nYk = exp((log\u03b1k +Gk)/\u03bb)\u2211n i=1 exp((log\u03b1i +Gi)/\u03bb)\nLet Zk = log\u03b1k +Gk, which has density\n\u03b1k exp(\u2212zk) exp(\u2212\u03b1k exp(\u2212zk)) We will consider the invertible transformation\nF (z1, . . . , zn) = (y1, . . . , yn\u22121, c)\nwhere\nyk = exp(zk/\u03bb)c \u22121\nc = n\u2211 i=1 exp(zi/\u03bb)\nthen\nF\u22121(y1, . . . , yn\u22121, c) = (\u03bb(log y1 + log c), . . . , \u03bb(log yn\u22121 + log c), \u03bb(log yn + log c))\nwhere yn = 1\u2212 \u2211n\u22121 i=1 yi. This has Jacobian \u03bby\u221211 0 0 0 . . . 0 \u03bbc \u22121 0 \u03bby\u221212 0 0 . . . 0 \u03bbc \u22121 0 0 \u03bby\u221213 0 . . . 0 \u03bbc \u22121\n... \u2212\u03bby\u22121n \u2212\u03bby\u22121n \u2212\u03bby\u22121n \u2212\u03bby\u22121n . . . \u2212\u03bby\u22121n \u03bbc\u22121  by adding yi/yn times each of the top n\u22121 rows to the bottom row we see that this Jacobian has the same determinant as \u03bby\u221211 0 0 0 . . . 0 \u03bbc \u22121 0 \u03bby\u221212 0 0 . . . 0 \u03bbc \u22121 0 0 \u03bby\u221213 0 . . . 0 \u03bbc \u22121\n... 0 0 0 0 . . . 0 \u03bb(cyn) \u22121  and thus the determinant is equal to\n\u03bbn c \u220fk i=1 yi\nall together we have the density \u03bbn \u220fn k=1 \u03b1k exp(\u2212\u03bb log yk \u2212 \u03bb log c) exp(\u2212\u03b1k exp(\u2212\u03bb log yk \u2212 \u03bb log c))\nc \u220fn i=1 yi\nwith r = log c change of variables we have density \u03bbn \u220fn k=1 \u03b1k exp(\u2212\u03bbr) exp(\u2212\u03b1k exp(\u2212\u03bb log yk \u2212 \u03bbr))\u220fn\ni=1 y \u03bb+1 i\n=\n\u03bbn \u220fn k=1 \u03b1k\u220fn\ni=1 y \u03bb+1 i exp(\u2212n\u03bbr) exp(\u2212 n\u2211 i=1 \u03b1i exp(\u2212\u03bb log yi \u2212 \u03bbr)) =\nletting \u03b3 = log( \u2211n n=1 \u03b1ky \u2212\u03bb k )\n\u03bbn \u220fn k=1 \u03b1k\u220fn\ni=1 y \u03bb+1 i exp(\u03b3)\nexp(\u2212n\u03bbr + \u03b3) exp(\u2212 exp(\u2212\u03bbr + \u03b3)) =\nintegrating out r \u03bbn \u220fn k=1 \u03b1k\u220fn\ni=1 y \u03bb+1 i exp(\u03b3)\n( exp(\u2212\u03b3n+ \u03b3)\u0393(n)\n\u03bb\n) =\n\u03bbn\u22121 \u220fn k=1 \u03b1k\u220fn\ni=1 y \u03bb+1 i\n(exp(\u2212\u03b3n)\u0393(n)) =\n(n\u2212 1)!\u03bbn\u22121 \u220fn k=1 \u03b1ky \u2212\u03bb\u22121 k\n( \u2211n n=1 \u03b1ky \u2212\u03bb k ) n\nThus Y d= X . 2. Follows directly from (a) and the Gumbel-Max trick (Maddison, 2016). 3. Follows directly from (a) and the Gumbel-Max trick (Maddison, 2016). 4. Let \u03bb \u2264 (n\u2212 1)\u22121. The density of X can be rewritten as\np\u03b1,\u03bb(x) \u221d n\u220f k=1 \u03b1ky \u2212\u03bb\u22121\u2211n i=1 \u03b1iy \u2212\u03bb i\n= n\u220f k=1 \u03b1ky \u03bb(n\u22121)\u22121 k\u2211n i=1 \u03b1i \u220f j 6=i y \u03bb j\nThus, the log density is up to an additive constant C\nlog p\u03b1,\u03bb(x) = n\u2211 k=1 (\u03bb(n\u2212 1)\u2212 1) log yk \u2212 n log  n\u2211 k=1 \u03b1k \u220f j 6=k y\u03bbj + C If \u03bb \u2264 (n \u2212 1)\u22121, then the first n terms are convex, because \u2212 log is convex. For the last term, \u2212 log is convex and non-increasing and\u220fj 6=k y\u03bbj is concave for \u03bb \u2264 (n\u2212 1)\u22121. Thus, their composition is convex. The sum of convex terms is convex, finishing the proof."}, {"heading": "B THE BINARY SPECIAL CASE", "text": "Bernoulli random variables are an important special case of discrete distributions taking states in {0, 1}. Here we consider the binary special case of the Gumbel-Max trick from Figure 1a along with the corresponding Concrete relaxation.\nLet D \u223c Discrete(\u03b1) for \u03b1 \u2208 (0,\u221e)2 be a two state discrete random variable on {0, 1}2 such that D1 +D2 = 1, parameterized as in Figure 1a by \u03b11, \u03b12 > 0:\nP(D1 = 1) = \u03b11\n\u03b11 + \u03b12 (14)\nThe distribution is degenerate, because D1 = 1 \u2212 D2. Therefore we consider just D1. Under the Gumbel-Max reparameterization, the event that D1 = 1 is the event that {G1 + log\u03b11 > G2 + log\u03b12} where Gk \u223c Gumbel i.i.d. The difference of two Gumbels is a Logistic distribution G1 \u2212G2 \u223c Logistic, which can be sampled in the following way, G1 \u2212G2 d= logU \u2212 log(1\u2212 U) where U \u223c Uniform(0, 1). So, if \u03b1 = \u03b11/\u03b12, then we have\nP(D1 = 1) = P(G1 + log\u03b11 > G2 + log\u03b12) = P(logU \u2212 log(1\u2212 U) + log\u03b1 > 0) (15)\nThus, D1 d = H(log\u03b1+ logU \u2212 log(1\u2212 U)), where H is the unit step function.\nCorrespondingly, we can consider the Binary Concrete relaxation that results from this process. As in the n-ary case, we consider the sampling routine for a Binary Concrete random variable X \u2208 (0, 1) first. To sample X , sample L \u223c Logistic and set\nX = 1\n1 + exp(\u2212(log\u03b1+ L)/\u03bb) (16)\nWe define the Binary Concrete random variable X by its density on the unit interval.\nDefinition 2 (Binary Concrete Random Variables). Let \u03b1 \u2208 (0,\u221e) and \u03bb \u2208 (0,\u221e). X \u2208 (0, 1) has a Binary Concrete distribution X \u223c BinConcrete(\u03b1, \u03bb) with location \u03b1 and temperature \u03bb, if its density is:\np\u03b1,\u03bb(x) = \u03bb\u03b1x\u2212\u03bb\u22121(1\u2212 x)\u2212\u03bb\u22121 (\u03b1x\u2212\u03bb + (1\u2212 x)\u2212\u03bb)2 . (17)\nWe state without proof the special case of Proposition 1 for Binary Concrete distributions\nProposition 2 (Some Properties of Binary Concrete Random Variables). Let X \u223c BinConcrete(\u03b1, \u03bb) with location parameter \u03b1 \u2208 (0,\u221e) and temperature \u03bb \u2208 (0,\u221e), then\n(a) (Reparameterization) If L \u223c Logistic, then X d= 11+exp(\u2212(log\u03b1+L)/\u03bb) ,\n(b) (Rounding) P (X > 0.5) = \u03b1/(1 + \u03b1),\n(c) (Zero temperature) P (lim\u03bb\u21920X = 1) = \u03b1/(1 + \u03b1),\n(d) (Convex eventually) If \u03bb \u2264 1, then p\u03b1,\u03bb(x) is log-convex in x.\nWe can generalize the binary circuit beyond Logistic random variables. Consider an arbitrary random variable X with infinite support on R. If \u03a6 : R\u2192 [0, 1] is the CDF of X , then\nP(H(X) = 1) = 1\u2212 \u03a6(0) If we want this to have a Bernoulli distribution with probability \u03b1/(1 +\u03b1), then we should solve the equation\n1\u2212 \u03a6(0) = \u03b1 1 + \u03b1 .\nThis gives \u03a6(0) = 1/(1 +\u03b1), which can be accomplished by relocating the random variable Y with CDF \u03a6 to be X = Y \u2212 \u03a6\u22121(1/(1 + \u03b1))."}, {"heading": "C USING CONCRETE RELAXATIONS", "text": "In this section we include some tips for implementing and using the Concrete distribution as a relaxation. We use the following notation\n\u03c3(x) = 1 1 + exp(\u2212x) n L\u03a3E k=1 {xk} = log ( n\u2211 k=1 exp(xk) ) Both sigmoid and log-sum-exp are common operations in libraries like TensorFlow or theano.\nC.1 THE BASIC PROBLEM\nFor the sake of exposition, we consider a simple variational autoencoder with a single discrete random variable and objective L1(\u03b8, a, \u03b1) given by Eq. 8 for a single data point x. This scenario will allow us to discuss all of the decisions one might make when using Concrete relaxations.\nIn particular, let Pa(d) be the mass function of some n-dimensional one-hot discrete D \u223c Discrete(a) with a \u2208 (0,\u221e)n, let p\u03b8(x|d) be some likelihood (possibly computed by a neural network), which is a continuous function of d and parameters \u03b8, let D \u223c Discrete(\u03b1(x)) be a onehot discrete random variable in (0, 1)n whose unnormalized probabilities \u03b1(x) \u2208 (0,\u221e)n are some function (possible a neural net with its own parameters) of x. Let Q\u03b1(d|x) be the mass function of D. Then, we care about optimizing\nL1(\u03b8, a, \u03b1) = E D\u223cQ\u03b1(d|x)\n[ log\np\u03b8(x|D)Pa(D) Q\u03b1(D|x)\n] (18)\nwith respect to \u03b8, a, and any parameters in \u03b1 from samples of the SCG required to simulate an estimator of L1(\u03b8, a, \u03b1).\nC.2 WHAT YOU MIGHT RELAX AND WHY\nThe first consideration when relaxing an estimator of Eq. 18 is how to relax the stochastic computation. The only sampling required to simulate L1(\u03b8, a, \u03b1) is D \u223c Discrete(\u03b1(x)). The corresponding Concrete relaxation is to sample Z \u223c Concrete(\u03b1(x), \u03bb1) with temperature \u03bb1 and location parameters are the the unnormalized probabilities \u03b1(x) of D. Let density q\u03b1,\u03bb1(z|x) be the density of Z. We get a relaxed objective of the form:\nE D\u223cQ\u03b1(d|x) [ \u00b7 ] \u2192 E Z\u223cq\u03b1,\u03bb1 (z|x) [ \u00b7 ] (19)\nThis choice allows us to take derivatives through the stochastic computaitons of the graph.\nThe second consideration is which objective to put in place of [ \u00b7 ] in Eq. 19. We will consider the ideal scenario irrespective of numerical issues. In Subsection C.3 we address those numerical issues. The central question is how to treat the expectation of the ratio Pa(D)/Q\u03b1(D|x) (which is the KL component of the loss) when Z replaces D.\nThere are at least three options for how to modify the objective. They are, (20) replace the discrete mass with Concrete densities, (21) relax the computation of the discrete log mass, (22) replace it with the analytic discrete KL.\nE Z\u223cq\u03b1,\u03bb1 (z|x)\n[ log p\u03b8(x|Z) + log pa,\u03bb2(Z)\nq\u03b1,\u03bb1(Z|x)\n] (20)\nE Z\u223cq\u03b1,\u03bb1 (z|x)\n[ log p\u03b8(x|Z) +\nn\u2211 i=1 Zi log Pa(d (i)) Q\u03b1(d(i)|x)\n] (21)\nE Z\u223cq\u03b1,\u03bb1 (z|x) [log p\u03b8(x|Z)] + n\u2211 i=1 Q\u03b1(d (i)|x) log Pa(d (i)) Q\u03b1(d(i)|x) (22)\nwhere d(i) is a one-hot binary vector with d(i)i = 1 and pa,\u03bb2(z) is the density of some Concrete random variable with temperature \u03bb2 with location parameters a. Although (22) or (21) is tempting, we emphasize that these are NOT necessarily lower bounds on log p(x) in the relaxed model. (20) is the only objective guaranteed to be a lower bound:\nE Z\u223cq\u03b1,\u03bb1 (z|x)\n[ log p\u03b8(x|Z) + log pa,\u03bb2(Z)\nq\u03b1,\u03bb1(Z|x)\n] \u2264 log \u222b p\u03b8(x|z)pa,\u03bb2(z) dx. (23)\nFor this reason we consider objectives of the form (20). Choosing (22) or (21) is possible, but the value of these objectives is not interpretable and one should early stop otherwise it will overfit to the spurious \u201cKL\u201d component of the loss. We now consider practical issues with (20) and how to address them. All together we can interpret q\u03b1,\u03bb1(z|x) as the Concrete relaxation of the variational posterior and pa,\u03bb2(z) the relaxation of the prior.\nC.3 WHICH RANDOM VARIABLE TO TREAT AS THE STOCHASTIC NODE\nWhen implementing a SCG like the variational autoencoder example, we need to compute logprobabilities of Concrete random variables. This computation can suffer from underflow, so where possible it\u2019s better to take a different node on the relaxed graph as the stochastic node on which loglikelihood terms are computed. For example, it\u2019s tempting in the case of Concrete random variables to treat the Gumbels as the stochastic node on which the log-likelihood terms are evaluated and the softmax as downstream computation. This will be a looser bound in the context of variational inference than the corresponding bound when treating the Concrete relaxed states as the node.\nThe solution we found to work well was to work with Concrete random variables in log-space. Consider the following vector in Rn for location parameters \u03b1 \u2208 (0,\u221e)n and \u03bb \u2208 (0,\u221e) and Gk \u223c Gumbel,\nYk = log\u03b1k +Gk\n\u03bb \u2212\nn\nL\u03a3E i=1\n{ log\u03b1i +Gi\n\u03bb } Y \u2208 Rn has the property that exp(Y ) \u223c Concrete(\u03b1, \u03bb), therefore we call Y an ExpConcrete(\u03b1, \u03bb). The advantage of this reparameterization is that the KL terms of a variational loss are invariant under invertible transformation. exp is invertible, so the KL between two ExpConcrete random variables is the same as the KL between two Concrete random variables. The log-density log \u03ba\u03b1,\u03bb(y) of an ExpConcrete(\u03b1, \u03bb) is also simple to compute:\nlog \u03ba\u03b1,\u03bb(y) = log((n\u2212 1)!) + (n\u2212 1) log \u03bb+ (\nn\u2211 k=1\nlog\u03b1k \u2212 \u03bbyk ) \u2212 n n\nL\u03a3E k=1 {log\u03b1k \u2212 \u03bbyk}\nfor y \u2208 Rn such that L\u03a3Enk=1{yk} = 0. Note that the sample space of the ExpConcrete distribution is still interpretable in the zero temperature limit. In the limit of \u03bb \u2192 0 ExpConcrete random variables become discrete random variables over the one-hot vectors of d \u2208 {\u2212\u221e, 0}n where L\u03a3Enk=1{dk} = 0. exp(Y ) in this case results in the one-hot vectors in {0, 1}n.\nC.3.1 n-ARY CONCRETE\nReturning to our initial task of relaxing L1(\u03b8, a, \u03b1), let Y \u223c ExpConcrete(\u03b1(x), \u03bb1) with density \u03ba\u03b1,\u03bb1(y|x) be the ExpConcrete latent variable corresponding to the Concrete relaxation q\u03b1,\u03bb1(z|x) of the variational posteriorQ\u03b1(d|x). Let \u03c1a,\u03bb1(y) be the density of an ExpConcrete random variable corresponding to the Concrete relaxation pa,\u03bb2(z) of Pa(d). All together we can see that\nE Z\u223cq\u03b1,\u03bb1 (z|x)\n[ log p\u03b8(x|Z) + log pa,\u03bb2(Z)\nq\u03b1,\u03bb1(Z|x) ] = E Y\u223c\u03ba\u03b1,\u03bb1 (y|x) [ log p\u03b8(x| exp(Y )) + log \u03c1a,\u03bb2(Y ) \u03ba\u03b1,\u03bb1(Y |x) ] (24)\nTherefore, we used ExpConcrete random variables as the stochastic nodes and treated exp as a downstream computation. The relaxation is then,\nL1(\u03b8, a, \u03b1) relax E Y\u223c\u03ba\u03b1,\u03bb1 (y|x)\n[ log p\u03b8(x| exp(Y )) + log \u03c1a,\u03bb2(Y )\n\u03ba\u03b1,\u03bb1(Y |x)\n] , (25)\nand the objective on the RHS is fully reparameterizable and what we chose to optimize.\nC.3.2 BINARY CONCRETE\nIn the binary case, the logistic function is invertible, so it makes most sense to treat the logit plus noise as the stochastic node. In particular, the binary random node was sample from:\nY = log\u03b1+ logU \u2212 log(1\u2212 U)\n\u03bb (26)\nwhere U \u223c Uniform(0, 1) and always followed by \u03c3 as downstream computation. logU \u2212 log(1\u2212 U) is a Logistic random variable, details in the cheat sheet, and so the log-density log g\u03b1,\u03bb(y) of this node (before applying \u03c3) is\nlog g\u03b1,\u03bb(y) = log \u03bb\u2212 \u03bby + log\u03b1\u2212 2 log(1 + exp(\u2212\u03bby + log\u03b1))\nAll together the relaxation in the binary special case would be\nL1(\u03b8, a, \u03b1) relax E Y\u223cg\u03b1,\u03bb1 (y|x)\n[ log p\u03b8(x|\u03c3(Y )) + log fa,\u03bb2(Y )\ng\u03b1,\u03bb1(Y |x)\n] , (27)\nwhere fa,\u03bb2(y) is the density of a Logistic random variable sampled via Eq. 26 with location a and temperature \u03bb2.\nThis section had a dense array of densities, so we summarize the relevant ones, along with how to sample from them, in Appendix F.\nC.4 CHOOSING THE TEMPERATURE\nThe success of Concrete relaxations will depend heavily on the choice of temperature during training. It is important that the relaxed nodes are not able to represent a precise real valued mode in the interior of the simplex as in Figure 2d. For example, choosing additive Gaussian noise \u223c Normal(0, 1) with the logistic function \u03c3(x) to get relaxed Bernoullis of the form \u03c3( + \u00b5) will result in a large mode in the centre of the interval. This is because the tails of the Gaussian distribution drop off much faster than the rate at which \u03c3 squashes. Even including a temperature parameter does not completely solve this problem; the density of \u03c3(( + \u00b5)/\u03bb) at any temperature still goes to 0 as its approaches the boundaries 0 and 1 of the unit interval. Therefore (d) of Proposition 1 is a conservative guideline for generic n-ary Concrete relaxations; at temperatures lower than (n\u2212 1)\u22121 we are guaranteed not to have any modes in the interior for any \u03b1 \u2208 (0,\u221e)n. In the case of the Binary Concrete distribution, the tails of the Logistic additive noise are balanced with the logistic squashing function and for temperatures \u03bb \u2264 1 the density of the Binary Concrete distribution is log-convex for all parameters \u03b1, see Figure 3b. Still, practice will often disagree with theory here. The peakiness of the Concrete distribution increases with n, so much higher temperatures are tolerated (usually necessary).\nFor n = 1 temperatures \u03bb \u2264 (n \u2212 1)\u22121 is a good guideline. For n > 1 taking \u03bb \u2264 (n \u2212 1)\u22121 is not necessarily a good guideline, although it will depend on n and the specific application. As n \u2192 \u221e the Concrete distribution becomes peakier, because the random normalizing constant\u2211n k=1 exp((log\u03b1k + Gk)/\u03bb) grows. This means that practically speaking the optimization can tolerate much higher temperatures than (n\u2212 1)\u22121. We found in the cases n = 4 that \u03bb = 1 was the best temperature and in n = 8, \u03bb = 2/3 was the best. Yet \u03bb = 2/3 was the best single performing temperature across the n \u2208 {2, 4, 8} cases that we considered. We recommend starting in that ball-park and exploring for any specific application.\nWhen the loss depends on a KL divergence between two Concrete nodes, it\u2019s possible to give the nodes distinct temperatures. We found this to improve results quite dramatically. In the context of our original problem and it\u2019s relaxation:\nL1(\u03b8, a, \u03b1) relax E Y\u223c\u03ba\u03b1,\u03bb1 (y|x)\n[ log p\u03b8(x| exp(Y )) + log \u03c1a,\u03bb2(Y )\n\u03ba\u03b1,\u03bb1(Y |x)\n] , (28)\nBoth \u03bb1 for the posterior temperature and \u03bb2 for the prior temperature are tunable hyperparameters."}, {"heading": "D EXPERIMENTAL DETAILS", "text": "The basic model architectures we considered are exactly analogous to those in Burda et al. (2016) with Concrete/discrete random variables replacing Gaussians.\nD.1 \u2014 VS \u223c\nThe conditioning functions we used were either linear or non-linear. Non-linear consisted of two tanh layers of the same size as the preceding stochastic layer in the computation graph.\nD.2 n-ARY LAYERS\nAll our models are neural networks with layers of n-ary discrete stochastic nodes with log2(n)dimensional states on the corners of the hypercube {\u22121, 1}log2(n). For a generic n-ary node\nsampling proceeds as follows. Sample a n-ary discrete random variable D \u223c Discrete(\u03b1) for \u03b1 \u2208 (0,\u221e)n. If C is the log2(n)\u00d7nmatrix, which lists the corners of the hypercube {\u22121, 1}log2(n) as columns, then we took Y = CD as downstream computation on D. The corresponding Concrete relaxation is to take X \u223c Concrete(\u03b1, \u03bb) for some fixed temperature \u03bb \u2208 (0,\u221e) and set Y\u0303 = CX . For the binary case, this amounts to simply sampling U \u223c Uniform(0, 1) and taking Y = 2H(logU \u2212 log(1 \u2212 U) + log\u03b1) \u2212 1. The corresponding Binary Concrete relaxation is Y\u0303 = 2\u03c3((logU \u2212 log(1\u2212 U) + log\u03b1)/\u03bb)\u2212 1.\nD.3 BIAS INITIALIZATION\nAll biases were initialized to 0 with the exception of the biases in the prior decoder distribution over the 784 or 392 observed units. These were initialized to the logit of the base rate averaged over the respective dataset (MNIST or Omniglot).\nD.4 CENTERING\nWe also found it beneficial to center the layers of the inference network during training. The activity in (\u22121, 1)d of each stochastic layer was centered during training by maintaining a exponentially decaying average with rate 0.9 over minibatches. This running average was subtracted from the activity of the layer before it was updated. Gradients did not flow throw this computation, so it simply amounted to a dynamic offset. The averages were not updated during the evaluation.\nD.5 HYPERPARAMETER SELECTION\nAll models were initialized with the heuristic of Glorot & Bengio (2010) and optimized using Adam (Kingma & Ba, 2014) with parameters \u03b21 = 0.9, \u03b22 = 0.999 for 107 steps on minibatches of size 64. Hyperparameters were selected on the MNIST dataset by grid search taking the values that performed best on the validation set. Learning rates were chosen from {10\u22124, 3 \u00b7 10\u22124, 10\u22123} and weight decay from {0, 10\u22122, 10\u22121, 1}. Two sets of hyperparameters were selected, one for linear models and one for non-linear models. The linear models\u2019 hyperparameters were selected with the 200H\u2013200H\u2013784V density model on the L5(\u03b8, \u03c6) objective. The non-linear models\u2019 hyperparameters were selected with the 200H\u223c200H\u223c784V density model on the L5(\u03b8, \u03c6) objective. For density estimation, the Concrete relaxation hyperparameters were (weight decay = 0, learning rate = 3 \u00b7 10\u22124) for linear and (weight decay = 0, learning rate = 10\u22124) for non-linear. For structured prediction Concrete relaxations used (weight decay = 10\u22123, learning rate = 3 \u00b7 10\u22124). In addition to tuning learning rate and weight decay, we tuned temperatures for the Concrete relaxations on the density estimation task. We found it valuable to have different values for the prior and posterior distributions, see Eq. 28. In particular, for binary we found that (prior \u03bb2 = 1/2, posterior \u03bb1 = 2/3) was best, for 4-ary we found (prior \u03bb2 = 2/3, posterior \u03bb1 = 1) was best, and (prior \u03bb2 = 2/5, posterior \u03bb1 = 2/3) for 8-ary. No temperature annealing was used. For structured prediction we used just the corresponding posterior \u03bb1 as the temperature for the whole graph, as there was no variational posterior.\nWe performed early stopping when training with the score function estimators (VIMCO/NVIL) as they were much more prone to overfitting.\nE EXTRA RESULTS\nF CHEAT SHEET"}], "references": [{"title": "TensorFlow: Large-scale machine learning on heterogeneous systems", "author": ["cent Vanhoucke", "Vijay Vasudevan", "Fernanda Vi\u00e9gas", "Oriol Vinyals", "Pete Warden", "Martin Wattenberg", "Martin Wicke", "Yuan Yu", "Xiaoqiang Zheng"], "venue": null, "citeRegEx": "Vanhoucke et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Vanhoucke et al\\.", "year": 2015}, {"title": "A general class of distributions on the simplex", "author": ["J Aitchison"], "venue": "Journal of the Royal Statistical Society. Series B (Methodological),", "citeRegEx": "Aitchison.,? \\Q1985\\E", "shortCiteRegEx": "Aitchison.", "year": 1985}, {"title": "Logistic-normal distributions: Some properties and uses", "author": ["J Atchison", "Sheng M Shen"], "venue": null, "citeRegEx": "Atchison and Shen.,? \\Q1980\\E", "shortCiteRegEx": "Atchison and Shen.", "year": 1980}, {"title": "Estimating or propagating gradients through stochastic neurons for conditional computation", "author": ["Yoshua Bengio", "Nicholas L\u00e9onard", "Aaron Courville"], "venue": "arXiv preprint arXiv:1308.3432,", "citeRegEx": "Bengio et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2013}, {"title": "Importance weighted autoencoders", "author": ["Yuri Burda", "Roger Grosse", "Ruslan Salakhutdinov"], "venue": null, "citeRegEx": "Burda et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Burda et al\\.", "year": 2016}, {"title": "Concepts of independence for proportions with a generalization of the dirichlet distribution", "author": ["Robert J Connor", "James E Mosimann"], "venue": "Journal of the American Statistical Association,", "citeRegEx": "Connor and Mosimann.,? \\Q1969\\E", "shortCiteRegEx": "Connor and Mosimann.", "year": 1969}, {"title": "On a class of distributions on the simplex", "author": ["Stefano Favaro", "Georgia Hadjicharalambous", "Igor Pr\u00fcnster"], "venue": "Journal of Statistical Planning and Inference,", "citeRegEx": "Favaro et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Favaro et al\\.", "year": 2011}, {"title": "Continuous sigmoidal belief networks trained using slice sampling", "author": ["Brendan Frey"], "venue": "In NIPS,", "citeRegEx": "Frey.,? \\Q1997\\E", "shortCiteRegEx": "Frey.", "year": 1997}, {"title": "Gradient estimation", "author": ["Michael C Fu"], "venue": "Handbooks in operations research and management science,", "citeRegEx": "Fu.,? \\Q2006\\E", "shortCiteRegEx": "Fu.", "year": 2006}, {"title": "Understanding the difficulty of training deep feedforward neural networks", "author": ["Xavier Glorot", "Yoshua Bengio"], "venue": "In Aistats,", "citeRegEx": "Glorot and Bengio.,? \\Q2010\\E", "shortCiteRegEx": "Glorot and Bengio.", "year": 2010}, {"title": "Likelihood ratio gradient estimation for stochastic systems", "author": ["Peter W Glynn"], "venue": "Communications of the ACM,", "citeRegEx": "Glynn.,? \\Q1990\\E", "shortCiteRegEx": "Glynn.", "year": 1990}, {"title": "Hybrid computing using a neural network with dynamic external", "author": ["Alex Graves", "Greg Wayne", "Malcolm Reynolds", "Tim Harley", "Ivo Danihelka", "Agnieszka GrabskaBarwi\u0144ska", "Sergio G\u00f3mez Colmenarejo", "Edward Grefenstette", "Tiago Ramalho", "John Agapiou"], "venue": "memory. Nature,", "citeRegEx": "Graves et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2016}, {"title": "Variance reduction techniques for gradient estimates in reinforcement learning", "author": ["Evan Greensmith", "Peter L. Bartlett", "Jonathan Baxter"], "venue": null, "citeRegEx": "Greensmith et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Greensmith et al\\.", "year": 2004}, {"title": "Learning to transduce with unbounded memory", "author": ["Edward Grefenstette", "Karl Moritz Hermann", "Mustafa Suleyman", "Phil Blunsom"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Grefenstette et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Grefenstette et al\\.", "year": 2015}, {"title": "Deep autoregressive networks", "author": ["Karol Gregor", "Ivo Danihelka", "Andriy Mnih", "Charles Blundell", "Daan Wierstra"], "venue": "arXiv preprint arXiv:1310.8499,", "citeRegEx": "Gregor et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Gregor et al\\.", "year": 2013}, {"title": "Draw: A recurrent neural network for image generation", "author": ["Karol Gregor", "Ivo Danihelka", "Alex Graves", "Danilo Jimenez Rezende", "Daan Wierstra"], "venue": "arXiv preprint arXiv:1502.04623,", "citeRegEx": "Gregor et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Gregor et al\\.", "year": 2015}, {"title": "MuProp: Unbiased backpropagation for stochastic neural networks", "author": ["Shixiang Gu", "Sergey Levine", "Ilya Sutskever", "Andriy Mnih"], "venue": null, "citeRegEx": "Gu et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Gu et al\\.", "year": 2016}, {"title": "Statistical theory of extreme values and some practical applications: a series of lectures", "author": ["Emil Julius Gumbel"], "venue": "Number 33. US Govt. Print. Office,", "citeRegEx": "Gumbel.,? \\Q1954\\E", "shortCiteRegEx": "Gumbel.", "year": 1954}, {"title": "On the partition function and random maximum a-posteriori perturbations", "author": ["Tamir Hazan", "Tommi Jaakkola"], "venue": "In ICML,", "citeRegEx": "Hazan and Jaakkola.,? \\Q2012\\E", "shortCiteRegEx": "Hazan and Jaakkola.", "year": 2012}, {"title": "Perturbation, Optimization, and Statistics", "author": ["Tamir Hazan", "George Papandreou", "Daniel Tarlow"], "venue": null, "citeRegEx": "Hazan et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Hazan et al\\.", "year": 2016}, {"title": "Categorical Reparameterization with Gumbel-Softmax", "author": ["E. Jang", "S. Gu", "B. Poole"], "venue": "ArXiv e-prints,", "citeRegEx": "Jang et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Jang et al\\.", "year": 2016}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba"], "venue": "arXiv preprint arXiv:1412.6980,", "citeRegEx": "Kingma and Ba.,? \\Q2014\\E", "shortCiteRegEx": "Kingma and Ba.", "year": 2014}, {"title": "Auto-encoding variational bayes", "author": ["Diederik P Kingma", "Max Welling"], "venue": "arXiv preprint arXiv:1312.6114,", "citeRegEx": "Kingma and Welling.,? \\Q2013\\E", "shortCiteRegEx": "Kingma and Welling.", "year": 2013}, {"title": "Auto-encoding variational bayes", "author": ["Diederik P Kingma", "Max Welling"], "venue": "ICLR,", "citeRegEx": "Kingma and Welling.,? \\Q2014\\E", "shortCiteRegEx": "Kingma and Welling.", "year": 2014}, {"title": "Semantic parsing with semi-supervised sequential autoencoders", "author": ["Tom\u00e1\u0161 Ko\u010disk\u00fd", "G\u00e1bor Melis", "Edward Grefenstette", "Chris Dyer", "Wang Ling", "Phil Blunsom", "Karl Moritz Hermann"], "venue": null, "citeRegEx": "Ko\u010disk\u00fd et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Ko\u010disk\u00fd et al\\.", "year": 2016}, {"title": "Individual Choice Behavior: A Theoretical Analysis", "author": ["R. Duncan Luce"], "venue": "New York: Wiley,", "citeRegEx": "Luce.,? \\Q1959\\E", "shortCiteRegEx": "Luce.", "year": 1959}, {"title": "A Poisson process model for Monte Carlo", "author": ["Chris J Maddison"], "venue": "In NIPS,", "citeRegEx": "Maddison.,? \\Q2014\\E", "shortCiteRegEx": "Maddison.", "year": 2014}, {"title": "Neural variational inference and learning in belief networks", "author": ["Andriy Mnih", "Karol Gregor"], "venue": "In ICML,", "citeRegEx": "Mnih and Gregor.,? \\Q2014\\E", "shortCiteRegEx": "Mnih and Gregor.", "year": 2014}, {"title": "Variational inference for monte carlo objectives", "author": ["Andriy Mnih", "Danilo Jimenez Rezende"], "venue": "In ICML,", "citeRegEx": "Mnih and Rezende.,? \\Q2016\\E", "shortCiteRegEx": "Mnih and Rezende.", "year": 2016}, {"title": "Recurrent Models of Visual Attention", "author": ["Volodymyr Mnih", "Nicolas Heess", "Alex Graves", "koray kavukcuoglu"], "venue": "In NIPS,", "citeRegEx": "Mnih et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2014}, {"title": "Rejection sampling variational inference", "author": ["Christian A Naesseth", "Francisco JR Ruiz", "Scott W Linderman", "David M Blei"], "venue": "arXiv preprint arXiv:1610.05683,", "citeRegEx": "Naesseth et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Naesseth et al\\.", "year": 2016}, {"title": "Variational bayesian inference with stochastic search", "author": ["John William Paisley", "David M. Blei", "Michael I. Jordan"], "venue": "In ICML,", "citeRegEx": "Paisley et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Paisley et al\\.", "year": 2012}, {"title": "Perturb-and-map random fields: Using discrete optimization to learn and sample from energy models", "author": ["George Papandreou", "Alan L Yuille"], "venue": "In ICCV,", "citeRegEx": "Papandreou and Yuille.,? \\Q2011\\E", "shortCiteRegEx": "Papandreou and Yuille.", "year": 2011}, {"title": "Techniques for learning binary stochastic feedforward neural networks", "author": ["Tapani Raiko", "Mathias Berglund", "Guillaume Alain", "Laurent Dinh"], "venue": "arXiv preprint arXiv:1406.2989,", "citeRegEx": "Raiko et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Raiko et al\\.", "year": 2014}, {"title": "Black box variational inference", "author": ["Rajesh Ranganath", "Sean Gerrish", "David M. Blei"], "venue": "In AISTATS,", "citeRegEx": "Ranganath et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Ranganath et al\\.", "year": 2014}, {"title": "Dependence properties of generalized liouville distributions on the simplex", "author": ["William S Rayens", "Cidambi Srinivasan"], "venue": "Journal of the American Statistical Association,", "citeRegEx": "Rayens and Srinivasan.,? \\Q1994\\E", "shortCiteRegEx": "Rayens and Srinivasan.", "year": 1994}, {"title": "Stochastic backpropagation and approximate inference in deep generative models", "author": ["Danilo Jimenez Rezende", "Shakir Mohamed", "Daan Wierstra"], "venue": "In ICML,", "citeRegEx": "Rezende et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Rezende et al\\.", "year": 2014}, {"title": "The generalized reparameterization gradient", "author": ["Francisco JR Ruiz", "Michalis K Titsias", "David M Blei"], "venue": "arXiv preprint arXiv:1610.02287,", "citeRegEx": "Ruiz et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Ruiz et al\\.", "year": 2016}, {"title": "On the quantitative analysis of deep belief networks", "author": ["Ruslan Salakhutdinov", "Iain Murray"], "venue": "In ICML,", "citeRegEx": "Salakhutdinov and Murray.,? \\Q2008\\E", "shortCiteRegEx": "Salakhutdinov and Murray.", "year": 2008}, {"title": "Gradient estimation using stochastic computation graphs", "author": ["John Schulman", "Nicolas Heess", "Theophane Weber", "Pieter Abbeel"], "venue": "In NIPS,", "citeRegEx": "Schulman et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Schulman et al\\.", "year": 2015}, {"title": "Doubly stochastic variational bayes for non-conjugate inference", "author": ["Michalis Titsias", "Miguel L\u00e1zaro-Gredilla"], "venue": null, "citeRegEx": "Titsias and L\u00e1zaro.Gredilla.,? \\Q2014\\E", "shortCiteRegEx": "Titsias and L\u00e1zaro.Gredilla.", "year": 2014}, {"title": "Local expectation gradients for black box variational inference", "author": ["Michalis Titsias", "Miguel L\u00e1zaro-Gredilla"], "venue": "In NIPS,", "citeRegEx": "Titsias and L\u00e1zaro.Gredilla.,? \\Q2015\\E", "shortCiteRegEx": "Titsias and L\u00e1zaro.Gredilla.", "year": 2015}, {"title": "Simple statistical gradient-following algorithms for connectionist reinforcement learning", "author": ["Ronald J Williams"], "venue": "Machine learning,", "citeRegEx": "Williams.,? \\Q1992\\E", "shortCiteRegEx": "Williams.", "year": 1992}, {"title": "Show, attend and tell: Neural image caption generation with visual attention", "author": ["Kelvin Xu", "Jimmy Ba", "Ryan Kiros", "Kyunghyun Cho", "Aaron Courville", "Ruslan Salakhudinov", "Rich Zemel", "Yoshua Bengio"], "venue": "In ICML,", "citeRegEx": "Xu et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Xu et al\\.", "year": 2015}, {"title": "The relationship between luce\u2019s choice axiom, thurstone\u2019s theory of comparative judgment, and the double exponential distribution", "author": ["John I Yellott"], "venue": "Journal of Mathematical Psychology,", "citeRegEx": "Yellott.,? \\Q1977\\E", "shortCiteRegEx": "Yellott.", "year": 1977}], "referenceMentions": [{"referenceID": 36, "context": "Here, the observation that AD \u201cjust works\u201d when stochastic nodes1 can be reparameterized into deterministic functions of their parameters and a fixed noise distribution (Kingma & Welling, 2013; Rezende et al., 2014), has liberated researchers in the development of large complex stochastic architectures (e.", "startOffset": 169, "endOffset": 215}, {"referenceID": 11, "context": "Deterministic discreteness can be relaxed and approximated reasonably well with sigmoidal functions or the softmax (see e.g., Grefenstette et al., 2015; Graves et al., 2016), but, if a distribution over discrete states is needed, there is no clear solution.", "startOffset": 115, "endOffset": 173}, {"referenceID": 39, "context": "While these can be made to work with AD, they involve special casing and defining surrogate objectives (Schulman et al., 2015), and even then they can have high variance.", "startOffset": 103, "endOffset": 126}, {"referenceID": 29, "context": "Still, reasoning about discrete computation comes naturally to humans, and so, despite the difficulty associated, many modern architectures incorporate discrete stochasticity (Mnih et al., 2014; Xu et al., 2015; Ko\u010disk\u00fd et al., 2016).", "startOffset": 175, "endOffset": 233}, {"referenceID": 43, "context": "Still, reasoning about discrete computation comes naturally to humans, and so, despite the difficulty associated, many modern architectures incorporate discrete stochasticity (Mnih et al., 2014; Xu et al., 2015; Ko\u010disk\u00fd et al., 2016).", "startOffset": 175, "endOffset": 233}, {"referenceID": 24, "context": "Still, reasoning about discrete computation comes naturally to humans, and so, despite the difficulty associated, many modern architectures incorporate discrete stochasticity (Mnih et al., 2014; Xu et al., 2015; Ko\u010disk\u00fd et al., 2016).", "startOffset": 175, "endOffset": 233}, {"referenceID": 42, "context": "The score function estimator (SFE, Fu, 2006), also known as the REINFORCE (Williams, 1992) or likelihood-ratio estimator (Glynn, 1990), is based on the identity \u2207\u03c6p\u03c6(x) = p\u03c6(x)\u2207\u03c6 log p\u03c6(x), which allows the gradient in Eq.", "startOffset": 74, "endOffset": 90}, {"referenceID": 10, "context": "The score function estimator (SFE, Fu, 2006), also known as the REINFORCE (Williams, 1992) or likelihood-ratio estimator (Glynn, 1990), is based on the identity \u2207\u03c6p\u03c6(x) = p\u03c6(x)\u2207\u03c6 log p\u03c6(x), which allows the gradient in Eq.", "startOffset": 121, "endOffset": 134}, {"referenceID": 12, "context": "Though the basic version of the estimator can suffer from high variance, various variance reduction techniques can be used to make the estimator much more effective (Greensmith et al., 2004).", "startOffset": 165, "endOffset": 190}, {"referenceID": 42, "context": "Baselines are the most important and widely used of these techniques (Williams, 1992).", "startOffset": 69, "endOffset": 85}, {"referenceID": 31, "context": "A number of score function estimators have been developed in machine learning (Paisley et al., 2012; Gregor et al., 2013; Ranganath et al., 2014; Mnih & Gregor, 2014; Titsias & L\u00e1zaro-Gredilla, 2015; Gu et al., 2016), which differ primarily in the variance reduction techniques used.", "startOffset": 78, "endOffset": 216}, {"referenceID": 14, "context": "A number of score function estimators have been developed in machine learning (Paisley et al., 2012; Gregor et al., 2013; Ranganath et al., 2014; Mnih & Gregor, 2014; Titsias & L\u00e1zaro-Gredilla, 2015; Gu et al., 2016), which differ primarily in the variance reduction techniques used.", "startOffset": 78, "endOffset": 216}, {"referenceID": 34, "context": "A number of score function estimators have been developed in machine learning (Paisley et al., 2012; Gregor et al., 2013; Ranganath et al., 2014; Mnih & Gregor, 2014; Titsias & L\u00e1zaro-Gredilla, 2015; Gu et al., 2016), which differ primarily in the variance reduction techniques used.", "startOffset": 78, "endOffset": 216}, {"referenceID": 16, "context": "A number of score function estimators have been developed in machine learning (Paisley et al., 2012; Gregor et al., 2013; Ranganath et al., 2014; Mnih & Gregor, 2014; Titsias & L\u00e1zaro-Gredilla, 2015; Gu et al., 2016), which differ primarily in the variance reduction techniques used.", "startOffset": 78, "endOffset": 216}, {"referenceID": 37, "context": "For continuous latent variables which are not directly reparameterizable, new hybrid estimators have also been developed, by combining partial reparameterizations with score function estimators (Ruiz et al., 2016; Naesseth et al., 2016).", "startOffset": 194, "endOffset": 236}, {"referenceID": 30, "context": "For continuous latent variables which are not directly reparameterizable, new hybrid estimators have also been developed, by combining partial reparameterizations with score function estimators (Ruiz et al., 2016; Naesseth et al., 2016).", "startOffset": 194, "endOffset": 236}, {"referenceID": 4, "context": "The multi-sample variational objective (Burda et al., 2016),", "startOffset": 39, "endOffset": 59}, {"referenceID": 4, "context": ", 2013) on log p\u03b8(x), while for m > 1, it is known as the importance weighted bound (Burda et al., 2016).", "startOffset": 84, "endOffset": 104}, {"referenceID": 25, "context": "To motivate the construction of Concrete random variables, we review a method for sampling from discrete distributions called the Gumbel-Max trick (Luce, 1959; Yellott, 1977; Papandreou & Yuille, 2011; Hazan & Jaakkola, 2012; Maddison et al., 2014).", "startOffset": 147, "endOffset": 248}, {"referenceID": 44, "context": "To motivate the construction of Concrete random variables, we review a method for sampling from discrete distributions called the Gumbel-Max trick (Luce, 1959; Yellott, 1977; Papandreou & Yuille, 2011; Hazan & Jaakkola, 2012; Maddison et al., 2014).", "startOffset": 147, "endOffset": 248}, {"referenceID": 17, "context": "This distribution features in extreme value theory (Gumbel, 1954) where it plays a central role similar to the Normal distribution: the Gumbel distribution is stable under max operations, and for some distributions, the order statistics (suitably normalized) of i.", "startOffset": 51, "endOffset": 65}, {"referenceID": 19, "context": "See (Hazan et al., 2016) for a collection of related work, and particularly the chapter (Maddison, 2016) for a proof and generalization of this trick.", "startOffset": 4, "endOffset": 24}, {"referenceID": 1, "context": "The Dirichlet can be characterized by strong independence properties, and a great deal of work has been done to generalize it (Connor & Mosimann, 1969; Aitchison, 1985; Rayens & Srinivasan, 1994; Favaro et al., 2011).", "startOffset": 126, "endOffset": 216}, {"referenceID": 6, "context": "The Dirichlet can be characterized by strong independence properties, and a great deal of work has been done to generalize it (Connor & Mosimann, 1969; Aitchison, 1985; Rayens & Srinivasan, 1994; Favaro et al., 2011).", "startOffset": 126, "endOffset": 216}, {"referenceID": 20, "context": "The idea of using a softmax of Gumbels as a relaxation for a discrete random variable was concurrently considered by (Jang et al., 2016), where it was called the Gumbel-Softmax.", "startOffset": 117, "endOffset": 136}, {"referenceID": 7, "context": "(Frey, 1997) introduced nonlinear Gaussian units which computed their activation by passing Gaussian noise with the mean and variance specified by the input to the unit through a nonlinearity, such as the logistic function.", "startOffset": 0, "endOffset": 12}, {"referenceID": 24, "context": "Most recently, to avoid the difficulty associated with likelihood-ratio methods (Ko\u010disk\u00fd et al., 2016) relaxed the discrete sampling operation by sampling a vector of Gaussians instead and passing those through a softmax.", "startOffset": 80, "endOffset": 102}, {"referenceID": 3, "context": "These are usually collected under the umbrella of straightthrough estimators (Bengio et al., 2013; Raiko et al., 2014).", "startOffset": 77, "endOffset": 118}, {"referenceID": 33, "context": "These are usually collected under the umbrella of straightthrough estimators (Bengio et al., 2013; Raiko et al., 2014).", "startOffset": 77, "endOffset": 118}], "year": 2017, "abstractText": "The reparameterization trick enables optimizing large scale stochastic computation graphs via gradient descent. The essence of the trick is to refactor each stochastic node into a differentiable function of its parameters and a random variable with fixed distribution. After refactoring, the gradients of the loss propagated by the chain rule through the graph are low variance unbiased estimators of the gradients of the expected loss. While many continuous random variables have such reparameterizations, discrete random variables lack useful reparameterizations due to the discontinuous nature of discrete states. In this work we introduce CONCRETE random variables\u2014CONtinuous relaxations of disCRETE random variables. The Concrete distribution is a new family of distributions with closed form densities and a simple reparameterization. Whenever a discrete stochastic node of a computation graph can be refactored into a one-hot bit representation that is treated continuously, Concrete stochastic nodes can be used with automatic differentiation to produce low-variance biased gradients of objectives (including objectives that depend on the log-probability of latent stochastic nodes) on the corresponding discrete graph. We demonstrate the effectiveness of Concrete relaxations on density estimation and structured prediction tasks using neural networks.", "creator": "LaTeX with hyperref package"}, "id": "ICLR_2017_115"}