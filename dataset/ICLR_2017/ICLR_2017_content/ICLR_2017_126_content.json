{"name": "ICLR_2017_126.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["CATEGORICAL REPARAMETERIZATION", "WITH GUMBEL-SOFTMAX", "Eric Jang", "Shixiang Gu", "Ben Poole"], "emails": ["ejang@google.com", "sg717@cam.ac.uk", "poole@cs.stanford.edu"], "sections": [{"heading": "1 INTRODUCTION", "text": "Stochastic neural networks with discrete random variables are a powerful technique for representing distributions encountered in unsupervised learning, language modeling, attention mechanisms, and reinforcement learning domains. For example, discrete variables have been used to learn probabilistic latent representations that correspond to distinct semantic classes (Kingma et al., 2014), image regions (Xu et al., 2015), and memory locations (Graves et al., 2014; Graves et al., 2016). Discrete representations are often more interpretable (Chen et al., 2016) and more computationally efficient (Rae et al., 2016) than their continuous analogues.\nHowever, stochastic networks with discrete variables are difficult to train because the backpropagation algorithm \u2014 while permitting efficient computation of parameter gradients \u2014 cannot be applied to non-differentiable layers. Prior work on stochastic gradient estimation has traditionally focused on either score function estimators augmented with Monte Carlo variance reduction techniques (Paisley et al., 2012; Mnih & Gregor, 2014; Gu et al., 2016; Gregor et al., 2013), or biased path derivative estimators for Bernoulli variables (Bengio et al., 2013). However, no existing gradient estimator has been formulated specifically for categorical variables. The contributions of this work are threefold:\n1. We introduce Gumbel-Softmax, a continuous distribution on the simplex that can approximate categorical samples, and whose parameter gradients can be easily computed via the reparameterization trick.\n2. We show experimentally that Gumbel-Softmax outperforms all single-sample gradient estimators on both Bernoulli variables and categorical variables.\n3. We show that this estimator can be used to efficiently train semi-supervised models (e.g. Kingma et al. (2014)) without costly marginalization over unobserved categorical latent variables.\nThe practical outcome of this paper is a simple, differentiable approximate sampling mechanism for categorical variables that can be integrated into neural networks and trained using standard backpropagation.\n\u2217Work done during an internship at Google Brain."}, {"heading": "2 THE GUMBEL-SOFTMAX DISTRIBUTION", "text": "We begin by defining the Gumbel-Softmax distribution, a continuous distribution over the simplex that can approximate samples from a categorical distribution. Let z be a categorical variable with class probabilities \u03c01, \u03c02, ...\u03c0k. For the remainder of this paper we assume categorical samples are encoded as k-dimensional one-hot vectors lying on the corners of the (k \u2212 1)-dimensional simplex, \u2206k\u22121. This allows us to define quantities such as the element-wise mean Ep[z] = [\u03c01, ..., \u03c0k] of these vectors.\nThe Gumbel-Max trick (Gumbel, 1954; Maddison et al., 2014) provides a simple and efficient way to draw samples z from a categorical distribution with class probabilities \u03c0:\nz = one_hot ( arg max\ni [gi + log \u03c0i]\n) (1)\nwhere g1...gk are i.i.d samples drawn from Gumbel(0, 1)1. We use the softmax function as a continuous, differentiable approximation to arg max, and generate k-dimensional sample vectors y \u2208 \u2206k\u22121 where\nyi = exp((log(\u03c0i) + gi)/\u03c4)\u2211k j=1 exp((log(\u03c0j) + gj)/\u03c4)\nfor i = 1, ..., k. (2)\nThe density of the Gumbel-Softmax distribution (derived in Appendix B) is:\np\u03c0,\u03c4 (y1, ..., yk) = \u0393(k)\u03c4 k\u22121 ( k\u2211 i=1 \u03c0i/y \u03c4 i )\u2212k k\u220f i=1 ( \u03c0i/y \u03c4+1 i ) (3)\nThis distribution was independently discovered by Maddison et al. (2016), where it is referred to as the concrete distribution. As the softmax temperature \u03c4 approaches 0, samples from the GumbelSoftmax distribution become one-hot and the Gumbel-Softmax distribution becomes identical to the categorical distribution p(z)."}, {"heading": "2.1 GUMBEL-SOFTMAX ESTIMATOR", "text": "The Gumbel-Softmax distribution is smooth for \u03c4 > 0, and therefore has a well-defined gradient \u2202y/\u2202\u03c0 with respect to the parameters \u03c0. Thus, by replacing categorical samples with GumbelSoftmax samples we can use backpropagation to compute gradients (see Section 3.1). We denote\n1The Gumbel(0, 1) distribution can be sampled using inverse transform sampling by drawing u \u223c Uniform(0, 1) and computing g = \u2212 log(\u2212 log(u)).\nthis procedure of replacing non-differentiable categorical samples with a differentiable approximation during training as the Gumbel-Softmax estimator.\nWhile Gumbel-Softmax samples are differentiable, they are not identical to samples from the corresponding categorical distribution for non-zero temperature. For learning, there is a tradeoff between small temperatures, where samples are close to one-hot but the variance of the gradients is large, and large temperatures, where samples are smooth but the variance of the gradients is small (Figure 1). In practice, we start at a high temperature and anneal to a small but non-zero temperature.\nIn our experiments, we find that the softmax temperature \u03c4 can be annealed according to a variety of schedules and still perform well. If \u03c4 is a learned parameter (rather than annealed via a fixed schedule), this scheme can be interpreted as entropy regularization (Szegedy et al., 2015; Pereyra et al., 2016), where the Gumbel-Softmax distribution can adaptively adjust the \u201cconfidence\u201d of proposed samples during the training process."}, {"heading": "2.2 STRAIGHT-THROUGH GUMBEL-SOFTMAX ESTIMATOR", "text": "Continuous relaxations of one-hot vectors are suitable for problems such as learning hidden representations and sequence modeling. For scenarios in which we are constrained to sampling discrete values (e.g. from a discrete action space for reinforcement learning, or quantized compression), we discretize y using arg max but use our continuous approximation in the backward pass by approximating \u2207\u03b8z \u2248 \u2207\u03b8y. We call this the Straight-Through (ST) Gumbel Estimator, as it is reminiscent of the biased path derivative estimator described in Bengio et al. (2013). ST Gumbel-Softmax allows samples to be sparse even when the temperature \u03c4 is high."}, {"heading": "3 RELATED WORK", "text": "In this section we review existing stochastic gradient estimation techniques for discrete variables (illustrated in Figure 2). Consider a stochastic computation graph (Schulman et al., 2015) with discrete random variable z whose distribution depends on parameter \u03b8, and cost function f(z). The objective is to minimize the expected cost L(\u03b8) = Ez\u223cp\u03b8(z)[f(z)] via gradient descent, which requires us to estimate\u2207\u03b8Ez\u223cp\u03b8(z)[f(z)]."}, {"heading": "3.1 PATH DERIVATIVE GRADIENT ESTIMATORS", "text": "For distributions that are reparameterizable, we can compute the sample z as a deterministic function g of the parameters \u03b8 and an independent random variable , so that z = g(\u03b8, ). The path-wise gradients from f to \u03b8 can then be computed without encountering any stochastic nodes:\n\u2202\n\u2202\u03b8 Ez\u223cp\u03b8 [f(z))] =\n\u2202\n\u2202\u03b8 E [f(g(\u03b8, ))] = E \u223cp\n[ \u2202f\n\u2202g\n\u2202g\n\u2202\u03b8\n] (4)\nFor example, the normal distribution z \u223c N (\u00b5, \u03c3) can be re-written as \u00b5 + \u03c3 \u00b7 N (0, 1), making it trivial to compute \u2202z/\u2202\u00b5 and \u2202z/\u2202\u03c3. This reparameterization trick is commonly applied to training variational autooencoders with continuous latent variables using backpropagation (Kingma & Welling, 2013; Rezende et al., 2014b). As shown in Figure 2, we exploit such a trick in the construction of the Gumbel-Softmax estimator.\nBiased path derivative estimators can be utilized even when z is not reparameterizable. In general, we can approximate \u2207\u03b8z \u2248 \u2207\u03b8m(\u03b8), where m is a differentiable proxy for the stochastic sample. For Bernoulli variables with mean parameter \u03b8, the Straight-Through (ST) estimator (Bengio et al., 2013) approximates m = \u00b5\u03b8(z), implying \u2207\u03b8m = 1. For k = 2 (Bernoulli), ST Gumbel-Softmax is similar to the slope-annealed Straight-Through estimator proposed by Chung et al. (2016), but uses a softmax instead of a hard sigmoid to determine the slope. Rolfe (2016) considers an alternative approach where each binary latent variable parameterizes a continuous mixture model. Reparameterization gradients are obtained by backpropagating through the continuous variables and marginalizing out the binary variables.\nOne limitation of the ST estimator is that backpropagating with respect to the sample-independent mean may cause discrepancies between the forward and backward pass, leading to higher variance.\nGumbel-Softmax avoids this problem because each sample y is a differentiable proxy of the corresponding discrete sample z."}, {"heading": "3.2 SCORE FUNCTION-BASED GRADIENT ESTIMATORS", "text": "The score function estimator (SF, also referred to as REINFORCE (Williams, 1992) and likelihood ratio estimator (Glynn, 1990)) uses the identity \u2207\u03b8 log p\u03b8(z) = p\u03b8(z)\u2207\u03b8 log p\u03b8(z) to derive the following unbiased estimator:\n\u2207\u03b8Ez [f(z)] = Ez [f(z)\u2207\u03b8 log p\u03b8(z)] (5)\nSF only requires that p\u03b8(z) is continuous in \u03b8, and does not require backpropagating through f or the sample z. However, SF suffers from high variance and is consequently slow to converge. In particular, the variance of SF scales linearly with the number of dimensions of the sample vector (Rezende et al., 2014a), making it especially challenging to use for categorical distributions.\nThe variance of a score function estimator can be reduced by subtracting a control variate b(z) from the learning signal f , and adding back its analytical expectation \u00b5b = Ez [b(z)\u2207\u03b8 log p\u03b8(z)] to keep the estimator unbiased:\n\u2207\u03b8Ez [f(z)] = Ez [f(z)\u2207\u03b8 log p\u03b8(z) + (b(z)\u2207\u03b8 log p\u03b8(z)\u2212 b(z)\u2207\u03b8 log p\u03b8(z))] (6) = Ez [(f(z)\u2212 b(z))\u2207\u03b8 log p\u03b8(z)] + \u00b5b (7)\nWe briefly summarize recent stochastic gradient estimators that utilize control variates. We direct the reader to Gu et al. (2016) for further detail on these techniques.\n\u2022 NVIL (Mnih & Gregor, 2014) uses two baselines: (1) a moving average f\u0304 of f to center the learning signal, and (2) an input-dependent baseline computed by a 1-layer neural network\nfitted to f \u2212 f\u0304 (a control variate for the centered learning signal itself). Finally, variance normalization divides the learning signal by max(1, \u03c3f ), where \u03c32f is a moving average of Var[f ]. \u2022 DARN (Gregor et al., 2013) uses b = f(z\u0304) + f \u2032(z\u0304)(z\u0304 \u2212 z), where the baseline corre-\nsponds to the first-order Taylor approximation of f(z) from f(z\u0304). z\u0304 is chosen to be 1/2 for Bernoulli variables, which makes the estimator biased for non-quadratic f , since it ignores the correction term \u00b5b in the estimator expression. \u2022 MuProp (Gu et al., 2016) also models the baseline as a first-order Taylor expansion: b = f(z\u0304) + f \u2032(z\u0304)(z \u2212 z\u0304) and \u00b5b = f \u2032(z\u0304)\u2207\u03b8Ez [z]. To overcome backpropagation through discrete sampling, a mean-field approximation fMF (\u00b5\u03b8(z)) is used in place of f(z) to compute the baseline and derive the relevant gradients. \u2022 VIMCO (Mnih & Rezende, 2016) is a gradient estimator for multi-sample objectives that\nuses the mean of other samples b = 1/m \u2211 j 6=i f(zj) to construct a baseline for each sample zi \u2208 z1:m. We exclude VIMCO from our experiments because we are comparing estimators for single-sample objectives, although Gumbel-Softmax can be easily extended to multisample objectives."}, {"heading": "3.3 SEMI-SUPERVISED GENERATIVE MODELS", "text": "Semi-supervised learning considers the problem of learning from both labeled data (x, y) \u223c DL and unlabeled data x \u223c DU , where x are observations (i.e. images) and y are corresponding labels (e.g. semantic class). For semi-supervised classification, Kingma et al. (2014) propose a variational autoencoder (VAE) whose latent state is the joint distribution over a Gaussian \u201cstyle\u201d variable z and a categorical \u201csemantic class\u201d variable y (Figure 6, Appendix). The VAE objective trains a discriminative network q\u03c6(y|x), inference network q\u03c6(z|x, y), and generative network p\u03b8(x|y, z) end-to-end by maximizing a variational lower bound on the log-likelihood of the observation under the generative model. For labeled data, the class y is observed, so inference is only done on z \u223c q(z|x, y). The variational lower bound on labeled data is given by:\nlog p\u03b8(x, y) \u2265 \u2212L(x, y) = Ez\u223cq\u03c6(z|x,y) [log p\u03b8(x|y, z)]\u2212KL[q(z|x, y)||p\u03b8(y)p(z)] (8)\nFor unlabeled data, difficulties arise because the categorical distribution is not reparameterizable. Kingma et al. (2014) approach this by marginalizing out y over all classes, so that for unlabeled data, inference is still on q\u03c6(z|x, y) for each y. The lower bound on unlabeled data is:\nlog p\u03b8(x) \u2265 \u2212U(x) = Ez\u223cq\u03c6(y,z|x)[log p\u03b8(x|y, z) + log p\u03b8(y) + log p(z)\u2212 q\u03c6(y, z|x)] (9) = \u2211 y q\u03c6(y|x)(\u2212L(x, y) +H(q\u03c6(y|x))) (10)\nThe full maximization objective is:\nJ = E(x,y)\u223cDL [\u2212L(x, y)] + Ex\u223cDU [\u2212U(x)] + \u03b1 \u00b7 E(x,y)\u223cDL [log q\u03c6(y|x)] (11)\nwhere \u03b1 is the scalar trade-off between the generative and discriminative objectives.\nOne limitation of this approach is that marginalization over all k class values becomes prohibitively expensive for models with a large number of classes. If D, I,G are the computational cost of sampling from q\u03c6(y|x), q\u03c6(z|x, y), and p\u03b8(x|y, z) respectively, then training the unsupervised objective requiresO(D+ k(I +G)) for each forward/backward step. In contrast, Gumbel-Softmax allows us to backpropagate through y \u223c q\u03c6(y|x) for single sample gradient estimation, and achieves a cost of O(D+ I+G) per training step. Experimental comparisons in training speed are shown in Figure 5."}, {"heading": "4 EXPERIMENTAL RESULTS", "text": "In our first set of experiments, we compare Gumbel-Softmax and ST Gumbel-Softmax to other stochastic gradient estimators: Score-Function (SF), DARN, MuProp, Straight-Through (ST), and\nSlope-Annealed ST. Each estimator is evaluated on two tasks: (1) structured output prediction and (2) variational training of generative models. We use the MNIST dataset with fixed binarization for training and evaluation, which is common practice for evaluating stochastic gradient estimators (Salakhutdinov & Murray, 2008; Larochelle & Murray, 2011).\nLearning rates are chosen from {3e\u22125, 1e\u22125, 3e\u22124, 1e\u22124, 3e\u22123, 1e\u22123}; we select the best learning rate for each estimator using the MNIST validation set, and report performance on the test set. Samples drawn from the Gumbel-Softmax distribution are continuous during training, but are discretized to one-hot vectors during evaluation. We also found that variance normalization was necessary to obtain competitive performance for SF, DARN, and MuProp. We used sigmoid activation functions for binary (Bernoulli) neural networks and softmax activations for categorical variables. Models were trained using stochastic gradient descent with momentum 0.9."}, {"heading": "4.1 STRUCTURED OUTPUT PREDICTION WITH STOCHASTIC BINARY NETWORKS", "text": "The objective of structured output prediction is to predict the lower half of a 28 \u00d7 28 MNIST digit given the top half of the image (14\u00d728). This is a common benchmark for training stochastic binary networks (SBN) (Raiko et al., 2014; Gu et al., 2016; Mnih & Rezende, 2016). The minimization objective for this conditional generative model is an importance-sampled estimate of the likelihood objective, Eh\u223cp\u03b8(hi|xupper) [ 1 m \u2211m i=1 log p\u03b8(xlower|hi) ] , where m = 1 is used for training and m = 1000 is used for evaluation.\nWe trained a SBN with two hidden layers of 200 units each. This corresponds to either 200 Bernoulli variables (denoted as 392-200-200-392) or 20 categorical variables (each with 10 classes) with binarized activations (denoted as 392-(20\u00d7 10)-(20\u00d7 10)-392). As shown in Figure 3, ST Gumbel-Softmax is on par with the other estimators for Bernoulli variables and outperforms on categorical variables. Meanwhile, Gumbel-Softmax outperforms other estimators on both Bernoulli and Categorical variables. We found that it was not necessary to anneal the softmax temperature for this task, and used a fixed \u03c4 = 1."}, {"heading": "4.2 GENERATIVE MODELING WITH VARIATIONAL AUTOENCODERS", "text": "We train variational autoencoders (Kingma & Welling, 2013), where the objective is to learn a generative model of binary MNIST images. In our experiments, we modeled the latent variable as a single hidden layer with 200 Bernoulli variables or 20 categorical variables (20\u00d710). We use a learned categorical prior rather than a Gumbel-Softmax prior in the training objective. Thus, the minimization objective during training is no longer a variational bound if the samples are not discrete. In practice,\nwe find that optimizing this objective in combination with temperature annealing still minimizes actual variational bounds on validation and test sets. Like the structured output prediction task, we use a multi-sample bound for evaluation with m = 1000.\nThe temperature is annealed using the schedule \u03c4 = max(0.5, exp(\u2212rt)) of the global training step t, where \u03c4 is updated every N steps. N \u2208 {500, 1000} and r \u2208 {1e\u22125, 1e\u22124} are hyperparameters for which we select the best-performing estimator on the validation set and report test performance.\nAs shown in Figure 4, ST Gumbel-Softmax outperforms other estimators for Categorical variables, and Gumbel-Softmax drastically outperforms other estimators in both Bernoulli and Categorical variables."}, {"heading": "4.3 GENERATIVE SEMI-SUPERVISED CLASSIFICATION", "text": "We apply the Gumbel-Softmax estimator to semi-supervised classification on the binary MNIST dataset. We compare the original marginalization-based inference approach (Kingma et al., 2014) to single-sample inference with Gumbel-Softmax and ST Gumbel-Softmax.\nWe trained on a dataset consisting of 100 labeled examples (distributed evenly among each of the 10 classes) and 50,000 unlabeled examples, with dynamic binarization of the unlabeled examples for each minibatch. The discriminative model q\u03c6(y|x) and inference model q\u03c6(z|x, y) are each implemented as 3-layer convolutional neural networks with ReLU activation functions. The generative model p\u03b8(x|y, z) is a 4-layer convolutional-transpose network with ReLU activations. Experimental details are provided in Appendix A.\nEstimators were trained and evaluated against several values of \u03b1 = {0.1, 0.2, 0.3, 0.8, 1.0} and the best unlabeled classification results for test sets were selected for each estimator and reported\nin Table 2. We used an annealing schedule of \u03c4 = max(0.5, exp(\u22123e\u22125 \u00b7 t)), updated every 2000 steps.\nIn Kingma et al. (2014), inference over the latent state is done by marginalizing out y and using the reparameterization trick for sampling from q\u03c6(z|x, y). However, this approach has a computational cost that scales linearly with the number of classes. Gumbel-Softmax allows us to backpropagate directly through single samples from the joint q\u03c6(y, z|x), achieving drastic speedups in training without compromising generative or classification performance. (Table 2, Figure 5).\nIn Figure 5, we show how Gumbel-Softmax versus marginalization scales with the number of categorical classes. For these experiments, we use MNIST images with randomly generated labels. Training the model with the Gumbel-Softmax estimator is 2\u00d7 as fast for 10 classes and 9.9\u00d7 as fast for 100 classes."}, {"heading": "5 DISCUSSION", "text": "The primary contribution of this work is the reparameterizable Gumbel-Softmax distribution, whose corresponding estimator affords low-variance path derivative gradients for the categorical distribution. We show that Gumbel-Softmax and Straight-Through Gumbel-Softmax are effective on structured output prediction and variational autoencoder tasks, outperforming existing stochastic gradient estimators for both Bernoulli and categorical latent variables. Finally, Gumbel-Softmax enables dramatic speedups in inference over discrete latent variables."}, {"heading": "ACKNOWLEDGMENTS", "text": "We sincerely thank Luke Vilnis, Vincent Vanhoucke, Luke Metz, David Ha, Laurent Dinh, George Tucker, and Subhaneil Lahiri for helpful discussions and feedback."}, {"heading": "A SEMI-SUPERVISED CLASSIFICATION MODEL", "text": "Figures 6 and 7 describe the architecture used in our experiments for semi-supervised classification (Section 4.3)."}, {"heading": "B DERIVING THE DENSITY OF THE GUMBEL-SOFTMAX DISTRIBUTION", "text": "Here we derive the probability density function of the Gumbel-Softmax distribution with probabilities \u03c01, ..., \u03c0k and temperature \u03c4 . We first define the logits xi = log \u03c0i, and Gumbel samples\ng1, ..., gk, where gi \u223c Gumbel(0, 1). A sample from the Gumbel-Softmax can then be computed as:\nyi = exp ((xi + gi)/\u03c4)\u2211k j=1 exp ((xj + gj)/\u03c4)\nfor i = 1, ..., k (12)\nB.1 CENTERED GUMBEL DENSITY\nThe mapping from the Gumbel samples g to the Gumbel-Softmax sample y is not invertible as the normalization of the softmax operation removes one degree of freedom. To compensate for this, we define an equivalent sampling process that subtracts off the last element, (xk + gk)/\u03c4 before the softmax:\nyi = exp ((xi + gi \u2212 (xk + gk))/\u03c4)\u2211k j=1 exp ((xj + gj \u2212 (xk + gk))/\u03c4)\nfor i = 1, ..., k (13)\nTo derive the density of this equivalent sampling process, we first derive the density for the \u201dcentered\u201d multivariate Gumbel density corresponding to:\nui = xi + gi \u2212 (xk + gk) for i = 1, ..., k \u2212 1 (14) where gi \u223c Gumbel(0, 1). Note the probability density of a Gumbel distribution with scale parameter \u03b2 = 1 and mean \u00b5 at z is: f(z, \u00b5) = e\u00b5\u2212z\u2212e \u00b5\u2212z . We can now compute the density of this distribution by marginalizing out the last Gumbel sample, gk:\np(u1, ..., uk\u22121) = \u222b \u221e \u2212\u221e dgk p(u1, ..., uk|gk)p(gk)\n= \u222b \u221e \u2212\u221e dgk p(gk) k\u22121\u220f i=1 p(ui|gk)\n= \u222b \u221e \u2212\u221e dgk f(gk, 0) k\u22121\u220f i=1 f(xk + gk, xi \u2212 ui)\n= \u222b \u221e \u2212\u221e dgk e \u2212gk\u2212e\u2212gk k\u22121\u220f i=1 exi\u2212ui\u2212xk\u2212gk\u2212e xi\u2212ui\u2212xk\u2212gk\nWe perform a change of variables with v = e\u2212gk , so dv = \u2212e\u2212gkdgk and dgk = \u2212dv egk = dv/v, and define uk = 0 to simplify notation:\np(u1, ..., uk,\u22121) = \u03b4(uk = 0) \u222b \u221e 0 dv 1 v vexk\u2212v k\u22121\u220f i=1 vexi\u2212ui\u2212xk\u2212ve xi\u2212ui\u2212xk (15)\n= exp ( xk +\nk\u22121\u2211 i=1 (xi \u2212 ui)\n)( exk +\nk\u22121\u2211 i=1 ( exi\u2212ui\n))\u2212k \u0393(k) (16)\n= \u0393(k) exp ( k\u2211 i=1 (xi \u2212 ui) )( k\u2211 i=1 ( exi\u2212ui ))\u2212k (17)\n= \u0393(k) ( k\u220f i=1 exp (xi \u2212 ui) )( k\u2211 i=1 exp (xi \u2212 ui) )\u2212k (18)\nB.2 TRANSFORMING TO A GUMBEL-SOFTMAX\nGiven samples u1, ..., uk,\u22121 from the centered Gumbel distribution, we can apply a deterministic transformation h to yield the first k \u2212 1 coordinates of the sample from the Gumbel-Softmax:\ny1:k = h(u1:k\u22121), h = exp(ui/\u03c4) 1 + \u2211k\u22121 j=1 exp(uj/\u03c4)\n(19)\nNote that the final coordinate probability, yk, is fixed given the first k \u2212 1 as \u2211k i=1 yi = 1:\nyk = 1 + k\u22121\u2211 j=1 exp(uj/\u03c4) \u22121 (20) We can thus compute the probability of a sample from the Gumbel-Softmax using the change of variables formula on only the first k \u2212 1 variables:\np(y1:k) = p ( h\u22121(y1:k\u22121) ) \u2223\u2223\u2223\u2223\u2202h\u22121(y1:k\u22121)\u2202y1:k\u22121 \u2223\u2223\u2223\u2223 (21)\nSo to compute the probability of the Gumbel-Softmax we need two more pieces: the inverse of h and its Jacobian determinant. The inverse of h is:\nh\u22121(y1:k\u22121) = \u03c4 \u00d7 log yi \u2212 log 1\u2212 k\u22121\u2211\nj=1\nyj  (22) (23)\nThe determinant of the Jacobian can then be computed:\u2223\u2223\u2223\u2223\u2202h\u22121(y1:k\u22121)\u2202y1:k\u22121 \u2223\u2223\u2223\u2223 = \u03c4k\u22121 1\u2212 k\u22121\u2211 j=1 yj  k\u22121\u220f i=1 y\u22121i = \u03c4 k\u22121 k\u220f i=1 y\u22121i (24)\nWe can then plug into the change of variables formula (Eq. 21) using the density of the centered Gumbel (Eq.15), the inverse of h (Eq. 22) and its Jacobian determinant (Eq. 24):\np(y1, .., yk) = \u0393(k) ( k\u220f i=1 exp (xi) y\u03c4k y\u03c4i )( k\u2211 i=1 exp (xi) y\u03c4k y\u03c4i )\u2212k \u03c4k\u22121 k\u220f i=1 y\u22121i (25)\n= \u0393(k)\u03c4k\u22121 ( k\u2211 i=1 exp (xi) /y \u03c4 i )\u2212k k\u220f i=1 ( exp (xi) /y \u03c4+1 i ) (26)\n(27)"}], "references": [{"title": "Estimating or propagating gradients through stochastic neurons for conditional computation", "author": ["Y. Bengio", "N. L\u00e9onard", "A. Courville"], "venue": "arXiv preprint arXiv:1308.3432,", "citeRegEx": "Bengio et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2013}, {"title": "Infogan: Interpretable representation learning by information maximizing generative adversarial nets", "author": ["Xi Chen", "Yan Duan", "Rein Houthooft", "John Schulman", "Ilya Sutskever", "Pieter Abbeel"], "venue": null, "citeRegEx": "Chen et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Chen et al\\.", "year": 2016}, {"title": "Hierarchical multiscale recurrent neural networks", "author": ["J. Chung", "S. Ahn", "Y. Bengio"], "venue": "arXiv preprint arXiv:1609.01704,", "citeRegEx": "Chung et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Chung et al\\.", "year": 2016}, {"title": "Likelihood ratio gradient estimation for stochastic systems", "author": ["P. W Glynn"], "venue": "Communications of the ACM,", "citeRegEx": "Glynn.,? \\Q1990\\E", "shortCiteRegEx": "Glynn.", "year": 1990}, {"title": "Hybrid computing using a neural network with dynamic external memory", "author": ["A. Graves", "G. Wayne", "M. Reynolds", "T. Harley", "I. Danihelka", "A. Grabska-Barwi\u0144ska", "S.G. Colmenarejo", "E. Grefenstette", "T. Ramalho", "J. Agapiou"], "venue": null, "citeRegEx": "Graves et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2016}, {"title": "Deep autoregressive networks", "author": ["K. Gregor", "I. Danihelka", "A. Mnih", "C. Blundell", "D. Wierstra"], "venue": "arXiv preprint arXiv:1310.8499,", "citeRegEx": "Gregor et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Gregor et al\\.", "year": 2013}, {"title": "MuProp: Unbiased Backpropagation for Stochastic Neural Networks", "author": ["S. Gu", "S. Levine", "I. Sutskever", "A Mnih"], "venue": null, "citeRegEx": "Gu et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Gu et al\\.", "year": 2016}, {"title": "Statistical theory of extreme values and some practical applications: a series of lectures", "author": ["E.J. Gumbel"], "venue": "Number 33. US Govt. Print. Office,", "citeRegEx": "Gumbel.,? \\Q1954\\E", "shortCiteRegEx": "Gumbel.", "year": 1954}, {"title": "Auto-encoding variational bayes", "author": ["D.P. Kingma", "M. Welling"], "venue": "arXiv preprint arXiv:1312.6114,", "citeRegEx": "Kingma and Welling.,? \\Q2013\\E", "shortCiteRegEx": "Kingma and Welling.", "year": 2013}, {"title": "Semi-supervised learning with deep generative models", "author": ["D.P. Kingma", "S. Mohamed", "D.J. Rezende", "M. Welling"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Kingma et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Kingma et al\\.", "year": 2014}, {"title": "The neural autoregressive distribution estimator", "author": ["H. Larochelle", "I. Murray"], "venue": "In AISTATS,", "citeRegEx": "Larochelle and Murray.,? \\Q2011\\E", "shortCiteRegEx": "Larochelle and Murray.", "year": 2011}, {"title": "The Concrete Distribution: A Continuous Relaxation of Discrete Random Variables", "author": ["C.J. Maddison", "A. Mnih", "Y. Whye Teh"], "venue": null, "citeRegEx": "Maddison et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Maddison et al\\.", "year": 2016}, {"title": "Neural variational inference and learning in belief networks", "author": ["A. Mnih", "K. Gregor"], "venue": null, "citeRegEx": "Mnih and Gregor.,? \\Q2014\\E", "shortCiteRegEx": "Mnih and Gregor.", "year": 2014}, {"title": "Variational inference for monte carlo objectives", "author": ["A. Mnih", "D.J. Rezende"], "venue": "arXiv preprint arXiv:1602.06725,", "citeRegEx": "Mnih and Rezende.,? \\Q2016\\E", "shortCiteRegEx": "Mnih and Rezende.", "year": 2016}, {"title": "Variational Bayesian Inference with Stochastic Search", "author": ["J. Paisley", "D. Blei", "M. Jordan"], "venue": "ArXiv e-prints,", "citeRegEx": "Paisley et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Paisley et al\\.", "year": 2012}, {"title": "Regularizing neural networks by penalizing confident output distributions", "author": ["Gabriel Pereyra", "Geoffrey Hinton", "George Tucker", "Lukasz Kaiser"], "venue": null, "citeRegEx": "Pereyra et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Pereyra et al\\.", "year": 2016}, {"title": "Scaling Memory-Augmented Neural Networks with Sparse Reads and Writes", "author": ["J. W Rae", "J. J Hunt", "T. Harley", "I. Danihelka", "A. Senior", "G. Wayne", "A. Graves", "T. P Lillicrap"], "venue": null, "citeRegEx": "Rae et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Rae et al\\.", "year": 2016}, {"title": "Techniques for learning binary stochastic feedforward neural networks", "author": ["T. Raiko", "M. Berglund", "G. Alain", "L. Dinh"], "venue": "arXiv preprint arXiv:1406.2989,", "citeRegEx": "Raiko et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Raiko et al\\.", "year": 2014}, {"title": "Stochastic backpropagation and approximate inference in deep generative models", "author": ["D.J. Rezende", "S. Mohamed", "D. Wierstra"], "venue": "arXiv preprint arXiv:1401.4082,", "citeRegEx": "Rezende et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Rezende et al\\.", "year": 2014}, {"title": "Stochastic backpropagation and approximate inference in deep generative models", "author": ["D.J. Rezende", "S. Mohamed", "D. Wierstra"], "venue": "In Proceedings of The 31st International Conference on Machine Learning,", "citeRegEx": "Rezende et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Rezende et al\\.", "year": 2014}, {"title": "Discrete Variational Autoencoders", "author": ["J.T. Rolfe"], "venue": "ArXiv e-prints,", "citeRegEx": "Rolfe.,? \\Q2016\\E", "shortCiteRegEx": "Rolfe.", "year": 2016}, {"title": "On the quantitative analysis of deep belief networks", "author": ["R. Salakhutdinov", "I. Murray"], "venue": "In Proceedings of the 25th international conference on Machine learning,", "citeRegEx": "Salakhutdinov and Murray.,? \\Q2008\\E", "shortCiteRegEx": "Salakhutdinov and Murray.", "year": 2008}, {"title": "Gradient estimation using stochastic computation graphs", "author": ["J. Schulman", "N. Heess", "T. Weber", "P. Abbeel"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Schulman et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Schulman et al\\.", "year": 2015}, {"title": "Rethinking the inception architecture for computer vision", "author": ["C. Szegedy", "V. Vanhoucke", "S. Ioffe", "J. Shlens", "Z. Wojna"], "venue": "arXiv preprint arXiv:1512.00567,", "citeRegEx": "Szegedy et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Szegedy et al\\.", "year": 2015}, {"title": "Simple statistical gradient-following algorithms for connectionist reinforcement learning", "author": ["R.J. Williams"], "venue": "Machine learning,", "citeRegEx": "Williams.,? \\Q1992\\E", "shortCiteRegEx": "Williams.", "year": 1992}, {"title": "Show, attend and tell: Neural image caption generation with visual attention", "author": ["K. Xu", "J. Ba", "R. Kiros", "K. Cho", "A.C. Courville", "R. Salakhutdinov", "R.S. Zemel", "Y. Bengio"], "venue": "CoRR, abs/1502.03044,", "citeRegEx": "Xu et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Xu et al\\.", "year": 2015}], "referenceMentions": [{"referenceID": 9, "context": "For example, discrete variables have been used to learn probabilistic latent representations that correspond to distinct semantic classes (Kingma et al., 2014), image regions (Xu et al.", "startOffset": 138, "endOffset": 159}, {"referenceID": 25, "context": ", 2014), image regions (Xu et al., 2015), and memory locations (Graves et al.", "startOffset": 23, "endOffset": 40}, {"referenceID": 1, "context": "Discrete representations are often more interpretable (Chen et al., 2016) and more computationally efficient (Rae et al.", "startOffset": 54, "endOffset": 73}, {"referenceID": 16, "context": ", 2016) and more computationally efficient (Rae et al., 2016) than their continuous analogues.", "startOffset": 43, "endOffset": 61}, {"referenceID": 14, "context": "Prior work on stochastic gradient estimation has traditionally focused on either score function estimators augmented with Monte Carlo variance reduction techniques (Paisley et al., 2012; Mnih & Gregor, 2014; Gu et al., 2016; Gregor et al., 2013), or biased path derivative estimators for Bernoulli variables (Bengio et al.", "startOffset": 164, "endOffset": 245}, {"referenceID": 6, "context": "Prior work on stochastic gradient estimation has traditionally focused on either score function estimators augmented with Monte Carlo variance reduction techniques (Paisley et al., 2012; Mnih & Gregor, 2014; Gu et al., 2016; Gregor et al., 2013), or biased path derivative estimators for Bernoulli variables (Bengio et al.", "startOffset": 164, "endOffset": 245}, {"referenceID": 5, "context": "Prior work on stochastic gradient estimation has traditionally focused on either score function estimators augmented with Monte Carlo variance reduction techniques (Paisley et al., 2012; Mnih & Gregor, 2014; Gu et al., 2016; Gregor et al., 2013), or biased path derivative estimators for Bernoulli variables (Bengio et al.", "startOffset": 164, "endOffset": 245}, {"referenceID": 0, "context": ", 2013), or biased path derivative estimators for Bernoulli variables (Bengio et al., 2013).", "startOffset": 70, "endOffset": 91}, {"referenceID": 7, "context": "The Gumbel-Max trick (Gumbel, 1954; Maddison et al., 2014) provides a simple and efficient way to draw samples z from a categorical distribution with class probabilities \u03c0:", "startOffset": 21, "endOffset": 58}, {"referenceID": 23, "context": "If \u03c4 is a learned parameter (rather than annealed via a fixed schedule), this scheme can be interpreted as entropy regularization (Szegedy et al., 2015; Pereyra et al., 2016), where the Gumbel-Softmax distribution can adaptively adjust the \u201cconfidence\u201d of proposed samples during the training process.", "startOffset": 130, "endOffset": 174}, {"referenceID": 15, "context": "If \u03c4 is a learned parameter (rather than annealed via a fixed schedule), this scheme can be interpreted as entropy regularization (Szegedy et al., 2015; Pereyra et al., 2016), where the Gumbel-Softmax distribution can adaptively adjust the \u201cconfidence\u201d of proposed samples during the training process.", "startOffset": 130, "endOffset": 174}, {"referenceID": 22, "context": "Consider a stochastic computation graph (Schulman et al., 2015) with discrete random variable z whose distribution depends on parameter \u03b8, and cost function f(z).", "startOffset": 40, "endOffset": 63}, {"referenceID": 0, "context": "For Bernoulli variables with mean parameter \u03b8, the Straight-Through (ST) estimator (Bengio et al., 2013) approximates m = \u03bc\u03b8(z), implying \u2207\u03b8m = 1.", "startOffset": 83, "endOffset": 104}, {"referenceID": 24, "context": "2 SCORE FUNCTION-BASED GRADIENT ESTIMATORS The score function estimator (SF, also referred to as REINFORCE (Williams, 1992) and likelihood ratio estimator (Glynn, 1990)) uses the identity \u2207\u03b8 log p\u03b8(z) = p\u03b8(z)\u2207\u03b8 log p\u03b8(z) to derive the following unbiased estimator:", "startOffset": 107, "endOffset": 123}, {"referenceID": 3, "context": "2 SCORE FUNCTION-BASED GRADIENT ESTIMATORS The score function estimator (SF, also referred to as REINFORCE (Williams, 1992) and likelihood ratio estimator (Glynn, 1990)) uses the identity \u2207\u03b8 log p\u03b8(z) = p\u03b8(z)\u2207\u03b8 log p\u03b8(z) to derive the following unbiased estimator:", "startOffset": 155, "endOffset": 168}, {"referenceID": 5, "context": "\u2022 DARN (Gregor et al., 2013) uses b = f(z\u0304) + f \u2032(z\u0304)(z\u0304 \u2212 z), where the baseline corresponds to the first-order Taylor approximation of f(z) from f(z\u0304).", "startOffset": 7, "endOffset": 28}, {"referenceID": 6, "context": "\u2022 MuProp (Gu et al., 2016) also models the baseline as a first-order Taylor expansion: b = f(z\u0304) + f \u2032(z\u0304)(z \u2212 z\u0304) and \u03bcb = f (z\u0304)\u2207\u03b8Ez [z].", "startOffset": 9, "endOffset": 26}, {"referenceID": 17, "context": "This is a common benchmark for training stochastic binary networks (SBN) (Raiko et al., 2014; Gu et al., 2016; Mnih & Rezende, 2016).", "startOffset": 73, "endOffset": 132}, {"referenceID": 6, "context": "This is a common benchmark for training stochastic binary networks (SBN) (Raiko et al., 2014; Gu et al., 2016; Mnih & Rezende, 2016).", "startOffset": 73, "endOffset": 132}, {"referenceID": 9, "context": "We compare the original marginalization-based inference approach (Kingma et al., 2014) to single-sample inference with Gumbel-Softmax and ST Gumbel-Softmax.", "startOffset": 65, "endOffset": 86}, {"referenceID": 9, "context": "(a) Comparison of training speed (steps/sec) between Gumbel-Softmax and marginalization (Kingma et al., 2014) on a semi-supervised VAE.", "startOffset": 88, "endOffset": 109}], "year": 2017, "abstractText": "Categorical variables are a natural choice for representing discrete structure in the world. However, stochastic neural networks rarely use categorical latent variables due to the inability to backpropagate through samples. In this work, we present an efficient gradient estimator that replaces the non-differentiable sample from a categorical distribution with a differentiable sample from a novel Gumbel-Softmax distribution. This distribution has the essential property that it can be smoothly annealed into a categorical distribution. We show that our Gumbel-Softmax estimator outperforms state-of-the-art gradient estimators on structured output prediction and unsupervised generative modeling tasks with categorical latent variables, and enables large speedups on semi-supervised classification.", "creator": "LaTeX with hyperref package"}, "id": "ICLR_2017_126"}