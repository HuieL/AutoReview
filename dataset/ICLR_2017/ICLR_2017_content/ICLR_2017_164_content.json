{"name": "ICLR_2017_164.pdf", "metadata": {"source": "CRF", "title": "ADVERSARIAL FEATURE LEARNING", "authors": ["Jeff Donahue", "Philipp Kr\u00e4henb\u00fchl"], "emails": ["jdonahue@cs.berkeley.edu", "philkr@utexas.edu", "trevor@eecs.berkeley.edu"], "sections": [{"heading": "1 INTRODUCTION", "text": "Deep convolutional networks (convnets) have become a staple of the modern computer vision pipeline. After training these models on a massive database of image-label pairs like ImageNet (Russakovsky et al., 2015), the network easily adapts to a variety of similar visual tasks, achieving impressive results on image classification (Donahue et al., 2014; Zeiler & Fergus, 2014; Razavian et al., 2014) or localization (Girshick et al., 2014; Long et al., 2015) tasks. In other perceptual domains such as natural language processing or speech recognition, deep networks have proven highly effective as well (Bahdanau et al., 2015; Sutskever et al., 2014; Vinyals et al., 2015; Graves et al., 2013). However, all of these recent results rely on a supervisory signal from large-scale databases of hand-labeled data, ignoring much of the useful information present in the structure of the data itself.\nMeanwhile, Generative Adversarial Networks (GANs) (Goodfellow et al., 2014) have emerged as a powerful framework for learning generative models of arbitrarily complex data distributions. The GAN framework learns a generator mapping samples from an arbitrary latent distribution to data, as well as an adversarial discriminator which tries to distinguish between real and generated samples as accurately as possible. The generator\u2019s goal is to \u201cfool\u201d the discriminator by producing samples which are as close to real data as possible. When trained on databases of natural images, GANs produce impressive results (Radford et al., 2016; Denton et al., 2015).\nInterpolations in the latent space of the generator produce smooth and plausible semantic variations, and certain directions in this space correspond to particular semantic attributes along which the data distribution varies. For example, Radford et al. (2016) showed that a GAN trained on a database of human faces learns to associate particular latent directions with gender and the presence of eyeglasses.\nA natural question arises from this ostensible \u201csemantic juice\u201d flowing through the weights of generators learned using the GAN framework: can GANs be used for unsupervised learning of rich feature representations for arbitrary data distributions? An obvious issue with doing so is that the\ngenerator maps latent samples to generated data, but the framework does not include an inverse mapping from data to latent representation.\nHence, we propose a novel unsupervised feature learning framework, Bidirectional Generative Adversarial Networks (BiGAN). The overall model is depicted in Figure 1. In short, in addition to the generator G from the standard GAN framework (Goodfellow et al., 2014), BiGAN includes an encoder E which maps data x to latent representations z. The BiGAN discriminator D discriminates not only in data space (x versus G(z)), but jointly in data and latent space (tuples (x, E(x)) versus (G(z), z)), where the latent component is either an encoder output E(x) or a generator input z.\nIt may not be obvious from this description that the BiGAN encoder E should learn to invert the generator G. The two modules cannot directly \u201ccommunicate\u201d with one another: the encoder never \u201csees\u201d generator outputs (E(G(z)) is not computed), and vice versa. Yet, in Section 3, we will both argue intuitively and formally prove that the encoder and generator must learn to invert one another in order to fool the BiGAN discriminator.\nBecause the BiGAN encoder learns to predict features z given data x, and prior work on GANs has demonstrated that these features capture semantic attributes of the data, we hypothesize that a trained BiGAN encoder may serve as a useful feature representation for related semantic tasks, in the same way that fully supervised visual models trained to predict semantic \u201clabels\u201d given images serve as powerful feature representations for related visual tasks. In this context, a latent representation z may be thought of as a \u201clabel\u201d for x, but one which came for \u201cfree,\u201d without the need for supervision.\nAn alternative approach to learning the inverse mapping from data to latent representation is to directly model p(z|G(z)), predicting generator input z given generated data G(z). We\u2019ll refer to this alternative as a latent regressor, later arguing (Section 4.1) that the BiGAN encoder may be preferable in a feature learning context, as well as comparing the approaches empirically.\nBiGANs are a robust and highly generic approach to unsupervised feature learning, making no assumptions about the structure or type of data to which they are applied, as our theoretical results will demonstrate. Our empirical studies will show that despite their generality, BiGANs are competitive with contemporary approaches to self-supervised and weakly supervised feature learning designed specifically for a notoriously complex data distribution \u2013 natural images.\nDumoulin et al. (2016) independently proposed an identical model in their concurrent work, exploring the case of a stochastic encoder E and the ability of such models to learn in a semi-supervised setting."}, {"heading": "2 PRELIMINARIES", "text": "Let pX(x) be the distribution of our data for x \u2208 \u2126X (e.g. natural images). The goal of generative modeling is capture this data distribution using a probabilistic model. Unfortunately, exact modeling of this probability density function is computationally intractable (Hinton et al., 2006; Salakhutdinov & Hinton, 2009) for all but the most trivial models. Generative Adversarial Networks (GANs) (Good-\nfellow et al., 2014) instead model the data distribution as a transformation of a fixed latent distribution pZ(z) for z \u2208 \u2126Z. This transformation, called a generator, is expressed as a deterministic feed forward network G : \u2126Z \u2192 \u2126X with pG(x|z) = \u03b4 (x\u2212G(z)) and pG(x) = Ez\u223cpZ [pG(x|z)]. The goal is to train a generator such that pG(x) \u2248 pX(x). The GAN framework trains a generator, such that no discriminative model D : \u2126X 7\u2192 [0, 1] can distinguish samples of the data distribution from samples of the generative distribution. Both generator and discriminator are learned using the adversarial (minimax) objective min\nG max D V (D,G), where\nV (D,G) := Ex\u223cpX [logD(x)] + Ex\u223cpG [log (1\u2212D(x))]\ufe38 \ufe37\ufe37 \ufe38 Ez\u223cpZ [log(1\u2212D(G(z)))]\n(1)\nGoodfellow et al. (2014) showed that for an ideal discriminator the objective C(G) := maxD V (D,G) is equivalent to the Jensen-Shannon divergence between the two distributions pG and pX.\nThe adversarial objective 1 does not directly lend itself to an efficient optimization, as each step in the generator G requires a full discriminator D to be learned. Furthermore, a perfect discriminator no longer provides any gradient information to the generator, as the gradient of any global or local maximum of V (D,G) is 0. To provide a strong gradient signal nonetheless, Goodfellow et al. (2014) slightly alter the objective between generator and discriminator updates, while keeping the same fixed point characteristics. They also propose to optimize (1) using an alternating optimization switching between updates to the generator and discriminator. While this optimization is not guaranteed to converge, empirically it works well if the discriminator and generator are well balanced.\nDespite the empirical strength of GANs as generative models of arbitrary data distributions, it is not clear how they can be applied as an unsupervised feature representation. One possibility for learning such representations is to learn an inverse mapping regressing from generated data G(z) back to the latent input z. However, unless the generator perfectly models the data distribution pX, a nearly impossible objective for a complex data distribution such as that of high-resolution natural images, this idea may prove insufficient."}, {"heading": "3 BIDIRECTIONAL GENERATIVE ADVERSARIAL NETWORKS", "text": "In Bidirectional Generative Adversarial Networks (BiGANs) we not only train a generator, but additionally train an encoder E : \u2126X \u2192 \u2126Z. The encoder induces a distribution pE(z|x) = \u03b4(z \u2212 E(x)) mapping data points x into the latent feature space of the generative model. The discriminator is also modified to take input from the latent space, predicting PD(Y |x, z), where Y = 1 if x is real (sampled from the real data distribution pX), and Y = 0 if x is generated (the output of G(z), z \u223c pZ). The BiGAN training objective is defined as a minimax objective\nmin G,E max D V (D,E,G) (2)\nwhere V (D,E,G) := Ex\u223cpX [ Ez\u223cpE(\u00b7|x) [logD(x, z)]\ufe38 \ufe37\ufe37 \ufe38\nlogD(x,E(x))\n] + Ez\u223cpZ [ Ex\u223cpG(\u00b7|z) [log (1\u2212D(x, z))]\ufe38 \ufe37\ufe37 \ufe38\nlog(1\u2212D(G(z),z))\n] .\n(3)\nWe optimize this minimax objective using the same alternating gradient based optimization as Goodfellow et al. (2014). See Section 3.4 for details.\nBiGANs share many of the theoretical properties of GANs (Goodfellow et al., 2014), while additionally guaranteeing that at the global optimum, G and E are each other\u2019s inverse. BiGANs are also closely related to autoencoders with an `0 loss function. In the following sections we highlight some of the appealing theoretical properties of BiGANs.\nDefinitions Let pGZ(x, z) := pG(x|z)pZ(z) and pEX(x, z) := pE(z|x)pX(x) be the joint distributions modeled by the generator and encoder respectively. \u2126 := \u2126X \u00d7 \u2126Z is the joint latent and\ndata space. For a region R \u2286 \u2126, PEX(R) := \u222b \u2126 pEX(x, z)1[(x,z)\u2208R] d(x, z) = \u222b \u2126X pX(x) \u222b \u2126Z pE(z|x)1[(x,z)\u2208R] dzdx\nPGZ(R) := \u222b\n\u2126 pGZ(x, z)1[(x,z)\u2208R] d(x, z) = \u222b \u2126Z pZ(z) \u222b \u2126X pG(x|z)1[(x,z)\u2208R] dx dz\nare probability measures over that region. We also define PX(RX) := \u222b\n\u2126X pX(x)1[x\u2208RX] dx PZ(RZ) := \u222b \u2126Z pZ(z)1[z\u2208RZ] dz\nas measures over regions RX \u2286 \u2126X and RZ \u2286 \u2126Z. We refer to the set of features and data samples in the support of PX and PZ as \u2126\u0302X := supp(PX) and \u2126\u0302Z := supp(PZ) respectively. DKL (P ||Q ) and DJS (P ||Q ) respectively denote the Kullback-Leibler (KL) and Jensen-Shannon divergences between probability measures P and Q. By definition,\nDKL (P ||Q ) := Ex\u223cP [log fPQ(x)] DJS (P ||Q ) := 12 ( DKL ( P \u2223\u2223\u2223\u2223\u2223\u2223 P+Q2 )+ DKL (Q \u2223\u2223\u2223\u2223\u2223\u2223 P+Q2 )) ,\nwhere fPQ := dPdQ is the Radon-Nikodym (RN) derivative of measure P with respect to measure Q, with the defining property that P (R) = \u222b R fPQ dQ. The RN derivative fPQ : \u2126 7\u2192 R\u22650 is defined for any measures P and Q on space \u2126 such that P is absolutely continuous with respect to Q: i.e., for any R \u2286 \u2126, P (R) > 0 =\u21d2 Q(R) > 0."}, {"heading": "3.1 OPTIMAL DISCRIMINATOR, GENERATOR, & ENCODER", "text": "We start by characterizing the optimal discriminator for any generator and encoder, following Goodfellow et al. (2014). This optimal discriminator then allows us to reformulate objective (3), and show that it reduces to the Jensen-Shannon divergence between the joint distributions PEX and PGZ.\nProposition 1 For any E and G, the optimal discriminator D\u2217EG := arg maxD V (D,E,G) is the Radon-Nikodym derivative fEG := dPEXd(PEX+PGZ) : \u2126 7\u2192 [0, 1] of measure PEX with respect to measure PEX + PGZ.\nProof. Given in Appendix A.1.\nThis optimal discriminator now allows us to characterize the optimal generator and encoder.\nProposition 2 The encoder and generator\u2019s objective for an optimal discriminator C(E,G) := maxD V (D,E,G) = V (D \u2217 EG, E,G) can be rewritten in terms of the Jensen-Shannon divergence between measures PEX and PGZ as C(E,G) = 2 DJS (PEX ||PGZ )\u2212 log 4.\nProof. Given in Appendix A.2.\nTheorem 1 The global minimum of C(E,G) is achieved if and only if PEX = PGZ. At that point, C(E,G) = \u2212 log 4 and D\u2217EG = 12 .\nProof. From Proposition 2, we have that C(E,G) = 2 DJS (PEX ||PGZ ) \u2212 log 4. The JensenShannon divergence DJS (P ||Q ) \u2265 0 for any P and Q, and DJS (P ||Q ) = 0 if and only if P = Q. Therefore, the global minimum of C(E,G) occurs if and only if PEX = PGZ, and at this point the value is C(E,G) = \u2212 log 4. Finally, PEX = PGZ implies that the optimal discriminator is chance: D\u2217EG = dPEX d(PEX+PGZ) = dPEX2 dPEX = 1 2 .\nThe optimal discriminator, encoder, and generator of BiGAN are similar to the optimal discriminator and generator of the GAN framework (Goodfellow et al., 2014). However, an important difference is that BiGAN optimizes a Jensen-Shannon divergence between a joint distribution over both data X and latent features Z. This joint divergence allows us to further characterize properties of G and E, as shown below."}, {"heading": "3.2 OPTIMAL GENERATOR & ENCODER ARE INVERSES", "text": "We first present an intuitive argument that, in order to \u201cfool\u201d a perfect discriminator, a deterministic BiGAN encoder and generator must invert each other. (Later we will formally state and prove this\nproperty.) Consider a BiGAN discriminator input pair (x, z). Due to the sampling procedure, (x, z) must satisfy at least one of the following two properties:\n(a) x \u2208 \u2126\u0302X \u2227 E(x) = z (b) z \u2208 \u2126\u0302Z \u2227 G(z) = x If only one of these properties is satisfied, a perfect discriminator can infer the source of (x, z) with certainty: if only (a) is satisfied, (x, z) must be an encoder pair (x, E(x)) and D\u2217EG(x, z) = 1; if only (b) is satisfied, (x, z) must be a generator pair (G(z), z) and D\u2217EG(x, z) = 0.\nTherefore, in order to fool a perfect discriminator at (x, z) (so that 0 < D\u2217EG(x, z) < 1), E and G must satisfy both (a) and (b). In this case, we can substitute the equality E(x) = z required by (a) into the equality G(z) = x required by (b), and vice versa, giving the inversion properties x = G(E(x)) and z = E(G(z)).\nFormally, we show in Theorem 2 that the optimal generator and encoder invert one another almost everywhere on the support \u2126\u0302X and \u2126\u0302Z of PX and PZ.\nTheorem 2 If E and G are an optimal encoder and generator, then E = G\u22121 almost everywhere; that is, G(E(x)) = x for PX-almost every x \u2208 \u2126X, and E(G(z)) = z for PZ-almost every z \u2208 \u2126Z.\nProof. Given in Appendix A.4.\nWhile Theorem 2 characterizes the encoder and decoder at their optimum, due to the non-convex nature of the optimization, this optimum might never be reached. Experimentally, Section 4 shows that on standard datasets, the two are approximate inverses; however, they are rarely exact inverses. It is thus also interesting to show what objective BiGAN optimizes in terms of E and G. Next we show that BiGANs are closely related to autoencoders with an `0 loss function."}, {"heading": "3.3 RELATIONSHIP TO AUTOENCODERS", "text": "As argued in Section 1, a model trained to predict features z given data x should learn useful semantic representations. Here we show that the BiGAN objective forces the encoder E to do exactly this: in order to fool the discriminator at a particular z, the encoder must invert the generator at that z, such that E(G(z)) = z.\nTheorem 3 The encoder and generator objective given an optimal discriminator C(E,G) := maxD V (D,E,G) can be rewritten as an `0 autoencoder loss function\nC(E,G) = Ex\u223cpX [ 1[E(x)\u2208\u2126\u0302Z\u2227G(E(x))=x] log fEG(x, E(x)) ] +\nEz\u223cpZ [ 1[G(z)\u2208\u2126\u0302X\u2227E(G(z))=z] log (1\u2212 fEG(G(z), z)) ] with log fEG \u2208 (\u2212\u221e, 0) and log (1\u2212 fEG) \u2208 (\u2212\u221e, 0) PEX-almost and PGZ-almost everywhere.\nProof. Given in Appendix A.5.\nHere the indicator function 1[G(E(x))=x] in the first term is equivalent to an autoencoder with `0 loss, while the indicator 1[E(G(z))=z] in the second term shows that the BiGAN encoder must invert the generator, the desired property for feature learning. The objective further encourages the functions E(x) and G(z) to produce valid outputs in the support of PZ and PX respectively. Unlike regular autoencoders, the `0 loss function does not make any assumptions about the structure or distribution of the data itself; in fact, all the structural properties of BiGAN are learned as part of the discriminator."}, {"heading": "3.4 LEARNING", "text": "In practice, as in the GAN framework (Goodfellow et al., 2014), each BiGAN module D, G, and E is a parametric function (with parameters \u03b8D, \u03b8G, and \u03b8E , respectively). As a whole, BiGAN can be optimized using alternating stochastic gradient steps. In one iteration, the discriminator parameters \u03b8D are updated by taking one or more steps in the positive gradient direction \u2207\u03b8DV (D,E,G), then the encoder parameters \u03b8E and generator parameters \u03b8G are together updated by taking a step in the negative gradient direction \u2212\u2207\u03b8E ,\u03b8GV (D,E,G). In both cases, the expectation terms of\nV (D,E,G) are estimated using mini-batches of n samples {x(i) \u223c pX}ni=1 and {z(i) \u223c pZ}ni=1 drawn independently for each update step.\nGoodfellow et al. (2014) found that an objective in which the real and generated labels Y are swapped provides stronger gradient signal to G. We similarly observed in BiGAN training that an \u201cinverse\u201d objective provides stronger gradient signal to G and E. For efficiency, we also update all modules D, G, and E simultaneously at each iteration, rather than alternating between D updates and G, E updates. See Appendix B for details."}, {"heading": "3.5 GENERALIZED BIGAN", "text": "It is often useful to parametrize the output of the generator G and encoder E in a different, usually smaller, space \u2126\u2032X and \u2126 \u2032 Z rather than the original \u2126X and \u2126Z. For example, for visual feature learning, the images input to the encoder should be of similar resolution to images used in the evaluation. On the other hand, generating high resolution images remains difficult for current generative models. In this situation, the encoder may take higher resolution input while the generator output and discriminator input remain low resolution.\nWe generalize the BiGAN objective V (D,G,E) (3) with functions gX : \u2126X 7\u2192 \u2126\u2032X and gZ : \u2126Z 7\u2192 \u2126\u2032Z, and encoderE : \u2126X 7\u2192 \u2126\u2032Z, generatorG : \u2126Z 7\u2192 \u2126\u2032X, and discriminatorD : \u2126\u2032X\u00d7\u2126\u2032Z 7\u2192 [0, 1]:\nEx\u223cpX [ Ez\u2032\u223cpE(\u00b7|x) [logD(gX(x), z\n\u2032)]\ufe38 \ufe37\ufe37 \ufe38 logD(gX(x),E(x))\n] + Ez\u223cpZ [ Ex\u2032\u223cpG(\u00b7|z) [log (1\u2212D(x\n\u2032, gZ(z)))]\ufe38 \ufe37\ufe37 \ufe38 log(1\u2212D(G(z),gZ(z))) ] An identity gX(x) = x and gZ(z) = z (and \u2126\u2032X = \u2126X, \u2126 \u2032 Z = \u2126Z) yields the original objective. For visual feature learning with higher resolution encoder inputs, gX is an image resizing function that downsamples a high resolution image x \u2208 \u2126X to a lower resolution image x\u2032 \u2208 \u2126\u2032X, as output by the generator. (gZ is identity.)\nIn this case, the encoder and generator respectively induce probability measures PEX\u2032 and PGZ\u2032 over regions R \u2286 \u2126\u2032 of the joint space \u2126\u2032 := \u2126\u2032X \u00d7 \u2126\u2032Z, with PEX\u2032(R) :=\u222b\n\u2126X \u222b \u2126\u2032X \u222b \u2126\u2032Z pEX(x, z \u2032)1[(x\u2032,z\u2032)\u2208R]\u03b4(gX(x) \u2212 x\u2032) dz\u2032 dx\u2032 dx = \u222b \u2126X pX(x)1[(gX(x),E(x))\u2208R] dx, and PGZ\u2032 defined analogously. For optimal E and G, we can show PEX\u2032 = PGZ\u2032 : a generalization of Theorem 1. When E and G are deterministic and optimal, Theorem 2 \u2013 that E and G invert one another \u2013 can also be generalized: \u2203z\u2208\u2126\u0302Z{E(x) = gZ(z) \u2227 G(z) = gX(x)} for PX-almost every x \u2208 \u2126X, and \u2203x\u2208\u2126\u0302X{E(x) = gZ(z) \u2227 G(z) = gX(x)} for PZ-almost every z \u2208 \u2126Z."}, {"heading": "4 EVALUATION", "text": "We evaluate the feature learning capabilities of BiGANs by first training them unsupervised as described in Section 3.4, then transferring the encoder\u2019s learned feature representations for use in auxiliary supervised learning tasks. To demonstrate that BiGANs are able to learn meaningful feature representations both on arbitrary data vectors, where the model is agnostic to any underlying structure, as well as very high-dimensional and complex distributions, we evaluate on both permutation-invariant MNIST (LeCun et al., 1998) and on the high-resolution natural images of ImageNet (Russakovsky et al., 2015).\nIn all experiments, each module D, G, and E is a parametric deep (multi-layer) network. The BiGAN discriminator D(x, z) takes data x as its initial input, and at each linear layer thereafter, the latent representation z is transformed using a learned linear transformation to the hidden layer dimension and added to the non-linearity input."}, {"heading": "4.1 BASELINE METHODS", "text": "Besides the BiGAN framework presented above, we considered alternative approaches to learning feature representations using different GAN variants.\nDiscriminator The discriminatorD in a standard GAN takes data samples x \u223c pX as input, making its learned intermediate representations natural candidates as feature representations for related tasks."}, {"heading": "97.39 97.30 97.44 97.13 97.58 97.63", "text": "This alternative is appealing as it requires no additional machinery, and is the approach used for unsupervised feature learning in Radford et al. (2016). On the other hand, it is not clear that the task of distinguishing between real and generated data requires or benefits from intermediate representations that are useful as semantic feature representations. In fact, if G successfully generates the true data distribution pX(x), D may ignore the input data entirely and predict P (Y = 1) = P (Y = 1|x) = 12 unconditionally, not learning any meaningful intermediate representations.\nLatent regressor We consider an alternative encoder training by minimizing a reconstruction loss L(z, E(G(z))), after or jointly during a regular GAN training, called latent regressor or joint latent regressor respectively. We use a sigmoid cross entropy loss L as it naturally maps to a uniformly distributed output space. Intuitively, a drawback of this approach is that, unlike the encoder in a BiGAN, the latent regressor encoder E is trained only on generated samples G(z), and never \u201csees\u201d real data x \u223c pX. While this may not be an issue in the theoretical optimum where pG(x) = pX(x) exactly \u2013 i.e., G perfectly generates the data distribution pX \u2013 in practice, for highly complex data distributions pX, such as the distribution of natural images, the generator will almost never achieve this perfect result. The fact that the real data x are never input to this type of encoder limits its utility as a feature representation for related tasks, as shown later in this section."}, {"heading": "4.2 PERMUTATION-INVARIANT MNIST", "text": "We first present results on permutation-invariant MNIST (LeCun et al., 1998). In the permutationinvariant setting, each 28\u00d728 digit image must be treated as an unstructured 784D vector (Goodfellow et al., 2013). In our case, this condition is met by designing each module as a multi-layer perceptron (MLP), agnostic to the underlying spatial structure in the data (as opposed to a convnet, for example). See Appendix C.1 for more architectural and training details. We set the latent distribution pZ = [U(\u22121, 1)]50 \u2013 a 50D continuous uniform distribution. Table 1 compares the encoding learned by a BiGAN-trained encoder E with the baselines described in Section 4.1, as well as autoencoders (Hinton & Salakhutdinov, 2006) trained directly to minimize either `2 or `1 reconstruction error. The same architecture and optimization algorithm is used across all methods. All methods, including BiGAN, perform at roughly the same level. This result is not overly surprising given the relative simplicity of MNIST digits. For example, digits generated by G in a GAN nearly perfectly match the data distribution (qualitatively), making the latent regressor (LR) baseline method a reasonable choice, as argued in Section 4.1. Qualitative results are presented in Figure 2."}, {"heading": "4.3 IMAGENET", "text": "Next, we present results from training BiGANs on ImageNet LSVRC (Russakovsky et al., 2015), a large-scale database of natural images. GANs trained on ImageNet cannot perfectly reconstruct\nthe data, but often capture some interesting aspects. Here, each of D, G, and E is a convnet. In all experiments, the encoder E architecture follows AlexNet (Krizhevsky et al., 2012) through the fifth and last convolution layer (conv5). We also experiment with an AlexNet-based discriminator D as a baseline feature learning approach. We set the latent distribution pZ = [U(\u22121, 1)]200 \u2013 a 200D continuous uniform distribution. Additionally, we experiment with higher resolution encoder input images \u2013 112\u00d7 112 rather than the 64\u00d7 64 used elsewhere \u2013 using the generalization described in Section 3.5. See Appendix C.2 for more architectural and training details.\nQualitative results The convolutional filters learned by each of the three modules are shown in Figure 3. We see that the filters learned by the encoder E have clear Gabor-like structure, similar to those originally reported for the fully supervised AlexNet model (Krizhevsky et al., 2012). The filters also have similar \u201cgrouping\u201d structure where one half (the bottom half, in this case) is more color sensitive, and the other half is more edge sensitive. (This separation of the filters occurs due to the AlexNet architecture maintaining two separate filter paths for computational efficiency.)\nIn Figure 4 we present sample generations G(z), as well as real data samples x and their BiGAN reconstructions G(E(x)). The reconstructions, while certainly imperfect, demonstrate empirically that\nthe BiGAN encoder E and generator G learn approximate inverse mappings, as shown theoretically in Theorem 2. In Appendix C.2, we present nearest neighbors in the BiGAN learned feature space.\nImageNet classification Following Noroozi & Favaro (2016), we evaluate by freezing the first N layers of our pretrained network and randomly reinitializing and training the remainder fully supervised for ImageNet classification. Results are reported in Table 2.\nVOC classification, detection, and segmentation We evaluate the transferability of BiGAN representations to the PASCAL VOC (Everingham et al., 2014) computer vision benchmark tasks, including classification, object detection, and semantic segmentation. The classification task involves simple binary prediction of presence or absence in a given image for each of 20 object categories. The object detection and semantic segmentation tasks go a step further by requiring the objects to be localized, with semantic segmentation requiring this at the finest scale: pixelwise prediction of object identity. For detection, the pretrained model is used as the initialization for Fast R-CNN (Girshick, 2015) (FRCN) training; and for semantic segmentation, the model is used as the initialization for Fully Convolutional Network (Long et al., 2015) (FCN) training, in each case replacing the AlexNet (Krizhevsky et al., 2012) model trained fully supervised for ImageNet classification. We report results on each of these tasks in Table 3, comparing BiGANs with contemporary approaches to unsupervised (Kr\u00e4henb\u00fchl et al., 2016) and self-supervised (Doersch et al., 2015; Agrawal et al., 2015; Wang & Gupta, 2015; Pathak et al., 2016) feature learning in the visual domain, as well as the baselines discussed in Section 4.1."}, {"heading": "4.4 DISCUSSION", "text": "Despite making no assumptions about the underlying structure of the data, the BiGAN unsupervised feature learning framework offers a representation competitive with existing self-supervised and even weakly supervised feature learning approaches for visual feature learning, while still being a purely generative model with the ability to sample data x and predict latent representation z. Furthermore, BiGANs outperform the discriminator (D) and latent regressor (LR) baselines discussed in Section 4.1, confirming our intuition that these approaches may not perform well in the regime of highly complex data distributions such as that of natural images. The version in which the encoder takes a higher resolution image than output by the generator (BiGAN 112\u00d7 112 E) performs better still, and this strategy is not possible under the LR and D baselines as each of those modules take generator outputs as their input.\nAlthough existing self-supervised approaches have shown impressive performance and thus far tended to outshine purely unsupervised approaches in the complex domain of high-resolution images, purely unsupervised approaches to feature learning or pre-training have several potential benefits.\nBiGAN and other unsupervised learning approaches are agnostic to the domain of the data. The self-supervised approaches are specific to the visual domain, in some cases requiring weak supervision from video unavailable in images alone. For example, the methods are not applicable in the permutation-invariant MNIST setting explored in Section 4.2, as the data are treated as flat vectors rather than 2D images.\nFurthermore, BiGAN and other unsupervised approaches needn\u2019t suffer from domain shift between the pre-training task and the transfer task, unlike self-supervised methods in which some aspect of the data is normally removed or corrupted in order to create a non-trivial prediction task. In the context prediction task (Doersch et al., 2015), the network sees only small image patches \u2013 the global image structure is unobserved. In the context encoder or inpainting task (Pathak et al., 2016), each image is corrupted by removing large areas to be filled in by the prediction network, creating inputs with dramatically different appearance from the uncorrupted natural images seen in the transfer tasks.\nOther approaches (Agrawal et al., 2015; Wang & Gupta, 2015) rely on auxiliary information unavailable in the static image domain, such as video, egomotion, or tracking. Unlike BiGAN, such approaches cannot learn feature representations from unlabeled static images.\nWe finally note that the results presented here constitute only a preliminary exploration of the space of model architectures possible under the BiGAN framework, and we expect results to improve significantly with advancements in generative image models and discriminative convolutional networks alike."}, {"heading": "ACKNOWLEDGMENTS", "text": "The authors thank Evan Shelhamer, Jonathan Long, and other Berkeley Vision labmates for helpful discussions throughout this work. This work was supported by DARPA, AFRL, DoD MURI award N000141110688, NSF awards IIS-1427425 and IIS-1212798, and the Berkeley Artificial Intelligence Research laboratory. The GPUs used for this work were donated by NVIDIA."}, {"heading": "APPENDIX A ADDITIONAL PROOFS", "text": "A.1 PROOF OF PROPOSITION 1 (OPTIMAL DISCRIMINATOR)\nProposition 1 For any E and G, the optimal discriminator D\u2217EG := arg maxD V (D,E,G) is the Radon-Nikodym derivative fEG := dPEXd(PEX+PGZ) : \u2126 7\u2192 [0, 1] of measure PEX with respect to measure PEX + PGZ.\nProof. For measures P and Q on space \u2126, with P absolutely continuous with respect to Q, the RN derivative fPQ := dPdQ exists, and we have\nEx\u223cP [g(x)] = \u222b\n\u2126 g dP = \u222b \u2126 g dPdQ dQ = \u222b \u2126 gfPQ dQ = Ex\u223cQ [fPQ(x)g(x)] . (4)\nLet the probability measure PEG := PEX+PGZ2 denote the average of measures PEX and PGZ. Both PEX and PGZ are each absolutely continuous with respect to PEG. Hence the RN derivatives fEG :=\ndPEX d(PEX+PGZ) = 12 dPEX dPEG and fGE := dPGZd(PEX+PGZ) = 1 2 dPGZ dPEG exist and sum to 1:\nfEG + fGE = dPEX d(PEX+PGZ) + dPGZd(PEX+PGZ) = d(PEX+PGZ) d(PEX+PGZ) = 1. (5)\nWe use (4) and (5) to rewrite the objective V (3) as a single expectation under measure PEG:\nV (D,E,G) = E(x,z)\u223cPEX [logD(x, z)] + E(x,z)\u223cPGZ [log (1\u2212D(x, z))] = E(x,z)\u223cPEG [2fEG\ufe38 \ufe37\ufe37 \ufe38\ndPEX dPEG (x, z) logD(x, z)] + E(x,z)\u223cPEG [2fGE\ufe38 \ufe37\ufe37 \ufe38 dPGZ dPEG (x, z) log (1\u2212D(x, z))]\n= 2E(x,z)\u223cPEG [fEG(x, z) logD(x, z) + fGE(x, z) log (1\u2212D(x, z))] = 2E(x,z)\u223cPEG [fEG(x, z) logD(x, z) + (1\u2212 fEG(x, z)) log (1\u2212D(x, z))] .\nNote that arg maxy {a log y + (1\u2212 a) log(1\u2212 y)} = a for any a \u2208 [0, 1]. Thus, D\u2217EG = fEG.\nA.2 PROOF OF PROPOSITION 2 (ENCODER AND GENERATOR OBJECTIVE)\nProposition 2 The encoder and generator\u2019s objective for an optimal discriminator C(E,G) := maxD V (D,E,G) = V (D \u2217 EG, E,G) can be rewritten in terms of the Jensen-Shannon divergence between measures PEX and PGZ as C(E,G) = 2 DJS (PEX ||PGZ )\u2212 log 4.\nProof. Using Proposition 1 along with (5) (1\u2212D\u2217EG = 1\u2212 fEG = fGE) we rewrite the objective\nC(E,G) = maxDV (D,E,G) = V (D \u2217 EG, E,G)\n= E(x,z)\u223cPEX [logD \u2217 EG(x, z)] + E(x,z)\u223cPGZ [log (1\u2212D \u2217 EG(x, z))]\n= E(x,z)\u223cPEX [log fEG(x, z)] + E(x,z)\u223cPGZ [log fGE(x, z)] = E(x,z)\u223cPEX [log (2fEG(x, z))] + E(x,z)\u223cPGZ [log (2fGE(x, z))]\u2212 log 4 = DKL (PEX ||PEG ) + DKL (PGZ ||PEG )\u2212 log 4 = DKL ( PEX \u2223\u2223\u2223\u2223 PEX+PGZ 2 ) + DKL ( PGZ \u2223\u2223\u2223\u2223 PEX+PGZ 2 ) \u2212 log 4 = 2 DJS (PEX ||PGZ )\u2212 log 4.\nA.3 MEASURE DEFINITIONS FOR DETERMINISTIC E AND G\nWhile Theorem 1 and Propositions 1 and 2 hold for any encoder pE(z|x) and generator pG(x|z), stochastic or deterministic, Theorems 2 and 3 assume the encoderE and generatorG are deterministic functions; i.e., with conditionals pE(z|x) = \u03b4(z\u2212 E(x)) and pG(x|z) = \u03b4(x\u2212G(z)) defined as \u03b4 functions.\nFor use in the proofs of those theorems, we simplify the definitions of measures PEX and PGZ given in Section 3 for the case of deterministic functions E and G below:\nPEX(R) = \u222b\n\u2126X pX(x) \u222b \u2126Z pE(z|x)1[(x,z)\u2208R] dzdx\n= \u222b\n\u2126X pX(x) (\u222b \u2126Z \u03b4(z\u2212 E(x))1[(x,z)\u2208R] dz ) dx\n= \u222b\n\u2126X pX(x)1[(x,E(x))\u2208R] dx PGZ(R) = \u222b\n\u2126Z pZ(z) \u222b \u2126X pG(x|z)1[(x,z)\u2208R] dx dz\n= \u222b\n\u2126Z pZ(z) (\u222b \u2126X \u03b4(x\u2212G(z))1[(x,z)\u2208R] dx ) dz\n= \u222b\n\u2126Z pZ(z)1[(G(z),z)\u2208R] dz\nA.4 PROOF OF THEOREM 2 (OPTIMAL GENERATOR AND ENCODER ARE INVERSES)\nTheorem 2 If E and G are an optimal encoder and generator, then E = G\u22121 almost everywhere; that is, G(E(x)) = x for PX-almost every x \u2208 \u2126X, and E(G(z)) = z for PZ-almost every z \u2208 \u2126Z.\nProof. Let R0X := {x \u2208 \u2126X : x 6= G(E(x))} be the region of \u2126X in which the inversion property x = G(E(x)) does not hold. We will show that, for optimal E and G, R0X has measure zero under PX (i.e., PX(R0X) = 0) and therefore x = G(E(x)) holds PX-almost everywhere.\nLet R0 := {(x, z) \u2208 \u2126 : z = E(x) \u2227 x \u2208 R0X} be the region of \u2126 such that (x, E(x)) \u2208 R0 if and only if x \u2208 R0X. We\u2019ll use the definitions of PEX and PGZ for deterministicE andG (Appendix A.3), and the fact that PEX = PGZ for optimal E and G (Theorem 1).\nPX(R 0 X) = \u222b \u2126X pX(x)1[x\u2208R0X] dx\n= \u222b\n\u2126X pX(x)1[(x,E(x))\u2208R0] dx\n= PEX(R 0)\n= PGZ(R 0) = \u222b\n\u2126Z pZ(z)1[(G(z),z)\u2208R0] dz = \u222b\n\u2126Z pZ(z)1[z=E(G(z))\u2227G(z)\u2208R0X] dz = \u222b\n\u2126Z pZ(z) 1[z=E(G(z))\u2227G(z)6=G(E(G(z)))]\ufe38 \ufe37\ufe37 \ufe38\n=0 for any z, as z=E(G(z)) =\u21d2 G(z)=G(E(G(z)))\ndz\n= 0.\nHence region R0X has measure zero (PX(R 0 X) = 0), and the inversion property x = G(E(x)) holds PX-almost everywhere.\nAn analogous argument shows that R0Z := {z \u2208 \u2126Z : z 6= E(G(z))} has measure zero on PZ (i.e., PZ(R 0 Z) = 0) and therefore z = E(G(z)) holds PZ-almost everywhere.\nA.5 PROOF OF THEOREM 3 (RELATIONSHIP TO AUTOENCODERS)\nAs shown in Proposition 2 (Section 3), the BiGAN objective is equivalent to the Jensen-Shannon divergence between PEX and PGZ. We now go a step further and show that this Jensen-Shannon divergence is closely related to a standard autoencoder loss. Omitting the 12 scale factor, a KL divergence term of the Jensen-Shannon divergence is given as\nDKL ( PEX \u2223\u2223\u2223\u2223 PEX+PGZ 2 ) = log 2 + \u222b \u2126 log dPEX d(PEX + PGZ) dPEX\n= log 2 + \u222b \u2126 log f dPEX, (6)\nwhere we abbreviate as f the Radon-Nikodym derivative fEG := dPEXd(PEX+PGZ) \u2208 [0, 1] defined in Proposition 1 for most of this proof.\nWe\u2019ll make use of the definitions of PEX and PGZ for deterministic E and G found in Appendix A.3. The integral term of the KL divergence expression given in (6) over a particular region R \u2286 \u2126 will be denoted by\nF (R) := \u222b R log dPEX d (PEX + PGZ) dPEX = \u222b R log f dPEX.\nNext we will show that f > 0 holds PEX-almost everywhere, and hence F is always well defined and finite. We then show that F is equivalent to an autoencoder-like reconstruction loss function.\nProposition 3 f > 0 PEX-almost everywhere.\nProof. Let Rf=0 := {(x, z) \u2208 \u2126 : f(x, z) = 0} be the region of \u2126 in which f = 0. Using the definition of the Radon-Nikodym derivative f , the measure PEX(Rf=0) = \u222b Rf=0 f d(PEX +\nPGZ) = \u222b Rf=0 0 d(PEX + PGZ) = 0 is zero. Hence f > 0 PEX-almost everywhere.\nProposition 3 ensures that log f is defined PEX-almost everywhere, and F (R) is well-defined. Next we will show that F (R) mimics an autoencoder with `0 loss, meaning F is zero for any region in which G(E(x)) 6= x, and non-zero otherwise.\nProposition 4 The KL divergence F outside the support of PGZ is zero: F (\u2126 \\ supp(PGZ)) = 0.\nWe\u2019ll first show that in region RS := \u2126 \\ supp(PGZ), we have f = 1 PEX-almost everywhere. Let Rf<1 := {(x, z) \u2208 RS : f(x, z) < 1} be the region of RS in which f < 1. Let\u2019s assume that PEX(R f<1) > 0 has non-zero measure. Then, using the definition of the Radon-Nikodym derivative,\nPEX(R f<1) = \u222b Rf<1 f d(PEX + PGZ) = \u222b Rf<1\nf\ufe38\ufe37\ufe37\ufe38 \u2264\u03b5<1\ndPEX + \u222b Rf<1\nf dPGZ\ufe38 \ufe37\ufe37 \ufe38 0 \u2264 \u03b5PEX(Rf<1)\n< PEX(R f<1),\nwhere \u03b5 is a constant smaller than 1. But PEX(Rf<1) < PEX(Rf<1) is a contradiction; hence PEX(R\nf<1) = 0 and f = 1 PEX-almost everywhere in RS , implying log f = 0 PEX-almost everywhere in RS . Hence F (RS) = 0.\nBy definition, F (\u2126 \\ supp(PEX)) = 0 is also zero. The only region where F might be non-zero is R1 := supp(PEX) \u2229 supp(PGZ).\nProposition 5 f < 1 PEX-almost everywhere in R1.\nLet Rf=1 := { (x, z) \u2208 R1 : f(x, z) = 1 }\nbe the region in which f = 1. Let\u2019s assume the set Rf=1 6= \u2205 is not empty. By definition of the support1, PEX(Rf=1) > 0 and PGZ(Rf=1) > 0. The Radon-Nikodym derivative on Rf=1 is then given by\nPEX(R f=1) = \u222b Rf=1 f d(PEX + PGZ) = \u222b Rf=1 1 d(PEX + PGZ) = PEX(R f=1) + PGZ(R f=1),\nwhich implies PGZ(Rf=1) = 0 and contradicts the definition of support. Hence Rf=1 = \u2205 and f < 1 PEX-almost everywhere on R1, implying log f < 0 PEX-almost everywhere.\nTheorem 3 The encoder and generator objective given an optimal discriminator C(E,G) := maxD V (D,E,G) can be rewritten as an `0 autoencoder loss function\nC(E,G) = Ex\u223cpX [ 1[E(x)\u2208\u2126\u0302Z\u2227G(E(x))=x] log fEG(x, E(x)) ] +\nEz\u223cpZ [ 1[G(z)\u2208\u2126\u0302X\u2227E(G(z))=z] log (1\u2212 fEG(G(z), z)) ] with log fEG \u2208 (\u2212\u221e, 0) and log (1\u2212 fEG) \u2208 (\u2212\u221e, 0) PEX-almost and PGZ-almost everywhere.\nProof. Proposition 4 (F (\u2126 \\ supp(PGZ)) = 0) and F (\u2126 \\ supp(PEX)) = 0 imply that R1 := supp(PEX) \u2229 supp(PGZ) is the only region of \u2126 where F may be non-zero; hence F (\u2126) = F (R1).\n1We use the definition U \u2229 C 6= \u2205 =\u21d2 \u00b5(U \u2229 C) > 0 here.\nNote that\nsupp(PEX) = {(x, E(x)) : x \u2208 \u2126\u0302X} supp(PGZ) = {(G(z), z) : z \u2208 \u2126\u0302Z}\n=\u21d2 R1 := supp(PEX) \u2229 supp(PGZ) = {(x, z) : E(x) = z \u2227 x \u2208 \u2126\u0302X \u2227G(z) = x \u2227 z \u2208 \u2126\u0302Z}\nSo a point (x, E(x)) is in R1 if x \u2208 \u2126\u0302X, E(x) \u2208 \u2126\u0302Z, and G(E(x)) = x. (We can omit the x \u2208 \u2126\u0302X condition from inside an expectation over PX, as PX-almost all x /\u2208 \u2126\u0302X have 0 probability.) Therefore,\nDKL ( PEX \u2223\u2223\u2223\u2223 PEX+PGZ 2 ) \u2212 log 2 = F (\u2126) = F (R1)\n= \u222b R1 log f(x, z) dPEX\n= \u222b\n\u2126 1[(x,z)\u2208R1] log f(x, z) dPEX = E(x,z)\u223cPEX [ 1[(x,z)\u2208R1] log f(x, z) ] = Ex\u223cpX [ 1[(x,E(x))\u2208R1] log f(x, E(x))\n] = Ex\u223cpX [ 1[E(x)\u2208\u2126\u0302Z\u2227G(E(x))=x] log f(x, E(x)) ] .\nFinally, with Propositions 3 and 5, we have f \u2208 (0, 1) PEX-almost everywhere in R1, and therefore log f \u2208 (\u2212\u221e, 0), taking a finite and strictly negative value PEX-almost everywhere. An analogous argument (along with the fact that fEG + fGE = 1) lets us rewrite the other KL divergence term\nDKL ( PGZ \u2223\u2223\u2223\u2223 PEX+PGZ 2 ) \u2212 log 2 = Ez\u223cpZ [ 1[G(z)\u2208\u2126\u0302X\u2227E(G(z))=z] log fGE(G(z), z) ] = Ez\u223cpZ [ 1[G(z)\u2208\u2126\u0302X\u2227E(G(z))=z] log (1\u2212 fEG(G(z), z))\n] The Jensen-Shannon divergence is the mean of these two KL divergences, giving C(E,G):\nC(E,G) = 2 DJS (PEX ||PGZ )\u2212 log 4 = DKL ( PEX \u2223\u2223\u2223\u2223 PEX+PGZ 2 ) + DKL ( PGZ \u2223\u2223\u2223\u2223 PEX+PGZ 2 ) \u2212 log 4\n= Ex\u223cpX [ 1[E(x)\u2208\u2126\u0302Z\u2227G(E(x))=x] log fEG(x, E(x)) ] +\nEz\u223cpZ [ 1[G(z)\u2208\u2126\u0302X\u2227E(G(z))=z] log (1\u2212 fEG(G(z), z)) ]"}, {"heading": "APPENDIX B LEARNING DETAILS", "text": "In this section we provide additional details on the BiGAN learning protocol summarized in Section 3.4. Goodfellow et al. (2014) found for GAN training that an objective in which the real and generated labels Y are swapped provides stronger gradient signal to G. We similarly observed in BiGAN training that an \u201cinverse\u201d objective \u039b (with the same fixed point characteristics as V ) provides stronger gradient signal to G and E, where\n\u039b(D,G,E) = Ex\u223cpX [ Ez\u223cpE(\u00b7|x) [log (1\u2212D(x, z))]\ufe38 \ufe37\ufe37 \ufe38\nlog(1\u2212D(x,E(x)))\n] + Ez\u223cpZ [ Ex\u223cpG(\u00b7|z) [logD(x, z)]\ufe38 \ufe37\ufe37 \ufe38\nlogD(G(z),z)\n] .\nIn practice, \u03b8G and \u03b8E are updated by moving in the positive gradient direction of this inverse objective \u2207\u03b8E ,\u03b8G\u039b, rather than the negative gradient direction of the original objective. We also observed that learning behaved similarly when all parameters \u03b8D, \u03b8G, \u03b8E were updated simultaneously at each iteration rather than alternating between \u03b8D updates and \u03b8G, \u03b8E updates, so we took the simultaneous updating (non-alternating) approach for computational efficiency. (For standard GAN training, simultaneous updates of \u03b8D, \u03b8G performed similarly well, so our standard GAN experiments also follow this protocol.)"}, {"heading": "APPENDIX C MODEL AND TRAINING DETAILS", "text": "In the following sections we present additional details on the models and training protocols used in the permutation-invariant MNIST and ImageNet evaluations presented in Section 4.\nOptimization For unsupervised training of BiGANs and baseline methods, we use the Adam optimizer (Kingma & Ba, 2015) to compute parameter updates, following the hyperparameters (initial step size \u03b1 = 2 \u00d7 10\u22124, momentum \u03b21 = 0.5 and \u03b22 = 0.999) used by Radford et al. (2016). The step size \u03b1 is decayed exponentially to \u03b1 = 2 \u00d7 10\u22126 starting halfway through training. The mini-batch size is 128. `2 weight decay of 2.5 \u00d7 10\u22125 is applied to all multiplicative weights in linear layers (but not to the learned bias \u03b2 or scale \u03b3 parameters applied after batch normalization). Weights are initialized from a zero-mean normal distribution with a standard deviation of 0.02, with one notable exception: BiGAN discriminator weights that directly multiply z inputs to be added to spatial convolution outputs have initializations scaled by the convolution kernel size \u2013 e.g., for a 5\u00d7 5 kernel, weights are initialized with a standard deviation of 0.5, 25 times the standard initialization.\nSoftware & hardware We implement BiGANs and baseline feature learning methods using the Theano (Theano Development Team, 2016) framework, based on the convolutional GAN implementation provided by Radford et al. (2016). ImageNet transfer learning experiments (Section 4.3) use the Caffe (Jia et al., 2014) framework, per the Fast R-CNN (Girshick, 2015) and FCN (Long et al., 2015) reference implementations. Most computation is performed on an NVIDIA Titan X or Tesla K40 GPU.\nC.1 PERMUTATION-INVARIANT MNIST\nIn all permutation-invariant MNIST experiments (Section 4.2), D, G, and E each consist of two hidden layers with 1024 units. The first hidden layer is followed by a non-linearity; the second is followed by (parameter-free) batch normalization (Ioffe & Szegedy, 2015) and a non-linearity. The second hidden layer in each case is the input to a linear prediction layer of the appropriate size. In D and E, a leaky ReLU (Maas et al., 2013) non-linearity with a \u201cleak\u201d of 0.2 is used; in G, a standard ReLU non-linearity is used. All models are trained for 400 epochs.\nC.2 IMAGENET\nIn all ImageNet experiments (Section 4.3), the encoder E architecture follows AlexNet (Krizhevsky et al., 2012) through the fifth and last convolution layer (conv5), with local response normalization (LRN) layers removed and batch normalization (Ioffe & Szegedy, 2015) (including the learned scaling and bias) with leaky ReLU non-linearity applied to the output of each convolution at unsupervised training time. (For supervised evaluation, batch normalization is not used, and the pre-trained scale and bias is merged into the preceding convolution\u2019s weights and bias.)\nIn most experiments, both the discriminatorD and generatorG architecture are those used by Radford et al. (2016), consisting of a series of four 5\u00d7 5 convolutions (or \u201cdeconvolutions\u201d \u2013 fractionallystrided convolutions \u2013 for the generator G) applied with 2 pixel stride, each followed by batch normalization and rectified non-linearity.\nThe sole exception is our discriminator baseline feature learning experiment, in which we let the discriminatorD be the AlexNet variant described above. Generally, using AlexNet (or similar convnet architecture) as the discriminator D is detrimental to the visual fidelity of the resulting generated images, likely due to the relatively large convolutional filter kernel size applied to the input image, as well as the max-pooling layers, which explicitly discard information in the input. However, for fair comparison of the discriminator\u2019s feature learning abilities with those of BiGANs, we use the same architecture as used in the BiGAN encoder.\nPreprocessing To produce a data sample x, we first sample an image from the database, and resize it proportionally such that its shorter edge has a length of 72 pixels. Then, a 64\u00d7 64 crop is randomly selected from the resized image. The crop is flipped horizontally with probability 12 . Finally, the crop is scaled to [\u22121, 1], giving the sample x.\nTiming A single epoch (one training pass over the 1.2 million images) of BiGAN training takes roughly 40 minutes on a Titan X GPU. Models are trained for 100 epochs, for a total training time of under 3 days.\nNearest neighbors In Figure 5 we present nearest neighbors in the feature space of the BiGAN encoder E learned in unsupervised ImageNet training."}], "references": [{"title": "Learning to see by moving", "author": ["Pulkit Agrawal", "Joao Carreira", "Jitendra Malik"], "venue": "In ICCV,", "citeRegEx": "Agrawal et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Agrawal et al\\.", "year": 2015}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "In ICLR,", "citeRegEx": "Bahdanau et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Bahdanau et al\\.", "year": 2015}, {"title": "Deep generative image models using a Laplacian pyramid of adversarial networks", "author": ["Emily L. Denton", "Soumith Chintala", "Arthur Szlam", "Rob Fergus"], "venue": "In NIPS,", "citeRegEx": "Denton et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Denton et al\\.", "year": 2015}, {"title": "Unsupervised visual representation learning by context prediction", "author": ["Carl Doersch", "Abhinav Gupta", "Alexei A. Efros"], "venue": "In ICCV,", "citeRegEx": "Doersch et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Doersch et al\\.", "year": 2015}, {"title": "DeCAF: A deep convolutional activation feature for generic visual recognition", "author": ["Jeff Donahue", "Yangqing Jia", "Oriol Vinyals", "Judy Hoffman", "Ning Zhang", "Eric Tzeng", "Trevor Darrell"], "venue": "In ICML,", "citeRegEx": "Donahue et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Donahue et al\\.", "year": 2014}, {"title": "The PASCAL Visual Object Classes challenge: A retrospective", "author": ["Mark Everingham", "S.M. Ali Eslami", "Luc Van Gool", "Christopher K.I. Williams", "John Winn", "Andrew Zisserman"], "venue": null, "citeRegEx": "Everingham et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Everingham et al\\.", "year": 2014}, {"title": "Fast R-CNN", "author": ["Ross Girshick"], "venue": "In ICCV,", "citeRegEx": "Girshick.,? \\Q2015\\E", "shortCiteRegEx": "Girshick.", "year": 2015}, {"title": "Rich feature hierarchies for accurate object detection and semantic segmentation", "author": ["Ross Girshick", "Jeff Donahue", "Trevor Darrell", "Jitendra Malik"], "venue": "In CVPR,", "citeRegEx": "Girshick et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Girshick et al\\.", "year": 2014}, {"title": "Generative adversarial nets", "author": ["Ian Goodfellow", "Jean Pouget-Abadie", "Mehdi Mirza", "Bing Xu", "David Warde-Farley", "Sherjil Ozair", "Aaron Courville", "Yoshua Bengio"], "venue": "In NIPS,", "citeRegEx": "Goodfellow et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Goodfellow et al\\.", "year": 2014}, {"title": "Speech recognition with deep recurrent neural networks", "author": ["Alex Graves", "Abdel-rahman Mohamed", "Geoffrey E. Hinton"], "venue": "In ICASSP,", "citeRegEx": "Graves et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2013}, {"title": "Reducing the dimensionality of data with neural networks", "author": ["Geoffrey E. Hinton", "Ruslan R. Salakhutdinov"], "venue": null, "citeRegEx": "Hinton and Salakhutdinov.,? \\Q2006\\E", "shortCiteRegEx": "Hinton and Salakhutdinov.", "year": 2006}, {"title": "A fast learning algorithm for deep belief nets", "author": ["Geoffrey E. Hinton", "Simon Osindero", "Yee-Whye Teh"], "venue": "Neural Computation,", "citeRegEx": "Hinton et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Hinton et al\\.", "year": 2006}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "author": ["Sergey Ioffe", "Christian Szegedy"], "venue": "In ICML,", "citeRegEx": "Ioffe and Szegedy.,? \\Q2015\\E", "shortCiteRegEx": "Ioffe and Szegedy.", "year": 2015}, {"title": "Caffe: Convolutional architecture for fast feature embedding", "author": ["Yangqing Jia", "Evan Shelhamer", "Jeff Donahue", "Sergey Karayev", "Jonathan Long", "Ross Girshick", "Sergio Guadarrama", "Trevor Darrell"], "venue": null, "citeRegEx": "Jia et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Jia et al\\.", "year": 2014}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba"], "venue": "In ICLR,", "citeRegEx": "Kingma and Ba.,? \\Q2015\\E", "shortCiteRegEx": "Kingma and Ba.", "year": 2015}, {"title": "Data-dependent initializations of convolutional neural networks", "author": ["Philipp Kr\u00e4henb\u00fchl", "Carl Doersch", "Jeff Donahue", "Trevor Darrell"], "venue": "In ICLR,", "citeRegEx": "Kr\u00e4henb\u00fchl et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Kr\u00e4henb\u00fchl et al\\.", "year": 2016}, {"title": "ImageNet classification with deep convolutional neural networks", "author": ["Alex Krizhevsky", "Ilya Sutskever", "Geoffrey E. Hinton"], "venue": "In NIPS,", "citeRegEx": "Krizhevsky et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "Gradient-based learning applied to document recognition", "author": ["Yann LeCun", "L\u00e9on Bottou", "Yoshua Bengio", "Patrick Haffner"], "venue": "Proc. IEEE,", "citeRegEx": "LeCun et al\\.,? \\Q1998\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 1998}, {"title": "Fully convolutional networks for semantic segmentation", "author": ["Jonathan Long", "Evan Shelhamer", "Trevor Darrell"], "venue": "In CVPR,", "citeRegEx": "Long et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Long et al\\.", "year": 2015}, {"title": "Rectifier nonlinearities improve neural network acoustic models", "author": ["Andrew L. Maas", "Awni Y. Hannun", "Andrew Y. Ng"], "venue": "In ICML,", "citeRegEx": "Maas et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Maas et al\\.", "year": 2013}, {"title": "Unsupervised learning of visual representations by solving jigsaw puzzles", "author": ["Mehdi Noroozi", "Paolo Favaro"], "venue": "In ECCV,", "citeRegEx": "Noroozi and Favaro.,? \\Q2016\\E", "shortCiteRegEx": "Noroozi and Favaro.", "year": 2016}, {"title": "Context encoders: Feature learning by inpainting", "author": ["Deepak Pathak", "Philipp Kr\u00e4henb\u00fchl", "Jeff Donahue", "Trevor Darrell", "Alexei A. Efros"], "venue": null, "citeRegEx": "Pathak et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Pathak et al\\.", "year": 2016}, {"title": "Unsupervised representation learning with deep convolutional generative adversarial networks", "author": ["Alec Radford", "Luke Metz", "Soumith Chintala"], "venue": "In ICLR,", "citeRegEx": "Radford et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Radford et al\\.", "year": 2016}, {"title": "CNN features off-the-shelf: an astounding baseline for recognition", "author": ["Ali Razavian", "Hossein Azizpour", "Josephine Sullivan", "Stefan Carlsson"], "venue": "In CVPR Workshops,", "citeRegEx": "Razavian et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Razavian et al\\.", "year": 2014}, {"title": "ImageNet large scale visual recognition challenge", "author": ["Olga Russakovsky", "Jia Deng", "Hao Su", "Jonathan Krause", "Sanjeev Satheesh", "Sean Ma", "Zhiheng Huang", "Andrej Karpathy", "Aditya Khosla", "Michael Bernstein", "Alexander C. Berg", "Fei-Fei Li"], "venue": null, "citeRegEx": "Russakovsky et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Russakovsky et al\\.", "year": 2015}, {"title": "Deep Boltzmann machines", "author": ["Ruslan Salakhutdinov", "Geoffrey E. Hinton"], "venue": "In AISTATS,", "citeRegEx": "Salakhutdinov and Hinton.,? \\Q2009\\E", "shortCiteRegEx": "Salakhutdinov and Hinton.", "year": 2009}, {"title": "Sequence to sequence learning with neural networks", "author": ["Ilya Sutskever", "Oriol Vinyals", "Quoc V. Le"], "venue": "In NIPS,", "citeRegEx": "Sutskever et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Sutskever et al\\.", "year": 2014}, {"title": "Grammar as a foreign language", "author": ["Oriol Vinyals", "\u0141ukasz Kaiser", "Terry Koo", "Slav Petrov", "Ilya Sutskever", "Geoffrey E. Hinton"], "venue": "In NIPS,", "citeRegEx": "Vinyals et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Vinyals et al\\.", "year": 2015}, {"title": "Unsupervised learning of visual representations using videos", "author": ["Xiaolong Wang", "Abhinav Gupta"], "venue": "In ICCV,", "citeRegEx": "Wang and Gupta.,? \\Q2015\\E", "shortCiteRegEx": "Wang and Gupta.", "year": 2015}, {"title": "Visualizing and understanding convolutional networks", "author": ["Matthew D. Zeiler", "Rob Fergus"], "venue": "In ECCV,", "citeRegEx": "Zeiler and Fergus.,? \\Q2014\\E", "shortCiteRegEx": "Zeiler and Fergus.", "year": 2014}, {"title": "non-linearity with a \u201cleak\u201d of 0.2 is used; in G, a standard ReLU non-linearity is used. All models are trained for 400 epochs. C.2 IMAGENET In all ImageNet experiments (Section 4.3), the encoder E architecture follows AlexNet (Krizhevsky et al., 2012) through the fifth and last convolution layer (conv5), with local response normalization", "author": [], "venue": "ReLU (Maas et al.,", "citeRegEx": "E,? \\Q2013\\E", "shortCiteRegEx": "E", "year": 2013}, {"title": "2016) (left), nearest neighbors (by minimum cosine distance) from the ImageNet LSVRC (Russakovsky et al., 2015) training set in the fc6 feature space of the ImageNet-trained BiGAN encoder E. (The fc6 weights are set randomly; this space is a random projection of the learned conv5 feature space", "author": ["Kr\u00e4henb\u00fchl"], "venue": null, "citeRegEx": "Kr\u00e4henb\u00fchl,? \\Q2015\\E", "shortCiteRegEx": "Kr\u00e4henb\u00fchl", "year": 2015}], "referenceMentions": [{"referenceID": 24, "context": "After training these models on a massive database of image-label pairs like ImageNet (Russakovsky et al., 2015), the network easily adapts to a variety of similar visual tasks, achieving impressive results on image classification (Donahue et al.", "startOffset": 85, "endOffset": 111}, {"referenceID": 4, "context": ", 2015), the network easily adapts to a variety of similar visual tasks, achieving impressive results on image classification (Donahue et al., 2014; Zeiler & Fergus, 2014; Razavian et al., 2014) or localization (Girshick et al.", "startOffset": 126, "endOffset": 194}, {"referenceID": 23, "context": ", 2015), the network easily adapts to a variety of similar visual tasks, achieving impressive results on image classification (Donahue et al., 2014; Zeiler & Fergus, 2014; Razavian et al., 2014) or localization (Girshick et al.", "startOffset": 126, "endOffset": 194}, {"referenceID": 1, "context": "In other perceptual domains such as natural language processing or speech recognition, deep networks have proven highly effective as well (Bahdanau et al., 2015; Sutskever et al., 2014; Vinyals et al., 2015; Graves et al., 2013).", "startOffset": 138, "endOffset": 228}, {"referenceID": 26, "context": "In other perceptual domains such as natural language processing or speech recognition, deep networks have proven highly effective as well (Bahdanau et al., 2015; Sutskever et al., 2014; Vinyals et al., 2015; Graves et al., 2013).", "startOffset": 138, "endOffset": 228}, {"referenceID": 27, "context": "In other perceptual domains such as natural language processing or speech recognition, deep networks have proven highly effective as well (Bahdanau et al., 2015; Sutskever et al., 2014; Vinyals et al., 2015; Graves et al., 2013).", "startOffset": 138, "endOffset": 228}, {"referenceID": 9, "context": "In other perceptual domains such as natural language processing or speech recognition, deep networks have proven highly effective as well (Bahdanau et al., 2015; Sutskever et al., 2014; Vinyals et al., 2015; Graves et al., 2013).", "startOffset": 138, "endOffset": 228}, {"referenceID": 8, "context": "Meanwhile, Generative Adversarial Networks (GANs) (Goodfellow et al., 2014) have emerged as a powerful framework for learning generative models of arbitrarily complex data distributions.", "startOffset": 50, "endOffset": 75}, {"referenceID": 22, "context": "When trained on databases of natural images, GANs produce impressive results (Radford et al., 2016; Denton et al., 2015).", "startOffset": 77, "endOffset": 120}, {"referenceID": 2, "context": "When trained on databases of natural images, GANs produce impressive results (Radford et al., 2016; Denton et al., 2015).", "startOffset": 77, "endOffset": 120}, {"referenceID": 8, "context": "In short, in addition to the generator G from the standard GAN framework (Goodfellow et al., 2014), BiGAN includes an encoder E which maps data x to latent representations z.", "startOffset": 73, "endOffset": 98}, {"referenceID": 11, "context": "Unfortunately, exact modeling of this probability density function is computationally intractable (Hinton et al., 2006; Salakhutdinov & Hinton, 2009) for all but the most trivial models.", "startOffset": 98, "endOffset": 149}, {"referenceID": 8, "context": "BiGANs share many of the theoretical properties of GANs (Goodfellow et al., 2014), while additionally guaranteeing that at the global optimum, G and E are each other\u2019s inverse.", "startOffset": 56, "endOffset": 81}, {"referenceID": 8, "context": "The optimal discriminator, encoder, and generator of BiGAN are similar to the optimal discriminator and generator of the GAN framework (Goodfellow et al., 2014).", "startOffset": 135, "endOffset": 160}, {"referenceID": 8, "context": "In practice, as in the GAN framework (Goodfellow et al., 2014), each BiGAN module D, G, and E is a parametric function (with parameters \u03b8D, \u03b8G, and \u03b8E , respectively).", "startOffset": 37, "endOffset": 62}, {"referenceID": 17, "context": "To demonstrate that BiGANs are able to learn meaningful feature representations both on arbitrary data vectors, where the model is agnostic to any underlying structure, as well as very high-dimensional and complex distributions, we evaluate on both permutation-invariant MNIST (LeCun et al., 1998) and on the high-resolution natural images of ImageNet (Russakovsky et al.", "startOffset": 277, "endOffset": 297}, {"referenceID": 24, "context": ", 1998) and on the high-resolution natural images of ImageNet (Russakovsky et al., 2015).", "startOffset": 62, "endOffset": 88}, {"referenceID": 17, "context": "Table 1: One Nearest Neighbors (1NN) classification accuracy (%) on the permutation-invariant MNIST (LeCun et al., 1998) test set in the feature space learned by BiGAN, Latent Regressor (LR), Joint Latent Regressor (JLR), and an autoencoder (AE) using an `1 or `2 distance.", "startOffset": 100, "endOffset": 120}, {"referenceID": 17, "context": "We first present results on permutation-invariant MNIST (LeCun et al., 1998).", "startOffset": 56, "endOffset": 76}, {"referenceID": 24, "context": "Next, we present results from training BiGANs on ImageNet LSVRC (Russakovsky et al., 2015), a large-scale database of natural images.", "startOffset": 64, "endOffset": 90}, {"referenceID": 24, "context": "Figure 3: The convolutional filters learned by the three modules (D, G, and E) of a BiGAN (left, top-middle) trained on the ImageNet (Russakovsky et al., 2015) database.", "startOffset": 133, "endOffset": 159}, {"referenceID": 16, "context": "In all experiments, the encoder E architecture follows AlexNet (Krizhevsky et al., 2012) through the fifth and last convolution layer (conv5).", "startOffset": 63, "endOffset": 88}, {"referenceID": 16, "context": "We see that the filters learned by the encoder E have clear Gabor-like structure, similar to those originally reported for the fully supervised AlexNet model (Krizhevsky et al., 2012).", "startOffset": 158, "endOffset": 183}, {"referenceID": 24, "context": "Table 2: Classification accuracy (%) for the ImageNet LSVRC (Russakovsky et al., 2015) validation set with various portions of the network frozen, or reinitialized and trained from scratch, following the evaluation from Noroozi & Favaro (2016).", "startOffset": 60, "endOffset": 86}, {"referenceID": 5, "context": "VOC classification, detection, and segmentation We evaluate the transferability of BiGAN representations to the PASCAL VOC (Everingham et al., 2014) computer vision benchmark tasks, including classification, object detection, and semantic segmentation.", "startOffset": 123, "endOffset": 148}, {"referenceID": 6, "context": "For detection, the pretrained model is used as the initialization for Fast R-CNN (Girshick, 2015) (FRCN) training; and for semantic segmentation, the model is used as the initialization for Fully Convolutional Network (Long et al.", "startOffset": 81, "endOffset": 97}, {"referenceID": 18, "context": "For detection, the pretrained model is used as the initialization for Fast R-CNN (Girshick, 2015) (FRCN) training; and for semantic segmentation, the model is used as the initialization for Fully Convolutional Network (Long et al., 2015) (FCN) training, in each case replacing the AlexNet (Krizhevsky et al.", "startOffset": 218, "endOffset": 237}, {"referenceID": 16, "context": ", 2015) (FCN) training, in each case replacing the AlexNet (Krizhevsky et al., 2012) model trained fully supervised for ImageNet classification.", "startOffset": 59, "endOffset": 84}, {"referenceID": 15, "context": "We report results on each of these tasks in Table 3, comparing BiGANs with contemporary approaches to unsupervised (Kr\u00e4henb\u00fchl et al., 2016) and self-supervised (Doersch et al.", "startOffset": 115, "endOffset": 140}, {"referenceID": 3, "context": ", 2016) and self-supervised (Doersch et al., 2015; Agrawal et al., 2015; Wang & Gupta, 2015; Pathak et al., 2016) feature learning in the visual domain, as well as the baselines discussed in Section 4.", "startOffset": 28, "endOffset": 113}, {"referenceID": 0, "context": ", 2016) and self-supervised (Doersch et al., 2015; Agrawal et al., 2015; Wang & Gupta, 2015; Pathak et al., 2016) feature learning in the visual domain, as well as the baselines discussed in Section 4.", "startOffset": 28, "endOffset": 113}, {"referenceID": 21, "context": ", 2016) and self-supervised (Doersch et al., 2015; Agrawal et al., 2015; Wang & Gupta, 2015; Pathak et al., 2016) feature learning in the visual domain, as well as the baselines discussed in Section 4.", "startOffset": 28, "endOffset": 113}, {"referenceID": 6, "context": "Table 3: Classification and Fast R-CNN (Girshick, 2015) detection results for the PASCAL VOC 2007 (Everingham et al.", "startOffset": 39, "endOffset": 55}, {"referenceID": 5, "context": "Table 3: Classification and Fast R-CNN (Girshick, 2015) detection results for the PASCAL VOC 2007 (Everingham et al., 2014) test set, and FCN (Long et al.", "startOffset": 98, "endOffset": 123}, {"referenceID": 18, "context": ", 2014) test set, and FCN (Long et al., 2015) segmentation results on the PASCAL VOC 2012 validation set, under the standard mean average precision (mAP) or mean intersection over union (mIU) metrics for each task.", "startOffset": 26, "endOffset": 45}, {"referenceID": 16, "context": "Classification models are trained with various portions of the AlexNet (Krizhevsky et al., 2012) model frozen.", "startOffset": 71, "endOffset": 96}, {"referenceID": 3, "context": "In the context prediction task (Doersch et al., 2015), the network sees only small image patches \u2013 the global image structure is unobserved.", "startOffset": 31, "endOffset": 53}, {"referenceID": 21, "context": "In the context encoder or inpainting task (Pathak et al., 2016), each image is corrupted by removing large areas to be filled in by the prediction network, creating inputs with dramatically different appearance from the uncorrupted natural images seen in the transfer tasks.", "startOffset": 42, "endOffset": 63}, {"referenceID": 0, "context": "Other approaches (Agrawal et al., 2015; Wang & Gupta, 2015) rely on auxiliary information unavailable in the static image domain, such as video, egomotion, or tracking.", "startOffset": 17, "endOffset": 59}], "year": 2017, "abstractText": "The ability of the Generative Adversarial Networks (GANs) framework to learn generative models mapping from simple latent distributions to arbitrarily complex data distributions has been demonstrated empirically, with compelling results showing that the latent space of such generators captures semantic variation in the data distribution. Intuitively, models trained to predict these semantic latent representations given data may serve as useful feature representations for auxiliary problems where semantics are relevant. However, in their existing form, GANs have no means of learning the inverse mapping \u2013 projecting data back into the latent space. We propose Bidirectional Generative Adversarial Networks (BiGANs) as a means of learning this inverse mapping, and demonstrate that the resulting learned feature representation is useful for auxiliary supervised discrimination tasks, competitive with contemporary approaches to unsupervised and self-supervised feature learning.", "creator": "LaTeX with hyperref package"}, "id": "ICLR_2017_164"}