{"name": "ICLR_2017_172.pdf", "metadata": {"source": "CRF", "title": "DISCRETE VARIATIONAL AUTOENCODERS", "authors": ["Jason Tyler Rolfe"], "emails": ["jrolfe@dwavesys.com"], "sections": [{"heading": "1 INTRODUCTION", "text": "Unsupervised learning of probabilistic models is a powerful technique, facilitating tasks such as denoising and inpainting, and regularizing supervised tasks such as classification (Hinton et al., 2006; Salakhutdinov & Hinton, 2009; Rasmus et al., 2015). Many datasets of practical interest are projections of underlying distributions over real-world objects into an observation space; the pixels of an image, for example. When the real-world objects are of discrete types subject to continuous transformations, these datasets comprise multiple disconnected smooth manifolds. For instance, natural images change smoothly with respect to the position and pose of objects, as well as scene lighting. At the same time, it is extremely difficult to directly transform the image of a person to one of a car while remaining on the manifold of natural images.\nIt would be natural to represent the space within each disconnected component with continuous variables, and the selection amongst these components with discrete variables. In contrast, most stateof-the-art probabilistic models use exclusively discrete variables \u2014 as do DBMs (Salakhutdinov & Hinton, 2009), NADEs (Larochelle & Murray, 2011), sigmoid belief networks (Spiegelhalter & Lauritzen, 1990; Bornschein et al., 2016), and DARNs (Gregor et al., 2014) \u2014 or exclusively continuous variables \u2014 as do VAEs (Kingma & Welling, 2014; Rezende et al., 2014) and GANs (Goodfellow et al., 2014).1 Moreover, it would be desirable to apply the efficient variational autoencoder framework to models with discrete values, but this has proven difficult, since backpropagation through discrete variables is generally not possible (Bengio et al., 2013; Raiko et al., 2015).\nWe introduce a novel class of probabilistic models, comprising an undirected graphical model defined over binary latent variables, followed by multiple directed layers of continuous latent variables. This class of models captures both the discrete class of the object in an image, and its specific continuously deformable realization. Moreover, we show how these models can be trained efficiently using the variational autoencoder framework, including backpropagation through the binary latent variables. We ensure that the evidence lower bound remains tight by incorporating a hierarchical approximation to the posterior distribution of the latent variables, which can model strong correlations. Since these models efficiently marry the variational autoencoder framework with discrete latent variables, we call them discrete variational autoencoders (discrete VAEs).\n1Spike-and-slab RBMs (Courville et al., 2011) use both discrete and continuous latent variables."}, {"heading": "1.1 VARIATIONAL AUTOENCODERS ARE INCOMPATIBLE WITH DISCRETE DISTRIBUTIONS", "text": "Conventionally, unsupervised learning algorithms maximize the log-likelihood of an observed dataset under a probabilistic model. Even stochastic approximations to the gradient of the loglikelihood generally require samples from the posterior and prior of the model. However, sampling from undirected graphical models is generally intractable (Long & Servedio, 2010), as is sampling from the posterior of a directed graphical model conditioned on its leaf variables (Dagum & Luby, 1993).\nIn contrast to the exact log-likelihood, it can be computationally efficient to optimize a lower bound on the log-likelihood (Jordan et al., 1999), such as the evidence lower bound (ELBO, L(x, \u03b8, \u03c6); Hinton & Zemel, 1994):\nL(x, \u03b8, \u03c6) = log p(x|\u03b8)\u2212 KL[q(z|x, \u03c6)||p(z|x, \u03b8)], (1) where q(z|x, \u03c6) is a computationally tractable approximation to the posterior distribution p(z|x, \u03b8). We denote the observed random variables by x, the latent random variables by z, the parameters of the generative model by \u03b8, and the parameters of the approximating posterior by \u03c6. The variational autoencoder (VAE; Kingma & Welling, 2014; Rezende et al., 2014; Kingma et al., 2014) regroups the evidence lower bound of Equation 1 as:\nL(x, \u03b8, \u03c6) = \u2212KL [q(z|x, \u03c6)||p(z|\u03b8)]\ufe38 \ufe37\ufe37 \ufe38 KL term +Eq [log p(x|z, \u03b8)]\ufe38 \ufe37\ufe37 \ufe38 autoencoding term . (2)\nIn many cases of practical interest, such as Gaussian q(z|x) and p(z), the KL term of Equation 2 can be computed analytically. Moreover, a low-variance stochastic approximation to the gradient of the autoencoding term can be obtained using backpropagation and the reparameterization trick, so long as samples from the approximating posterior q(z|x) can be drawn using a differentiable, deterministic function f(x, \u03c6, \u03c1) of the combination of the inputs, the parameters, and a set of inputand parameter-independent random variables \u03c1 \u223c D. For instance, samples can be drawn from a Gaussian distribution with mean and variance determined by the input, N (m(x, \u03c6), v(x, \u03c6)), using f(x, \u03c6, \u03c1) = m(x, \u03c6) + \u221a v(x, \u03c6) \u00b7 \u03c1, where \u03c1 \u223c N (0, 1). When such an f(x, \u03c6, \u03c1) exists,\n\u2202\n\u2202\u03c6 Eq(z|x,\u03c6) [log p(x|z, \u03b8)] \u2248\n1\nN \u2211 \u03c1\u223cD \u2202 \u2202\u03c6 log p(x|f(x, \u03c1, \u03c6), \u03b8). (3)\nThe reparameterization trick can be generalized to a large set of distributions, including nonfactorial approximating posteriors. We address this issue carefully in Appendix A, where we find that an analog of Equation 3 holds. Specifically, Di is the uniform distribution between 0 and 1, and\nf(x) = F\u22121(x), (4)\nwhere F is the conditional-marginal cumulative distribution function (CDF) defined by:\nFi(x) = \u222b x x\u2032i=\u2212\u221e p (x\u2032i|x1, . . . , xi\u22121) . (5)\nHowever, this generalization is only possible if the inverse of the conditional-marginal CDF exists and is differentiable.\nA formulation comparable to Equation 3 is not possible for discrete distributions, such as restricted Boltzmann machines (RBMs) (Smolensky, 1986):\np(z) = 1 Zp e\u2212Ep(z) = 1 Zp \u00b7 e(z>Wz+b>z), (6)\nwhere z \u2208 {0, 1}n, Zp is the partition function of p(z), and the lateral connection matrix W is triangular. Any approximating posterior that only assigns nonzero probability to a discrete domain corresponds to a CDF that is piecewise-contant. That is, the range of the CDF is a proper subset of the interval [0, 1]. The domain of the inverse CDF is thus also a proper subset of [0, 1], and its derivative is not defined, as required in Equations 3 and 4.2\n2This problem remains even if we use the quantile function, F\u22121p (\u03c1) = inf { z \u2208 R : \u222b z z\u2032=\u2212\u221e p(z \u2032) \u2265 \u03c1 } ,\nthe derivative of which is either zero or infinite if p is a discrete distribution.\nIn the following sections, we present the discrete variational autoencoder (discrete VAE), a hierarchical probabilistic model consising of an RBM,3 followed by multiple directed layers of continuous latent variables. This model is efficiently trainable using the variational autoencoder formalism, as in Equation 3, including backpropagation through its discrete latent variables."}, {"heading": "1.2 RELATED WORK", "text": "Recently, there have been many efforts to develop effective unsupervised learning techniques by building upon variational autoencoders. Importance weighted autoencoders (Burda et al., 2016), Hamiltonian variational inference (Salimans et al., 2015), normalizing flows (Rezende & Mohamed, 2015), and variational Gaussian processes (Tran et al., 2016) improve the approximation to the posterior distribution. Ladder variational autoencoders (S\u00f8nderby et al., 2016) increase the power of the architecture of both approximating posterior and prior. Neural adaptive importance sampling (Du et al., 2015) and reweighted wake-sleep (Bornschein & Bengio, 2015) use sophisticated approximations to the gradient of the log-likelihood that do not admit direct backpropagation. Structured variational autoencoders use conjugate priors to construct powerful approximating posterior distributions (Johnson et al., 2016).\nIt is easy to construct a stochastic approximation to the gradient of the ELBO that admits both discrete and continuous latent variables, and only requires computationally tractable samples. Unfortunately, this naive estimate is impractically high-variance, leading to slow training and poor performance (Paisley et al., 2012). The variance of the gradient can be reduced somewhat using the baseline technique, originally called REINFORCE in the reinforcement learning literature (Mnih & Gregor, 2014; Williams, 1992; Mnih & Rezende, 2016), which we discuss in greater detail in Appendix B.\nPrior efforts by Makhzani et al. (2015) to use multimodal priors with implicit discrete variables governing the modes did not successfully align the modes of the prior with the intrinsic clusters of the dataset. Rectified Gaussian units allow spike-and-slab sparsity in a VAE, but the discrete variables are also implicit, and their prior factorial and thus unimodal (Salimans, 2016). Graves (2016) computes VAE-like gradient approximations for mixture models, but the component models are assumed to be simple factorial distributions. In contrast, discrete VAEs generalize to powerful multimodal priors on the discrete variables, and a wider set of mappings to the continuous units.\nThe generative model underlying the discrete variational autoencoder resembles a deep belief network (DBN; Hinton et al., 2006). A DBN comprises a sigmoid belief network, the top layer of which is conditioned on the visible units of an RBM. In contrast to a DBN, we use a bipartite Boltzmann machine, with both sides of the bipartite split connected to the rest of the model. Moreover, all hidden layers below the bipartite Boltzmann machine are composed of continuous latent variables with a fully autoregressive layer-wise connection architecture. Each layer j receives connections from all previous layers i < j, with connections from the bipartite Boltzmann machine mediated by a set of smoothing variables. However, these architectural differences are secondary to those in the gradient estimation technique. Whereas DBNs are traditionally trained by unrolling a succession of RBMs, discrete variational autoencoders use the reparameterization trick to backpropagate through the evidence lower bound."}, {"heading": "2 BACKPROPAGATING THROUGH DISCRETE LATENT VARIABLES BY ADDING CONTINUOUS LATENT VARIABLES", "text": "When working with an approximating posterior over discrete latent variables, we can effectively smooth the conditional-marginal CDF (defined by Equation 5 and Appendix A) by augmenting the latent representation with a set of continous random variables. The conditional-marginal CDF over the new continuous variables is invertible and its inverse is differentiable, as required in Equations 3 and 4. We redefine the generative model so that the conditional distribution of the observed variables given the latent variables only depends on the new continuous latent space. This does not alter\n3Strictly speaking, the prior contains a bipartite Boltzmann machine, all the units of which are connected to the rest of the model. In contrast to a traditional RBM, there is no distinction between the \u201cvisible\u201d units and the \u201chidden\u201d units. Nevertheless, we use the familiar term RBM in the sequel, rather than the more cumbersome \u201cfully hidden bipartite Boltzmann machine.\u201d\nthe fundamental form of the model, or the KL term of Equation 2; rather, it can be interpreted as adding a noisy nonlinearity, like dropout (Srivastava et al., 2014) or batch normalization with a small minibatch (Ioffe & Szegedy, 2015), to each latent variable in the approximating posterior and the prior. The conceptual motivation for this approach is discussed in Appendix C.\nSpecifically, as shown in Figure 1a, we augment the latent representation in the approximating posterior with continuous random variables \u03b6,4 conditioned on the discrete latent variables z of the RBM:\nq(\u03b6, z|x, \u03c6) = r(\u03b6|z) \u00b7 q(z|x, \u03c6), where r(\u03b6|z) = \u220f i r(\u03b6i|zi).\nThe support of r(\u03b6|z) for all values of z must be connected, so the marginal distribution q(\u03b6|x, \u03c6) =\u2211z r(\u03b6|z) \u00b7 q(z|x, \u03c6) has a constant, connected support so long as 0 < q(z|x, \u03c6) < 1. We further require that r(\u03b6|z) is continuous and differentiable except at the endpoints of its support, so the inverse conditional-marginal CDF of q(\u03b6|x, \u03c6) is differentiable in Equations 3 and 4, as we discuss in Appendix A.\nAs shown in Figure 1b, we correspondingly augment the prior with \u03b6: p(\u03b6, z|\u03b8) = r(\u03b6|z) \u00b7 p(z|\u03b8),\nwhere r(\u03b6|z) is the same as for the approximating posterior. Finally, we require that the conditional distribution over the observed variables only depends on \u03b6:\np(x|\u03b6, z, \u03b8) = p(x|\u03b6, \u03b8). (7) The smoothing distribution r(\u03b6|z) transforms the model into a continuous function of the distribution over z, and allows us to use Equations 2 and 3 directly to obtain low-variance stochastic approximations to the gradient.\nGiven this expansion, we can simplify Equations 3 and 4 by dropping the dependence on z and applying Equation 16 of Appendix A, which generalizes Equation 3:\n\u2202\n\u2202\u03c6 Eq(\u03b6,z|x,\u03c6) [log p(x|\u03b6, z, \u03b8)] \u2248\n1\nN \u2211 \u03c1\u223cU(0,1)n \u2202 \u2202\u03c6 log p ( x|F\u22121q(\u03b6|x,\u03c6)(\u03c1), \u03b8 ) . (8)\n4We always use a variant of z for latent variables. This is zeta, or Greek z. The discrete latent variables z can conveniently be thought of as English z.\nIf the approximating posterior is factorial, then each Fi is an independent CDF, without conditioning or marginalization.\nAs we shall demonstrate in Section 2.1, F\u22121q(\u03b6|x,\u03c6)(\u03c1) is a function of q(z = 1|x, \u03c6), where q(z = 1|x, \u03c6) is a deterministic probability value calculated by a parameterized function, such as a neural network. The autoencoder implicit in Equation 8 is shown in Figure 1c. Initially, input x is passed into a deterministic feedforward network q(z = 1|x, \u03c6), for which the final nonlinearity is the logistic function. Its output q, along with an independent random variable \u03c1 \u223c U [0, 1], is passed into the deterministic function F\u22121q(\u03b6|x,\u03c6)(\u03c1) to produce a sample of \u03b6. This \u03b6, along with the original input x, is finally passed to log p (x|\u03b6, \u03b8). The expectation of this log probability with respect to \u03c1 is the autoencoding term of the VAE formalism, as in Equation 2. Moreover, conditioned on the input and the independent \u03c1, this autoencoder is deterministic and differentiable, so backpropagation can be used to produce a low-variance, computationally-efficient approximation to the gradient."}, {"heading": "2.1 SPIKE-AND-EXPONENTIAL SMOOTHING TRANSFORMATION", "text": "As a concrete example consistent with sparse coding, consider the spike-and-exponential transformation from binary z to continuous \u03b6:\nr(\u03b6i|zi = 0) = {\u221e, if \u03b6i = 0 0, otherwise\nFr(\u03b6i|zi=0)(\u03b6 \u2032) = 1\nr(\u03b6i|zi = 1) = { \u03b2e\u03b2\u03b6\ne\u03b2\u22121 , if 0 \u2264 \u03b6i \u2264 1 0, otherwise\nFr(\u03b6i|zi=1)(\u03b6 \u2032) =\ne\u03b2\u03b6\ne\u03b2 \u2212 1\n\u2223\u2223\u2223\u2223\u03b6 \u2032\n0\n= e\u03b2\u03b6 \u2032 \u2212 1 e\u03b2 \u2212 1\nwhere Fp(\u03b6 \u2032) = \u222b \u03b6\u2032 \u2212\u221e p(\u03b6) \u00b7 d\u03b6 is the CDF of probability distribution p in the domain [0, 1]. This transformation from zi to \u03b6i is invertible: \u03b6i = 0\u21d4 zi = 0, and \u03b6i > 0\u21d4 zi = 1 almost surely.5\nWe can now find the CDF for q(\u03b6|x, \u03c6) as a function of q(z = 1|x, \u03c6) in the domain [0, 1], marginalizing out the discrete z:\nFq(\u03b6|x,\u03c6)(\u03b6 \u2032) = (1\u2212 q(z = 1|x, \u03c6)) \u00b7 Fr(\u03b6i|zi=0)(\u03b6 \u2032) + q(z = 1|x, \u03c6) \u00b7 Fr(\u03b6i|zi=1)(\u03b6 \u2032) = q(z = 1|x, \u03c6) \u00b7 ( e\u03b2\u03b6\n\u2032 \u2212 1 e\u03b2 \u2212 1 \u2212 1\n) + 1.\nTo evaluate the autoencoder of Figure 1c, and through it the gradient approximation of Equation 8, we must invert the conditional-marginal CDF Fq(\u03b6|x,\u03c6):\nF\u22121q(\u03b6|x,\u03c6)(\u03c1) =\n{ 1 \u03b2 \u00b7 log [( \u03c1+q\u22121 q ) \u00b7 ( e\u03b2 \u2212 1 ) + 1 ] , if \u03c1 \u2265 1\u2212 q\n0, otherwise (9)\nwhere we use the substitution q(z = 1|x, \u03c6) \u2192 q to simplify notation. For all values of the independent random variable \u03c1 \u223c U [0, 1], the function F\u22121q(\u03b6|x,\u03c6)(\u03c1) rectifies the input q(z = 1|x, \u03c6) if q \u2264 1 \u2212 \u03c1 in a manner analogous to a rectified linear unit (ReLU), as shown in Figure 2a. It is also quasi-sigmoidal, in that F\u22121 is increasing but concave-down if q > 1 \u2212 \u03c1. The effect of \u03c1 on F\u22121 is qualitatively similar to that of dropout (Srivastava et al., 2014), depicted in Figure 2b, or the noise injected by batch normalization (Ioffe & Szegedy, 2015) using small minibatches, shown in Figure 2c.\nOther expansions to the continuous space are possible. In Appendix D.1, we consider the case where both r(\u03b6i|zi = 0) and r(\u03b6i|zi = 1) are linear functions of \u03b6; in Appendix D.2, we develop a spikeand-slab transformation; and in Appendix E, we explore a spike-and-Gaussian transformation where the continuous \u03b6 is directly dependent on the input x in addition to the discrete z.\n5In the limit \u03b2 \u2192\u221e, \u03b6i = zi almost surely, and the continuous variables \u03b6 can effectively be removed from the model. This trick can be used after training with finite \u03b2 to produce a model without smoothing variables \u03b6."}, {"heading": "3 ACCOMMODATING EXPLAINING-AWAY WITH A HIERARCHICAL APPROXIMATING POSTERIOR", "text": "When a probabilistic model is defined in terms of a prior distribution p(z) and a conditional distribution p(x|z), the observation of x often induces strong correlations in the posterior p(z|x) due to phenomena such as explaining-away (Pearl, 1988). Moreover, we wish to use an RBM as the prior distribution (Equation 6), which itself may have strong correlations. In contrast, to maintain tractability, many variational approximations use a product of independent approximating posterior distributions (e.g., mean-field methods, but also Kingma & Welling (2014); Rezende et al. (2014)).\nTo accommodate strong correlations in the posterior distribution while maintaining tractability, we introduce a hierarchy into the approximating posterior q(z|x) over the discrete latent variables. Specifically, we divide the latent variables z of the RBM into disjoint groups, z1, . . . , zk,6 and define the approximating posterior via a directed acyclic graphical model over these groups:\nq(z1, \u03b61, . . . , zk, \u03b6k|x, \u03c6) = \u220f\n1\u2264j\u2264k r(\u03b6j |zj) \u00b7 q (zj |\u03b6i<j , x, \u03c6) where\nq(zj |\u03b6i<j , x, \u03c6) = egj(\u03b6i<j ,x,\u03c6) >\u00b7zj\u220f z\u03b9\u2208zj ( 1 + egz\u03b9 (\u03b6i<j ,x,\u03c6) ) , (10) zj \u2208 {0, 1}n, and gj(\u03b6i<j , x, \u03c6) is a parameterized function of the inputs and preceding \u03b6i, such as a neural network. The corresponding graphical model is depicted in Figure 3a, and the integration of such hierarchical approximating posteriors into the reparameterization trick is discussed in Appendix A. If each group zj contains a single variable, this dependence structure is analogous to that of a deep autoregressive network (DARN; Gregor et al., 2014), and can represent any distribution. However, the dependence of zj on the preceding discrete variables zi<j is always mediated by the continuous variables \u03b6i<j .\nThis hierarchical approximating posterior does not affect the form of the autoencoding term in Equation 8, except to increase the depth of the autoencoder, as shown in Figure 3b. The deterministic probability value q(zj = 1|\u03b6i<j , x, \u03c6) of Equation 10 is parameterized, generally by a neural network, in a manner analogous to Section 2. However, the final logistic function is made explicit in Equation 10 to simplify Equation 12. For each successive layer j of the autoencoder, input x and all previous \u03b6i<j are passed into the network computing q(z = 1|\u03b6i<j , x, \u03c6). Its output qj , along with an\n6The continuous latent variables \u03b6 are divided into complementary disjoint groups \u03b61, . . . , \u03b6k.\nindependent random variable \u03c1 \u223c U [0, 1], is passed to the deterministic function F\u22121q(\u03b6j |\u03b6i<j ,x,\u03c6)(\u03c1) to produce a sample of \u03b6j . Once all \u03b6j have been recursively computed, the full \u03b6 along with the original input x is finally passed to log p (x|\u03b6, \u03b8). The expectation of this log probability with respect to \u03c1 is again the autoencoding term of the VAE formalism, as in Equation 2.\nIn Appendix F, we show that the gradients of the remaining KL term of the ELBO (Equation 2) can be estimated stochastically using:\n\u2202\n\u2202\u03b8 KL [q||p] = Eq(z1|x,\u03c6)\n[ \u00b7 \u00b7 \u00b7 [ Eq(zk|\u03b6i<k,x,\u03c6) [ \u2202Ep(z, \u03b8)\n\u2202\u03b8\n]]] \u2212 Ep(z|\u03b8) [ \u2202Ep(z, \u03b8)\n\u2202\u03b8\n] and\n(11) \u2202\n\u2202\u03c6 KL [q||p] = E\u03c1\n[ (g(x, \u03b6)\u2212 b)> \u00b7 \u2202q\n\u2202\u03c6 \u2212 z> \u00b7W \u00b7 ( 1\u2212 z 1\u2212 q\n\u2202q\n\u2202\u03c6\n)] . (12)\nIn particular, Equation 12 is substantially lower variance than the naive approach to calculate \u2202 \u2202\u03c6KL [q||p], based upon REINFORCE."}, {"heading": "4 MODELLING CONTINUOUS DEFORMATIONS WITH A HIERARCHY OF CONTINUOUS LATENT VARIABLES", "text": "We can make both the generative model and the approximating posterior more powerful by adding additional layers of latent variables below the RBM. While these layers can be discrete, we focus on continuous variables, which have proven to be powerful in generative adversarial networks (Goodfellow et al., 2014) and traditional variational autoencoders (Kingma & Welling, 2014; Rezende et al., 2014). When positioned below and conditioned on a layer of discrete variables, continuous variables can build continuous manifolds, from which the discrete variables can choose. This complements the structure of the natural world, where a percept is determined first by a discrete selection of the types of objects present in the scene, and then by the position, pose, and other continuous attributes of these objects.\nSpecifically, we augment the latent representation with continuous random variables z,7 and define both the approximating posterior and the prior to be layer-wise fully autoregressive directed graphical models. We use the same autoregressive variable order for the approximating posterior as for the\n7We always use a variant of z for latent variables. This is Fraktur z, or German z.\nprior, as in DRAW (Gregor et al., 2015), variational recurrent neural networks (Chung et al., 2015), the deep VAE of Salimans (2016), and ladder networks (Rasmus et al., 2015; S\u00f8nderby et al., 2016). We discuss the motivation for this ordering in Appendix G.\nThe directed graphical model of the approximating posterior and prior are defined by: q(z0, . . . , zn|x, \u03c6) = \u220f\n0\u2264m\u2264n q (zm|zl<m, x, \u03c6) and\np(z0, . . . , zn|\u03b8) = \u220f\n0\u2264m\u2264n p (zm|zl<m, \u03b8) . (13)\nThe full set of latent variables associated with the RBM is now denoted by z0 = {z1, \u03b61, . . . , zk, \u03b6k}. However, the conditional distributions in Equation 13 only depend on the continuous \u03b6j . Each zm\u22651 denotes a layer of continuous latent variables, and Figure 4 shows the resulting graphical model.\nThe ELBO decomposes as: L(x, \u03b8, \u03c6) = Eq(z|x,\u03c6) [log p(x|z, \u03b8)]\u2212 \u2211 m Eq(zl<m|x,\u03c6) [KL [q(zm|zl<m, x, \u03c6)||p(zm|zl<m, \u03b8)]] .\n(14)\nIf both q(zm|zl<m, x, \u03c6) and p(zm|zl<m, \u03b8) are Gaussian, then their KL divergence has a simple closed form, which is computationally efficient if the covariance matrices are diagonal. Gradients can be passed through the q(zl<m|x, \u03c6) using the traditional reparameterization trick, described in Section 1.1."}, {"heading": "5 RESULTS", "text": "Discrete variational autoencoders comprise a smoothed RBM (Section 2) with a hierarchical approximating posterior (Section 3), followed by a hierarchy of continuous latent variables (Section 4). We parameterize all distributions with neural networks, except the smoothing distribution r(\u03b6|z) discussed in Section 2. Like NVIL (Mnih & Gregor, 2014) and VAEs (Kingma & Welling, 2014; Rezende et al., 2014), we define all approximating posteriors q to be explicit functions of x, with parameters \u03c6 shared between all inputs x. For distributions over discrete variables, the neural networks output the parameters of a factorial Bernoulli distribution using a logistic final layer, as in Equation 10; for the continuous z, the neural networks output the mean and log-standard deviation of a diagonal-covariance Gaussian distribution using a linear final layer. Each layer of the neural networks parameterizing the distributions over z, z, and x consists of a linear transformation,\nbatch normalization (Ioffe & Szegedy, 2015) (but see Appendix H.2), and a rectified-linear pointwise nonlinearity (ReLU). We stochastically approximate the expectation with respect to the RBM prior p(z|\u03b8) in Equation 11 using block Gibbs sampling on persistent Markov chains, analogous to persistent contrastive divergence (Tieleman, 2008). We minimize the ELBO using ADAM (Kingma & Ba, 2015) with a decaying step size.\nThe hierarchical structure of Section 4 is very powerful, and overfits without strong regularization of the prior, as shown in Appendix H. In contrast, powerful approximating posteriors do not induce significant overfitting. To address this problem, we use conditional distributions over the input p(x|\u03b6, \u03b8) without any deterministic hidden layers, except on Omniglot. Moreover, all other neural networks in the prior have only one hidden layer, the size of which is carefully controlled. On statically binarized MNIST, Omniglot, and Caltech-101, we share parameters between the layers of the hierarchy over z. We present the details of the architecture in Appendix H.\nWe train the resulting discrete VAEs on the permutation-invariant MNIST (LeCun et al., 1998), Omniglot8 (Lake et al., 2013), and Caltech-101 Silhouettes datasets (Marlin et al., 2010). For MNIST, we use both the static binarization of Salakhutdinov & Murray (2008) and dynamic binarization. Estimates of the log-likelihood9 of these models, computed using the method of (Burda et al., 2016) with 104 importance-weighted samples, are listed in Table 1. The reported log-likelihoods for discrete VAEs are the average of 16 runs; the standard deviation of these log-likelihoods are 0.08, 0.04, 0.05, and 0.11 for dynamically and statically binarized MNIST, Omniglot, and Caltech-101 Silhouettes, respectively. Removing the RBM reduces the test set log-likelihood by 0.09, 0.37, 0.69, and 0.66.\nWe further analyze the performance of discrete VAEs on dynamically binarized MNIST: the largest of the datasets, requiring the least regularization. Figure 5 shows the generative output of a discrete VAE as the Markov chain over the RBM evolves via block Gibbs sampling. The RBM is held constant across each sub-row of five samples, and variation amongst these samples is due to the layers of continuous latent variables. Given a multimodal distribution with well-separated modes, Gibbs sampling passes through the large, low-probability space between the modes only infrequently. As a result, consistency of the digit class over many successive rows in Figure 5 indicates that the RBM prior has well-separated modes. The RBM learns distinct, separated modes corresponding to the different digit types, except for 3/5 and 4/9, which are either nearby or overlapping; at least tens of\n8We use the partitioned, preprocessed Omniglot dataset of Burda et al. (2016), available from https://github.com/yburda/iwae/tree/master/datasets/OMNIGLOT.\n9The importance-weighted estimate of the log-likelihood is a lower bound, except for the log partition function of the RBM. We describe our unbiased estimation method for the partition function in Appendix H.1.\nthousands of iterations of single-temperature block Gibbs sampling is required to mix between the modes. We present corresponding figures for the other datasets, and results on simplified architectures, in Appendix J.\nThe large mixing time of block Gibbs sampling on the RBM suggests that training may be constrained by sample quality. Figure 6a shows that performance10 improves as we increase the number of iterations of block Gibbs sampling performed per minibatch on the RBM prior: p(z|\u03b8) in Equation 11. This suggests that a further improvement may be achieved by using a more effective sampling algorithm, such as parallel tempering (Swendsen & Wang, 1986).\n10All models in Figure 6 use only 10 layers of continuous latent variables, for computational efficiency.\nCommensurate with the small number of intrinsic classes, a moderately sized RBM yields the best performance on MNIST. As shown in Figure 6b, the log-likelihood plateaus once the number of units in the RBM reaches at least 64. Presumably, we would need a much larger RBM to model a dataset like Imagenet, which has many classes and complicated relationships between the elements of various classes.\nThe benefit of the hierarchical approximating posterior over the RBM, introduced in Section 3, is apparent from Figure 6c. The reduction in performance when moving from 4 to 8 layers in the approximating posterior may be due to the fact that each additional hierarchical layer over the approximating posterior adds three layers to the encoder neural network: there are two deterministic hidden layers for each stochastic latent layer. As a result, expanding the number of RBM approximating posterior layers significantly increases the number of parameters that must be trained, and increases the risk of overfitting."}, {"heading": "6 CONCLUSION", "text": "Datasets consisting of a discrete set of classes are naturally modeled using discrete latent variables. However, it is difficult to train probabilistic models over discrete latent variables using efficient gradient approximations based upon backpropagation, such as variational autoencoders, since it is generally not possible to backpropagate through a discrete variable (Bengio et al., 2013).\nWe avoid this problem by symmetrically projecting the approximating posterior and the prior into a continuous space. We then evaluate the autoencoding term of the evidence lower bound exclusively in the continous space, marginalizing out the original discrete latent representation. At the same time, we evaluate the KL divergence between the approximating posterior and the true prior in the original discrete space; due to the symmetry of the projection into the continuous space, it does not contribute to the KL term. To increase representational power, we make the approximating posterior over the discrete latent variables hierarchical, and add a hierarchy of continuous latent variables below them. The resulting discrete variational autoencoder achieves state-of-the-art performance on the permutation-invariant MNIST, Omniglot, and Caltech-101 Silhouettes datasets."}, {"heading": "ACKNOWLEDGEMENTS", "text": "Zhengbing Bian, Fabian Chudak, Arash Vahdat helped run experiments. Jack Raymond provided the library used to estimate the log partition function of RBMs. Mani Ranjbar wrote the cluster management system, and a custom GPU acceleration library used for an earlier version of the code. We thank Evgeny Andriyash, William Macready, and Aaron Courville for helpful discussions; and one of our anonymous reviewers for identifying the problem addressed in Appendix D.3."}, {"heading": "A MULTIVARIATE VAES BASED ON THE CUMULATIVE DISTRIBUTION FUNCTION", "text": "The reparameterization trick is always possible if the cumulative distribution function (CDF) of q(z|x, \u03c6) is invertible, and the inverse CDF is differentiable, as noted in Kingma & Welling (2014). However, for multivariate distributions, the CDF is defined by:\nF (x) = \u222b x1 x\u20321=\u2212\u221e \u00b7 \u00b7 \u00b7 \u222b xn x\u2032n=\u2212\u221e p(x\u20321, . . . , x \u2032 n).\nThe multivariate CDF mapsRn \u2192 [0, 1], and is generally not invertible.11\nIn place of the multivariate CDF, consider the set of conditional-marginal CDFs defined by:12\nFi(x) = \u222b x x\u2032i=\u2212\u221e p (x\u2032i|x1, . . . , xi\u22121) . (15)\nThat is, Fj(x) is the CDF of xj , conditioned on all xi such that i < h, and marginalized over all xk such the j < k. The range of each Fj is [0, 1], so F maps the domain of the original distribution to \u03c1 \u2208 [0, 1]n. To invert F, we need only invert each conditional-marginal CDF in turn, conditioning xj = F\u22121j (\u03c1) on x1 = F \u22121 1 (\u03c1), . . . , xj\u22121 = F \u22121 j\u22121(\u03c1). These inverses exist so long as the conditional-marginal probabilities are everywhere nonzero. It is not problematic to effectively define F\u22121j (\u03c1) based upon xi<j , rather than \u03c1i<j , since by induction we can uniquely determine xi<j given \u03c1i<j .\nUsing integration-by-substition, we can compute the gradient of the ELBO by taking the expectation of a uniform random variable \u03c1 on [0, 1]n, and using F\u22121q(z|x,\u03c6) to transform \u03c1 back to the element of z on which p(x|z, \u03b8) is conditioned. To perform integration-by-substitution, we will require the determinant of the Jacobian of F\u22121.\nThe derivative of a CDF is the probability density function at the selected point, and Fj is a simple CDF when we hold fixed the variables xi<j on which it is conditioned, so using the inverse function theorem we find:\n\u2202F\u22121j (\u03c1)\n\u2202\u03c1j =\n1\nF \u2032j(F \u22121 j (\u03c1))\n= 1 p ( xj = F \u22121 j (\u03c1)|xi<j , )\nwhere \u03c1 is a vector, and F \u2032j is \u2202Fj \u2202\u03c1j . The Jacobian matrix \u2202F\u2202x is triangular, since the earlier conditionalmarginal CDFs Fj are independent of the value of the later xk, j < k, over which they are marginalized. Moreover, the inverse conditional-marginal CDFs have the same dependence structure as F, so the Jacobian of F\u22121 is also triangular. The determinant of a triangular matrix is the product of the diagonal elements.\n11For instance, for the bivariate uniform distribution on the interval [0, 1]2, the CDF F (x, y) = x \u00b7 y for 0 \u2264 x, y \u2264 1, so for any 0 \u2264 c \u2264 1 and c \u2264 x \u2264 1, y = c\nx yields F (x, y) = c. Clearly, many different pairs\n(x, y) yield each possible value c of F (x, y). 12The set of marginal CDFs, used to define copulas, is invertible. However, it does not generally map the original distribution to a simple joint distribution, such as a multivariate unform distribu-\ntion, as required for variational autoencoders. In Equation 16, \u2223\u2223\u2223\u2223det( \u2202F\u22121q(z|x,\u03c6)(\u03c1)\u2202\u03c6 )\u2223\u2223\u2223\u2223 does not cancel out\nq ( F\u22121q(z|x,\u03c6)(\u03c1)|x, \u03c6 ) . The determinant of the inverse Jacobian is instead [\u220f i q ( zi = F \u22121 i (\u03c1) )]\u22121, which differs from [ q ( F\u22121q(z|x,\u03c6)(\u03c1) )]\u22121 if q is not factorial. As a result, we do not recover the variational autoencoder formulation of Equation 16.\nUsing these facts to perform a multivariate integration-by-substitution, we obtain: Eq(z|x,\u03c6) [log p(x|z, \u03b8)] = \u222b z q(z|x, \u03c6) \u00b7 log p(x|z, \u03b8)\n= \u222b 1 \u03c1=0 q ( F\u22121q(z|x,\u03c6)(\u03c1)|x, \u03c6 ) \u00b7 log p ( x|F\u22121q(z|x,\u03c6)(\u03c1), \u03b8 ) \u00b7 \u2223\u2223\u2223\u2223\u2223det ( \u2202F\u22121q(z|x,\u03c6)(\u03c1) \u2202\u03c1 )\u2223\u2223\u2223\u2223\u2223 =\n\u222b 1 \u03c1=0 q ( F\u22121q(z|x,\u03c6)(\u03c1)|x, \u03c6 ) \u00b7 log p ( x|F\u22121q(z|x,\u03c6)(\u03c1), \u03b8 ) \u00b7 \u220f j \u2202F\u22121qj(zj |x,\u03c6)(\u03c1j) \u2202\u03c1j  =\n\u222b 1 \u03c1=0\nq ( F\u22121q(z|x,\u03c6)(\u03c1)|x, \u03c6 ) \u220f j q ( zj = F \u22121 j (\u03c1)|zi<j\n) \u00b7 log p(x|F\u22121q(z|x,\u03c6)(\u03c1), \u03b8) =\n\u222b 1 \u03c1=0 log p ( x|F\u22121q(z|x,\u03c6)(\u03c1), \u03b8 ) (16)\nThe variable \u03c1 has dimensionality equal to that of z; 0 is the vector of all 0s; 1 is the vector of all 1s.\nThe gradient with respect to \u03c6 is then easy to approximate stochastically:\n\u2202\n\u2202\u03c6 Eq(z|x,\u03c6) [log p(x|z, \u03b8)] \u2248\n1\nN \u2211 \u03c1\u223cU(0,1)n \u2202 \u2202\u03c6 log p ( x|F\u22121q(z|x,\u03c6)(\u03c1), \u03b8 ) (17)\nNote that if q(z|x, \u03c6) is factorial (i.e., the product of independent distributions in each dimension zj), then the conditional-marginal CDFs Fj are just the marginal CDFs in each direction. However, even if q(z|x, \u03c6) is not factorial, Equation 17 still holds so long as F is nevertheless defined to be the set of conditional-marginal CDFs of Equation 15."}, {"heading": "B THE DIFFICULTY OF ESTIMATING GRADIENTS OF THE ELBO WITH", "text": "REINFORCE\nIt is easy to construct a stochastic approximation to the gradient of the ELBO that only requires computationally tractable samples, and admits both discrete and continuous latent variables. Unfortunately, this naive estimate is impractically high-variance, leading to slow training and poor performance (Paisley et al., 2012). The variance of the gradient can be reduced somewhat using the baseline technique, originally called REINFORCE in the reinforcement learning literature (Mnih & Gregor, 2014; Williams, 1992; Bengio et al., 2013; Mnih & Rezende, 2016):\n\u2202\n\u2202\u03c6 Eq(z|x,\u03c6) [log p(x|z, \u03b8)] = Eq(z|x,\u03c6)\n[ [log p(x|z, \u03b8)\u2212B(x)] \u00b7 \u2202\n\u2202\u03c6 log q(z|x, \u03c6) ] \u2248 1 N \u2211 z\u223cq(z|x,\u03c6) ( [log p(x|z, \u03b8)\u2212B(x)] \u00b7 \u2202 \u2202\u03c6 log q(z|x, \u03c6) ) (18)\nwhere B(x) is a (possibly input-dependent) baseline, which does not affect the gradient, but can reduce the variance of a stochastic estimate of the expectation.\nIn REINFORCE, \u2202\u2202\u03c6Eq(z|x,\u03c6) [log p(x|z, \u03b8)] is effectively estimated by something akin to a finite difference approximation to the derivative. The autoencoding term is a function of the conditional log-likelihood log p(x|z, \u03b8), composed with the approximating posterior q(z|x, \u03c6), which determines the value of z at which p(x|z, \u03b8) is evaluated. However, the conditional log-likelihood is never differentiated directly in REINFORCE, even in the context of the chain rule. Rather, the conditional log-likelihood is evaluated at many different points z \u223c q(z|x, \u03c6), and a weighted sum of these values is used to approximate the gradient, just like in the finite difference approximation.\nEquation 18 of REINFORCE captures much less information about p(x|z, \u03b8) per sample than Equation 3 of the variational autoencoder, which actively makes use of the gradient. In particular, the change of p(x|z, \u03b8) in some direction ~d can only affect the REINFORCE gradient estimate if a sample is taken with a component in direction ~d. In aD-dimensional latent space, at leastD samples are\nrequired to capture the variation of p(x|z, \u03b8) in all directions; fewer samples span a smaller subspace. Since the latent representation commonly consists of dozens of variables, the REINFORCE gradient estimate can be much less efficient than one that makes direct use of the gradient of p(x|z, \u03b8). Moreover, we will show in Section 5 that, when the gradient is calculated efficiently, hundreds of latent variables can be used effectively."}, {"heading": "C AUGMENTING DISCRETE LATENT VARIABLES WITH CONTINUOUS LATENT VARIABLES", "text": "Intuitively, variational autoencoders break the encoder13 distribution into \u201cpackets\u201d of probability of infinitessimal but equal mass, within which the value of the latent variables is approximately constant. These packets correspond to a region ri < \u03c1i < ri + \u03b4 for all i in Equation 16, and the expectation is taken over these packets. There are more packets in regions of high probability, so high-probability values are more likely to be selected. More rigorously, Fq(z|x,\u03c6)(\u03b6) maps intervals of high probability to larger spans of 0 \u2264 \u03c1 \u2264 1, so a randomly selected \u03c1 \u223c U [0, 1] is more likely to be mapped to a high-probability point by F\u22121q(z|x,\u03c6)(\u03c1).\nAs the parameters of the encoder are changed, the location of a packet can move, while its mass is held constant. That is, \u03b6 = F\u22121q(z|x,\u03c6)(\u03c1) is a function of \u03c6, whereas the probability mass associated with a region of \u03c1-space is constant by definition. So long as F\u22121q(z|x,\u03c6) exists and is differentiable, a small change in \u03c6 will correspond to a small change in the location of each packet. This allows us to use the gradient of the decoder to estimate the change in the loss function, since the gradient of the decoder captures the effect of small changes in the location of a selected packet in the latent space.\nIn contrast, REINFORCE (Equation 18) breaks the latent represention into segments of infinitessimal but equal volume; e.g., zi \u2264 z\u2032i < zi + \u03b4 for all i (Williams, 1992; Mnih & Gregor, 2014; Bengio et al., 2013). The latent variables are also approximately constant within these segments, but the probability mass varies between them. Specifically, the probability mass of the segment z \u2264 z\u2032 < z + \u03b4 is proportional to q(z|x, \u03c6). Once a segment is selected in the latent space, its location is independent of the encoder and decoder. In particular, the gradient of the loss function does not depend on the gradient of the decoder with respect to position in the latent space, since this position is fixed. Only the probability mass assigned to the segment is relevant.\nAlthough variational autoencoders can make use of the additional gradient information from the decoder, the gradient estimate is only low-variance so long as the motion of most probability packets has a similar effect on the loss. This is likely to be the case if the packets are tightly clustered (e.g., the encoder produces a Gaussian with low variance, or the spike-and-exponential distribution of Section 2.1), or if the movements of far-separated packets have a similar effect on the total loss (e.g., the decoder is roughly linear).\nNevertheless, Equation 17 of the VAE can be understood in analogy to dropout (Srivastava et al., 2014) or standout (Ba & Frey, 2013) regularization. Like dropout and standout, F\u22121q(z|x,\u03c6)(\u03c1) is an element-wise stochastic nonlinearity applied to a hidden layer. Since F\u22121q(z|x,\u03c6)(\u03c1) selects a point in the probability distribution, it rarely selects an improbable point. Like standout, the distribution of the hidden layer is learned. Indeed, we recover the encoder of standout if we use the spike-andGaussian distribution of Section E.1 and let the standard deviation \u03c3 go to zero.\nHowever, variational autoencoders cannot be used directly with discrete latent representations, since changing the parameters of a discrete encoder can only move probability mass between the allowed discrete values, which are far apart. If we follow a probability packet as we change the encoder parameters, it either remains in place, or jumps a large distance. As a result, the vast majority of probability packets are unaffected by small changes to the parameters of the encoder. Even if we are lucky enough to select a packet that jumps between the discrete values of the latent representation,\n13Since the approximating posterior q(z|x, \u03c6) maps each input to a distribution over the latent space, it is sometimes called the encoder. Correspondingly, since the conditional likelihood p(x|z, \u03b8) maps each configuration of the latent variables to a distribution over the input space, it is called the decoder.\nthe gradient of the decoder cannot be used to accurately estimate the change in the loss function, since the gradient only captures the effect of very small movements of the probability packet.\nTo use discrete latent representations in the variational autoencoder framework, we must first transform to a continuous latent space, within which probability packets move smoothly. That is, we must compute Equation 17 over a different distribution than the original posterior distribution. Surprisingly, we need not sacrifice the original discrete latent space, with its associated approximating posterior. Rather, we extend the encoder q(z|x, \u03c6) and the prior p(z|\u03b8) with a transformation to a continuous, auxiliary latent representation \u03b6, and correspondingly make the decoder a function of this new continuous representation. By extending both the encoder and the prior in the same way, we avoid affecting the remaining KL divergence in Equation 2.14\nThe gradient is defined everywhere if we require that each point in the original latent space map to nonzero probability over the entire auxiliary continuous space. This ensures that, if the probability of some point in the original latent space increases from zero to a nonzero value, no probability packet needs to jump a large distance to cover the resulting new region in the auxiliary continuous space. Moreover, it ensures that the conditional-marginal CDFs are strictly increasing as a function of their main argument, and thus are invertible.\nIf we ignore the cases where some discrete latent variable has probability 0 or 1, we need only require that, for every pair of points in the original latent space, the associated regions of nonzero probability in the auxiliary continuous space overlap. This ensures that probability packets can move continuously as the parameters \u03c6 of the encoder, q(z|x, \u03c6), change, redistributing weight amongst the associated regions of the auxiliary continuous space."}, {"heading": "D ALTERNATIVE TRANSFORMATIONS FROM DISCRETE TO CONTINUOUS LATENT REPRESENTATIONS", "text": "The spike-and-exponential transformation from discrete latent variables z to continuous latent variables \u03b6 presented in Section 2.1 is by no means the only one possible. Here, we develop a collection of alternative transformations.\nD.1 MIXTURE OF RAMPS\nAs another concrete example, we consider a case where both r(\u03b6i|zi = 0) and r(\u03b6i|zi = 1) are linear functions of \u03b6i:\nr(\u03b6i|zi = 0) = { 2 \u00b7 (1\u2212 \u03b6i), if 0 \u2264 \u03b6i \u2264 1 0, otherwise\nFr(\u03b6i|zi=0)(\u03b6 \u2032) = 2\u03b6i \u2212 \u03b62i \u2223\u2223\u03b6\u2032 0 = 2\u03b6 \u2032 \u2212 \u03b6 \u20322\nr(\u03b6i|zi = 1) = { 2 \u00b7 \u03b6i, if 0 \u2264 \u03b6i \u2264 1 0, otherwise\nFr(\u03b6i|zi=1)(\u03b6 \u2032) = \u03b62i \u2223\u2223\u03b6\u2032 0 = \u03b6 \u2032 2\nwhere Fp(\u03b6 \u2032) = \u222b \u03b6\u2032 \u2212\u221e p(\u03b6) \u00b7 d\u03b6 is the CDF of probability distribution p in the domain [0, 1]. The CDF for q(\u03b6|x, \u03c6) as a function of q(z = 1|x, \u03c6) is:\nFq(\u03b6|x,\u03c6)(\u03b6 \u2032) = (1\u2212 q(z = 1|x, \u03c6)) \u00b7 ( 2\u03b6 \u2032 \u2212 \u03b6 \u20322 ) + q(z = 1|x, \u03c6) \u00b7 \u03b6 \u20322\n= 2 \u00b7 q(z = 1|x, \u03c6) \u00b7 ( \u03b6 \u2032 2 \u2212 \u03b6 \u2032 ) + 2\u03b6 \u2032 \u2212 \u03b6 \u20322. (19)\n14Rather than extend the encoder and the prior, we cannot simply prepend the transformation to continuous space to the decoder, since this does not change the space of the probabilty packets.\nWe can calculate F\u22121q(\u03b6|x,\u03c6) explicitly, using the substitutions Fq(\u03b6|x,\u03c6) \u2192 \u03c1, q(z = 1|x, \u03c6)\u2192 q, and \u03b6 \u2032 \u2192 \u03b6 in Equation 19 to simplify notation:\n\u03c1 = 2 \u00b7 q \u00b7 (\u03b62 \u2212 \u03b6) + 2\u03b6 \u2212 \u03b62\n0 = (2q \u2212 1) \u00b7 \u03b62 + 2(1\u2212 q) \u00b7 \u03b6 \u2212 \u03c1\n\u03b6 = 2(q \u2212 1)\u00b1\n\u221a 4(1\u2212 2q + q2) + 4(2q \u2212 1)\u03c1\n2(2q \u2212 1)\n= (q \u2212 1)\u00b1\n\u221a q2 + 2(\u03c1\u2212 1)q + (1\u2212 \u03c1)\n2q \u2212 1 if q 6= 12 ; \u03c1 = \u03b6 otherwise. F\u22121q(\u03b6|x,\u03c6) has the desired range [0, 1] if we choose\nF\u22121(\u03c1) = (q \u2212 1) +\n\u221a q2 + 2(\u03c1\u2212 1)q + (1\u2212 \u03c1)\n2q \u2212 1\n= q \u2212 1 +\n\u221a (q \u2212 1)2 + (2q \u2212 1) \u00b7 \u03c1\n2q \u2212 1 (20)\nif q 6= 12 , and F\u22121(\u03c1) = \u03c1 if q = 12 . We plot F\u22121q(\u03b6|x,\u03c6)(\u03c1) as a function of q for various values of \u03c1 in Figure 7.\nIn Equation 20, F\u22121q(\u03b6|x,\u03c6)(\u03c1) is quasi-sigmoidal as a function of q(z = 1|x, \u03c6). If \u03c1 0.5, F\u22121 is concave-up; if \u03c1 0.5, F\u22121 is concave-down; if \u03c1 \u2248 0.5, F\u22121 is sigmoid. In no case is F\u22121 extremely flat, so it does not kill gradients. In contrast, the sigmoid probability of z inevitably flattens.\nD.2 SPIKE-AND-SLAB\nWe can also use the spike-and-slab transformation, which is consistent with sparse coding and proven in other successful generative models (Courville et al., 2011):\nr(\u03b6i|zi = 0) = {\u221e, if \u03b6i = 0 0, otherwise\nFr(\u03b6i|zi=0)(\u03b6 \u2032) = 1\nr(\u03b6i|zi = 1) = { 1, if 0 \u2264 \u03b6i \u2264 1 0, otherwise\nFr(\u03b6i|zi=1)(\u03b6 \u2032) = \u03b6i|\u03b6\n\u2032\n0 = \u03b6 \u2032\nwhere Fp(\u03b6 \u2032) = \u222b \u03b6\u2032 \u2212\u221e p(\u03b6) \u00b7 d\u03b6 is the cumulative distribution function (CDF) of probability distribution p in the domain [0, 1]. The CDF for q(\u03b6|x, \u03c6) as a function of q(z = 1|x, \u03c6) is: Fq(\u03b6|x,\u03c6)(\u03b6\n\u2032) = (1\u2212 q(z = 1|x, \u03c6)) \u00b7 Fr(\u03b6i|zi=0)(\u03b6 \u2032) + q(z = 1|x, \u03c6) \u00b7 Fr(\u03b6i|zi=1)(\u03b6 \u2032) = q(z = 1|x, \u03c6) \u00b7 (\u03b6 \u2032 \u2212 1) + 1.\nWe can calculate F\u22121q(\u03b6|x,\u03c6) explicitly, using the substitution q(z = 1|x, \u03c6)\u2192 q to simplify notation:\nF\u22121q(\u03b6|x,\u03c6)(\u03c1) =\n{ \u03c1\u22121 q + 1, if \u03c1 \u2265 1\u2212 q\n0, otherwise\nWe plot F\u22121q(\u03b6|x,\u03c6)(\u03c1) as a function of q for various values of \u03c1 in Figure 8.\nD.3 ENGINEERING EFFECTIVE SMOOTHING TRANSFORMATIONS\nIf the smoothing transformation is not chosen appropriately, the contribution of low-probability regions to the expected gradient of the inverse CDF may be large. Using a variant of the inverse function theorem, we find:\n\u2202\n\u2202\u03b8 F (F\u22121(\u03c1)) =\n\u2202F\n\u2202\u03b8 \u2223\u2223\u2223\u2223 F\u22121(\u03c1) + \u2202F \u2202z \u2223\u2223\u2223\u2223 F\u22121(\u03c1) \u00b7 \u2202 \u2202\u03b8 F\u22121(\u03c1) = 0\np(z) \u00b7 \u2202 \u2202\u03b8 F\u22121(\u03c1) = \u2212\u2202F \u2202\u03b8 \u2223\u2223\u2223\u2223 z , (21)\nwhere z = F\u22121(\u03c1). Consider the case where r(\u03b6i|zi = 0) and r(\u03b6i|zi = 1) are unimodal, but have little overlap. For instance, both distributions might be Gaussian, with means that are many standard deviations apart. For values of \u03b6i between the two modes, F (\u03b6i) \u2248 q(zi = 0|x, \u03c6), assuming without loss of generality that the mode corresponding to zi = 0 occurs at a smaller value of \u03b6i than that corresponding to zi = 1. As a result, \u2202F\u2202q \u2248 1 between the two modes, and \u2202F \u22121\n\u2202q \u2248 1r(\u03b6i) even if r(\u03b6i) \u2248 0. In this case, the stochastic estimates of the gradient in equation 8, which depend upon \u2202F\u22121\n\u2202q , have large variance.\nThese high-variance gradient estimates arise because r(\u03b6i|zi = 0) and r(\u03b6i|zi = 1) are too well separated, and the resulting smoothing transformation is too sharp. Such disjoint smoothing transformations are analogous to a sigmoid transfer function \u03c3(c \u00b7 x), where \u03c3 is the logistic function and c \u2192 \u221e. The smoothing provided by the continuous random variables \u03b6 is only effective if there is a region of meaningful overlap between r(\u03b6|z = 0) and r(\u03b6|z = 1). In particular,\u2211 zi r(\u03b6i|zi = 0)+ r(\u03b6i|zi = 1) 0 for all \u03b6i between the modes of r(\u03b6i|zi = 0) and r(\u03b6i|zi = 1), so p(z) remains moderate in equation 21. In the spike-and-exponential distribution described in Section 2.1, this overlap can be ensured by fixing or bounding \u03b2."}, {"heading": "E TRANSFORMATIONS FROM DISCRETE TO CONTINUOUS LATENT REPRESENTATIONS THAT DEPEND UPON THE INPUT", "text": "It is not necessary to define the transformation from discrete to continuous latent variables in the approximating posterior, r(\u03b6|z), to be independent of the input x. In the true posterior distribution,\np(\u03b6|z, x) \u2248 p(\u03b6|z) only if z already captures most of the information about x and p(\u03b6|z, x) changes little as a function of x, since\np(\u03b6|z) = \u222b x p(\u03b6, x|z) = \u222b x p(\u03b6|z, x) \u00b7 p(x|z).\nThis is implausible if the number of discrete latent variables is much smaller than the entropy of the input data distribution. To address this, we can define:\nq(\u03b6, z|x, \u03c6) = q(z|x, \u03c6) \u00b7 q(\u03b6|z, x, \u03c6) p(\u03b6, z|\u03b8) = p(\u03b6|z) \u00b7 p(z|\u03b8)\nThis leads to an evidence lower bound that resembles that of Equation 2, but adds an extra term:\nLV AE(x, \u03b8, \u03c6) = log p(x|\u03b8)\u2212 KL [q(z, \u03b6|x, \u03c6)||p(z, \u03b6|x, \u03b8)] = log p(x|\u03b8)\u2212 KL [q(\u03b6|z, x, \u03c6) \u00b7 q(z|x, \u03c6)||p(\u03b6|z, x, \u03b8) \u00b7 p(z|x, \u03b8)]\n= \u2211 z \u222b \u03b6 q(\u03b6|z, x, \u03c6) \u00b7 q(z|x, \u03c6) \u00b7 log [ p(x|\u03b6, \u03b8) \u00b7 p(\u03b6|z, \u03b8) \u00b7 p(z|\u03b8) q(\u03b6|z, x, \u03c6) \u00b7 q(z|x, \u03c6) ] = Eq(\u03b6|z,x,\u03c6)\u00b7q(z|x,\u03c6) [log p(x|\u03b6, \u03b8)]\u2212 KL [q(z|x, \u03c6)||p(z|\u03b8)] \u2212 \u2211 z q(z|x, \u03c6) \u00b7 KL [q(\u03b6|z, x, \u03c6)||p(\u03b6|z)] . (22)\nThe extension to hierarchical approximating posteriors proceeds as in sections 3 and 4.\nIf both q(\u03b6|z, x, \u03c6) and p(\u03b6|z) are Gaussian, then their KL divergence has a simple closed form, which is computationally efficient if the covariance matrices are diagonal. However, while the gradients of this KL divergence are easy to calculate when conditioned on z, the gradients with respect of q(z|x, \u03c6) in the new term seem to force us into a REINFORCE-like approach (c.f. Equation 18):\u2211 z \u2202q(z|x, \u03c6) \u2202\u03c6 \u00b7KL [q(\u03b6|z, x, \u03c6)||p(\u03b6|z)] = Eq(z|x,\u03c6) [ KL [q(\u03b6|z, x, \u03c6)||p(\u03b6|z)] \u00b7 \u2202 log q(z|x, \u03c6) \u2202\u03c6 ] . (23) The reward signal is now KL [q(\u03b6|z, x, \u03c6)||p(\u03b6|z)] rather than log p(x|z, \u03b8), but the effect on the variance is the same, likely negating the advantages of the variational autoencoder in the rest of the loss function.\nHowever, whereas REINFORCE is high-variance because it samples over the expectation, we can perform the expectation in Equation 23 analytically, without injecting any additional variance. Specifically, if q(z|x, \u03c6) and q(\u03b6|z, x, \u03c6) are factorial, with q(\u03b6i|zi, x, \u03c6) only dependent on zi, then KL [q(\u03b6|z, x, \u03c6)||p(\u03b6|z)] decomposes into a sum of the KL divergences over each variable, as does \u2202 log q(z|x,\u03c6)\u2202\u03c6 . The expectation of all terms in the resulting product of sums is zero except those\nof the form E [ KL [qi||pi] \u00b7 \u2202 log qi\u2202\u03c6 ] , due to the identity explained in Equation 27. We then use the reparameterization trick to eliminate all hierarchical layers before the current one, and marginalize over each zi. As a result, we can compute the term of Equation 23 by backpropagating"}, {"heading": "KL [q(\u03b6|z = 1, x, \u03c6||p(\u03b6|z = 1)]\u2212 KL [q(\u03b6|z = 0, x, \u03c6)||p(\u03b6|z = 0)]", "text": "into q(z|x, \u03c6). This is especially simple if q(\u03b6i|zi, x, \u03c6) = p(\u03b6i|zi) when zi = 0, since then KL [q(\u03b6|z = 0, x, \u03c6)||p(\u03b6|z = 0)] = 0.\nE.1 SPIKE-AND-GAUSSIAN\nWe might wish q(\u03b6i|zi, x, \u03c6) to be a separate Gaussian for both values of the binary zi. However, it is difficult to invert the CDF of the resulting mixture of Gaussians. It is much easier to use a mixture of a delta spike and a Gaussian, for which the CDF can inverted piecewise:\nq(\u03b6i|zi = 0, x, \u03c6) = \u03b4(\u03b6i) Fq(\u03b6i|zi=0,x,\u03c6)(\u03b6i) = H(\u03b6i) = { 0, if \u03b6i < 0 1, otherwise q(\u03b6i|zi = 1, x, \u03c6) = N ( \u00b5q,i(x, \u03c6), \u03c3 2 q,i(x, \u03c6) ) Fq(\u03b6i|zi=1,x,\u03c6)(\u03b6i) = 1\n2\n[ 1 + erf ( \u03b6i \u2212 \u00b5q,i(x, \u03c6)\u221a\n2\u03c3q,i(x, \u03c6)\n)]\nwhere \u00b5q(x, \u03c6) and \u03c3q(x, \u03c6) are functions of x and \u03c6. We use the substitutions q(zi = 1|x, \u03c6)\u2192 q, \u00b5q,i(x, \u03c6)\u2192 \u00b5q,i, and \u03c3q,i(x, \u03c6)\u2192 \u03c3q,i in the sequel to simplify notation. The prior distribution p is similarly parameterized.\nWe can now find the CDF for q(\u03b6|x, \u03c6) as a function of q(z = 1|x, \u03c6)\u2192 q: Fq(\u03b6|x,\u03c6)(\u03b6i) = (1\u2212 qi) \u00b7H(\u03b6i)\n+ qi 2 \u00b7 [ 1 + erf ( \u03b6i \u2212 \u00b5q,i\u221a\n2\u03c3q,i )] Since zi = 0 makes no contribution to the CDF until \u03b6i = 0, the value of \u03c1 at which \u03b6i = 0 is\n\u03c1stepi = qi 2\n[ 1 + erf ( \u2212\u00b5q,i\u221a 2\u03c3q,i )] so:\n\u03b6i =  \u00b5q,i + \u221a 2\u03c3q,i \u00b7 erf\u22121 ( 2\u03c1i qi \u2212 1 ) , if \u03c1i < \u03c1 step i 0, if \u03c1stepi \u2264 \u03c1i \u2264 \u03c1stepi + (1\u2212 qi) \u00b5q,i + \u221a 2\u03c3q,i \u00b7 erf\u22121 ( 2(\u03c1i\u22121) qi + 1 ) , otherwise\nGradients are always evaluated for fixed choices of \u03c1, and gradients are never taken with respect to \u03c1. As a result, expectations with respect to \u03c1 are invariant to permutations of \u03c1. Furthermore,\n2\u03c1i qi \u2212 1 = 2(\u03c1 \u2032 i \u2212 1) qi + 1\nwhere \u03c1\u2032i = \u03c1i + (1\u2212 qi). We can thus shift the delta spike to the beginning of the range of \u03c1i, and use\n\u03b6i = { 0, if \u03c1i \u2264 1\u2212 qi \u00b5q,i + \u221a 2\u03c3q,i \u00b7 erf\u22121 ( 2(\u03c1i\u22121) qi + 1 ) , otherwise\nAll parameters of the multivariate Gaussians should be trainable functions of x, and independent of q. The new term in Equation 22 is:\u2211\nz q(z|x, \u03c6) \u00b7 KL [q(\u03b6|z, x, \u03c6)||p(\u03b6|z)] =\u2211 z,i q(zi = 1|x, \u03c6) \u00b7 KL [q(\u03b6i|zi = 1, x, \u03c6)||p(\u03b6i|zi = 1)]\n+ (1\u2212 q(zi = 1|x, \u03c6)) \u00b7 KL [q(\u03b6i|zi = 0, x, \u03c6)||p(\u03b6i|zi = 0)] If zi = 0, then q(\u03b6i|zi = 0, x, \u03c6) = p(\u03b6i|zi = 0, \u03b8), and KL [q(\u03b6i|zi = 0, x, \u03c6)||p(\u03b6i|zi = 0, \u03b8)] = 0 as in Section 2. The KL divergence between two multivariate Gaussians with diagonal covariance matrices, with means \u00b5p,i, \u00b5q,i, and covariances \u03c32p,i and \u03c3 2 q,i, is\nKL [q||p] = \u2211 i\n( log \u03c3p,i \u2212 log \u03c3q,i + \u03c32q,i + (\u00b5q,i \u2212 \u00b5p,i)2\n2 \u00b7 \u03c32p,i \u2212 1 2 ) To train q(zi = 1|x, \u03c6), we thus need to backpropagate KL [q(\u03b6i|zi = 1, x, \u03c6)||p(\u03b6i|zi = 1)] into it. Finally,\n\u2202KL[q||p] \u2202\u00b5q,i = \u00b5q,i \u2212 \u00b5p,i \u03c32p,i \u2202KL[q||p] \u2202\u03c3q,i = \u2212 1 \u03c3q,i + \u03c3q,i \u03c32p,i\nso\n\u2211 z q(z|x, \u03c6) \u00b7 \u2202 \u2202\u00b5q,i KL [q||p] = q(zi = 1|x, \u03c6) \u00b7 \u00b5q,i \u2212 \u00b5p,i\n\u03c32p,i\u2211 z q(z|x, \u03c6) \u00b7 \u2202 \u2202\u03c3q,i KL [q||p] = q(zi = 1|x, \u03c6) \u00b7 ( \u2212 1 \u03c3q,i + \u03c3q,i \u03c32p,i )\nFor p, it is not useful to make the mean values of \u03b6 adjustable for each value of z, since this is redundant with the parameterization of the decoder. With fixed means, we could still parameterize the variance, but to maintain correspondence with the standard VAE, we choose the variance to be one.\nF COMPUTING THE GRADIENT OF KL [q(\u03b6, z|x, \u03c6)||p(\u03b6, z|\u03b8)]\nThe KL term of the ELBO (Equation 2) is not significantly affected by the introduction of additional continuous latent variables \u03b6, so long as we use the same expansion r(\u03b6|z) for both the approximating posterior and the prior:\nKL [q||p] = \u2211 z \u222b \u03b6  \u220f 1\u2264j\u2264k r(\u03b6j |zj) \u00b7 q(zj |\u03b6i<j , x)  \u00b7 log [\u220f1\u2264j\u2264k r(\u03b6j |zj) \u00b7 q(zj |\u03b6i<j , x) p(z) \u00b7\u220f1\u2264j\u2264k r(\u03b6j |zj) ]\n= \u2211 z \u222b \u03b6  \u220f 1\u2264j\u2264k r(\u03b6j |zj) \u00b7 q(zj |\u03b6i<j , x)  \u00b7 log [\u220f1\u2264j\u2264k q(zj |\u03b6i<j , x) p(z) ] . (24)\nThe gradient of Equation 24 with respect to the parameters \u03b8 of the prior, p(z|\u03b8), can be estimated stochastically using samples from the approximating posterior, q(\u03b6, z|x, \u03c6), and the true prior, p(z|\u03b8). When the prior is an RBM, defined by Equation 6, we find:\n\u2212 \u2202 \u2202\u03b8 KL [q||p] = \u2212 \u2211 \u03b6,z q(\u03b6, z|x, \u03c6) \u00b7 \u2202Ep(z, \u03b8) \u2202\u03b8 + \u2211 z p(z|\u03b8) \u00b7 \u2202Ep(z, \u03b8) \u2202\u03b8\n= \u2212Eq(z1|x,\u03c6) [ \u00b7 \u00b7 \u00b7 [ Eq(zk|\u03b6i<k,x,\u03c6) [ \u2202Ep(z, \u03b8)\n\u2202\u03b8\n]]] + Ep(z|\u03b8) [ \u2202Ep(z, \u03b8)\n\u2202\u03b8\n] (25)\nThe final expectation with respect to q(zk|\u03b6i<k, x, \u03c6) can be performed analytically; all other expectations require samples from the approximating posterior. Similarly, for the prior, we must sample from the RBM, although Rao-Blackwellization can be used to marginalize half of the units.\nF.1 GRADIENT OF THE ENTROPY WITH RESPECT TO \u03c6\nIn contrast, the gradient of the KL term with respect to the parameters of the approximating posterior is severely complicated by a nonfactorial approximating posterior. We break KL [q||p] into two terms, the negative entropy \u2211 z,\u03b6 q log q, and the cross-entropy \u2212 \u2211 z,\u03b6 q log p, and compute their gradients separately.\nWe can regroup the negative entropy term of the KL divergence so as to use the reparameterization trick to backpropagate through \u220f i<j q(zj |\u03b6i<j , x):\n\u2212H(q) = \u2211 z \u222b \u03b6  \u220f 1\u2264j\u2264k r(\u03b6j |zj) \u00b7 q(zj |\u03b6i<j , x)  \u00b7 log  \u220f 1\u2264j\u2264k q(zj |\u03b6i<j , x)  = \u2211 z \u222b \u03b6 \u220f j r(\u03b6j |zj) \u00b7 q(zj |\u03b6i<j , x)  \u00b7 \u2211 j log q(zj |\u03b6i<j , x)\n = \u2211 j \u2211 z \u222b \u03b6 \u220f i\u2264j r(\u03b6i|zi) \u00b7 q(zi|\u03b6h<i, x)\n \u00b7 log q(zj |\u03b6i<j , x) = \u2211 j Eq(\u03b6i<j ,zi<j |x,\u03c6) \u2211 zj q(zj |\u03b6i<j , x) \u00b7 log q(zj |\u03b6i<j , x)\n = \u2211 j E\u03c1i<j \u2211 zj q(zj |\u03c1i<j , x) \u00b7 log q(zj |\u03c1i<j , x)\n (26) where indices i and j denote hierarchical groups of variables. The probability q(zj |\u03c1i<j , x) is evaluated analytically, whereas all variables zi<j and \u03b6i<j are implicitly sampled stochastically via \u03c1i<j .\nWe wish to take the gradient of \u2212H(q) in Equation 26. Using the identity:\nEq [ c \u00b7 \u2202 \u2202\u03c6 log q ] = c \u00b7 \u2211 z q \u00b7 ( \u2202q \u2202\u03c6 /q ) = c \u00b7 \u2202 \u2202\u03c6 (\u2211 z q ) = 0 (27)\nfor any constant c, we can eliminate the gradient of log qj|\u03c1i<j in \u2212\u2202H(q)\u2202\u03c6 , and obtain:\n\u2212 \u2202 \u2202\u03c6 H(q) = \u2211 j E\u03c1i<j \u2211 zj ( \u2202 \u2202\u03c6 q(zj |\u03c1i<j , x) ) \u00b7 log q(zj |\u03c1i<j , x)  . Moreover, we can eliminate any log-partition function in log q(zj |\u03c1i<j , x) by an argument analogous to Equation 27.15 By repeating this argument one more time, we can break \u2202\u2202\u03c6q(zj |\u03c1i<j , x) into its factorial components.16 If zi \u2208 {0, 1}, then using Equation 10, gradient of the negative entropy reduces to:\n\u2212 \u2202 \u2202\u03c6 H(q) = \u2211 j E\u03c1i<j \u2211 \u03b9\u2208j \u2211 z\u03b9 q\u03b9(z\u03b9) \u00b7 ( z\u03b9 \u00b7 \u2202g\u03b9 \u2202\u03c6 \u2212 \u2211 z\u03b9 ( q\u03b9(z\u03b9) \u00b7 z\u03b9 \u00b7 \u2202g\u03b9 \u2202\u03c6 )) \u00b7 (g\u03b9 \u00b7 z\u03b9)  = \u2211 j E\u03c1i<j [ \u2202g>j \u2202\u03c6 \u00b7 ( gj [ qj(zj = 1)\u2212 q2j (zj = 1)\n])] where \u03b9 and z\u03b9 correspond to single variables within the hierarchical groups denoted by j. In TensorFlow, it might be simpler to write:\n\u2212 \u2202 \u2202\u03c6 H(q) = E\u03c1i<j\n[ \u2202q>j (zj = 1) \u2202\u03c6 \u00b7 gj ] .\n15\u2211 z c \u00b7 \u2202q \u2202\u03c6 = c \u00b7 \u2202 \u2202\u03c6 \u2211 z q = 0, where c is the log partition function of q(zj |\u03c1i<j , x). 16 \u2202 \u2202\u03c6 \u220f i qi = \u2211 i \u2202qi \u2202\u03c6 \u00b7 \u220f j 6=i qj , so the qj 6=i marginalize out of \u2202qi \u2202\u03c6 \u00b7 \u220f j 6=i qj when multiplied by log qi.\nWhen \u2202qi \u2202\u03c6 \u00b7 \u220f j 6=i qj is multiplied by one of the log qj 6=i, the sum over zi can be taken inside the \u2202 \u2202\u03c6\n, and again \u2202 \u2202\u03c6 \u2211 zi qi = 0.\nF.2 GRADIENT OF THE CROSS-ENTROPY\nThe gradient of the cross-entropy with respect to the parameters \u03c6 of the approximating posterior does not depend on the partition function of the prior Zp, since:\n\u2212 \u2202 \u2202\u03c6 \u2211 z q log p = \u2211 z \u2202 \u2202\u03c6 q \u00b7 Ep + \u2202 \u2202\u03c6 q \u00b7 logZp = \u2211 z \u2202 \u2202\u03c6 q \u00b7 Ep\nby Equations 6 and 27, so we are left with the gradient of the average energy Ep. The remaining cross-entropy term is\u2211 z q \u00b7 Ep = \u2212E\u03c1 [ z> \u00b7W \u00b7 z + b> \u00b7 z ] . We can handle the term b> \u00b7 z analytically, since zi \u2208 {0, 1}, and E\u03c1 [ b> \u00b7 z ] = b> \u00b7 E\u03c1 [q(z = 1)] .\nThe approximating posterior q is continuous, with nonzero derivative, so the reparameterization trick can be applied to backpropagate gradients:\n\u2202 \u2202\u03c6 E\u03c1 [ b> \u00b7 z ] = b> \u00b7 E\u03c1\n[ \u2202\n\u2202\u03c6 q(z = 1)\n] .\nIn contrast, each element of the sum z> \u00b7W \u00b7 z = \u2211 i,j Wij \u00b7 zi \u00b7 zj\ndepends upon variables that are not usually in the same hierarchical level, so in general E\u03c1 [Wijzizj ] 6=WijE\u03c1 [zi] \u00b7 E\u03c1 [zj ] .\nWe might decompose this term into E\u03c1 [Wijzizj ] =Wij \u00b7 E\u03c1k\u2264i [ zi \u00b7 E\u03c1k>i [zj ] ] ,\nwhere without loss of generality zi is in an earlier hierarchical layer than zj ; however, it is not clear how to take the derivative of zi, since it is a discontinuous function of \u03c1k\u2264i.\nF.3 NAIVE APPROACH\nThe naive approach would be to take the gradient of the expectation using the gradient of logprobabilities over all variables:\n\u2202\n\u2202\u03c6 E [Wijzizj ] = Eq\n[ Wijzizj \u00b7 \u2202\n\u2202\u03c6 log q ] = Eq1,q2|1,... [ Wijzizj \u00b7\n\u2211 k \u2202 \u2202\u03c6 log qk|l<k\n] (28)\n= Eq1,q2|1,... [ Wijzizj \u00b7 \u2211 k 1 qk|l<k \u00b7 \u2202qk|l<k \u2202\u03c6 ] .\nFor \u2202qk|l<k\u2202\u03c6 , we can drop out terms involving only zi<k and zj<k that occur hierarchically before k, since those terms can be pulled out of the expectation over qk, and we can apply Equation 27. However, for terms involving zi>k or zj>k that occur hierarchically after k, the expected value of zi or zj depends upon the chosen value of zk.\nThe gradient calculation in Equation 28 is an instance of the REINFORCE algorithm (Equation 18). Moreover, the variance of the estimate is proportional to the number of terms (to the extent that the terms are independent). The number of terms contributing to each gradient \u2202qk|l<k\u2202\u03c6 grows quadratically with number of units in the RBM. We can introduce a baseline, as in NVIL (Mnih & Gregor, 2014):\nEq [ (Wijzizj \u2212 c(x)) \u00b7 \u2202\n\u2202\u03c6 log q\n] ,\nbut this approximation is still high-variance.\nF.4 DECOMPOSITION OF \u2202\u2202\u03c6Wijzizj VIA THE CHAIN RULE\nWhen using the spike-and-exponential, spike-and-slab, or spike-and-Gaussian distributions of sections 2.1 D.2, and E.1, we can decompose the gradient of E [Wijzizj ] using the chain rule. Previously, we have considered z to be a function of \u03c1 and \u03c6. We can instead formulate z as a function of q(z = 1) and \u03c1, where q(z = 1) is itself a function of \u03c1 and \u03c6. Specifically,\nzi(qi(zi = 1), \u03c1i) = { 0 if \u03c1i < 1\u2212 qi(zi = 1) = qi(zi = 0) 1 otherwise.\n(29)\nUsing the chain rule, \u2202\u2202\u03c6zi = \u2211 j \u2202zi \u2202qj(zj=1)\n\u00b7 \u2202qj(zj=1)\u2202\u03c6 , where \u2202zi\u2202qj(zj=1) holds all qk 6=j fixed, even though they all depend on the common variables \u03c1 and parameters \u03c6. We use the chain rule to differentiate with respect to q(z = 1) since it allows us to pull part of the integral over \u03c1 inside the derivative with respect to \u03c6. In the sequel, we sometimes write q in place of q(z = 1) to minimize notational clutter.\nExpanding the desired gradient using the reparameterization trick and the chain rule, we find:\n\u2202\n\u2202\u03c6 Eq [Wijzizj ] =\n\u2202\n\u2202\u03c6 E\u03c1 [Wijzizj ]\n= E\u03c1 [\u2211 k \u2202Wijzizj \u2202qk(zk = 1) \u00b7 \u2202qk(zk = 1) \u2202\u03c6 ] . (30)\nWe can change the order of integration (via the expectation) and differentiation since\n|Wijzizj | \u2264Wij <\u221e for all \u03c1 and bounded \u03c6 (Cheng, 2006). Although z(q, \u03c1) is a step function, and its derivative is a delta function, the integral (corresponding to the expectation with respect to \u03c1) of its derivative is finite. Rather than dealing with generalized functions directly, we apply the definition of the derivative, and push through the matching integral to recover a finite quantity.\nFor simplicity, we pull the sum over k out of the expectation in Equation 30, and consider each summand independently. From Equation 29, we see that zi is only a function of qi, so all terms in the sum over k in Equation 30 vanish except k = i and k = j. Without loss of generality, we consider the term k = i; the term k = j is symmetric. Applying the definition of the gradient to one of the summands, and then analytically taking the expectation with respect to \u03c1i, we obtain:\nE\u03c1 [ \u2202Wij \u00b7 zi(q, \u03c1) \u00b7 zj(q, \u03c1)\n\u2202qi(zi = 1) \u00b7 \u2202qi(zi = 1) \u2202\u03c6 ] = E\u03c1 [ lim\n\u03b4qi(zi=1)\u21920 Wij \u00b7 zi(q + \u03b4qi, \u03c1) \u00b7 zj(q + \u03b4qi, \u03c1)\u2212Wij \u00b7 zi(q, \u03c1) \u00b7 zj(q, \u03c1) \u03b4qi \u00b7 \u2202qi(zi = 1) \u2202\u03c6 ] = E\u03c1k 6=i [ lim\n\u03b4qi(zi=1)\u21920 \u03b4qi \u00b7 Wij \u00b7 1 \u00b7 zj(q, \u03c1)\u2212Wij \u00b7 0 \u00b7 zj(q, \u03c1) \u03b4qi \u00b7 \u2202qi(zi = 1) \u2202\u03c6 \u2223\u2223\u2223\u2223 \u03c1i=qi(zi=0) ]\n= E\u03c1k 6=i [ Wij \u00b7 zj(q, \u03c1) \u00b7 \u2202qi(zi = 1)\n\u2202\u03c6\n\u2223\u2223\u2223\u2223 \u03c1i=qi(zi=0) ] .\nThe third line follows from Equation 29, since zi(q+ \u03b4qi, \u03c1) differs from zi(q, \u03c1) only in the region of \u03c1 of size \u03b4qi around qi(zi = 0) = 1\u2212 qi(zi = 1) where zi(q + \u03b4qi, \u03c1) 6= zi(q, \u03c1). Regardless of the choice of \u03c1, zj(q + \u03b4qi, \u03c1) = zj(q, \u03c1).\nThe third line fixes \u03c1i to the transition between zi = 0 and zi = 1 at qi(zi = 0). Since zi = 0 implies \u03b6i = 0,17 and \u03b6 is a continuous function of \u03c1, the third line implies that \u03b6i = 0. At the same time, since qi is only a function of \u03c1k<i from earlier in the hierarchy, the term \u2202qi\u2202\u03c6 is not affected by the choice of \u03c1i.18 As noted above, due to the chain rule, the perturbation \u03b4qi has no effect on other\n17We chose the conditional distribution r(\u03b6i|zi = 0) to be a delta spike at zero. 18In contrast, zi is a function of \u03c1i.\nqj by definition; the gradient is evaluated with those values held constant. On the other hand, \u2202qi\u2202\u03c6 is generally nonzero for all parameters governing hierarchical levels k < i.\nSince \u03c1i is fixed such that \u03b6i = 0, all units further down the hierarchy must be sampled consistent with this restriction. A sample from \u03c1 has \u03b6i = 0 if zi = 0, which occurs with probability qi(zi = 0).19 We can compute the gradient with a stochastic approximation by multiplying each sample by 1\u2212 zi, so that terms with \u03b6i 6= 0 are ignored,20 and scaling up the gradient when zi = 0 by 1qi(zi=0) :\n\u2202\n\u2202\u03c6 E [Wijzizj ] = E\u03c1\n[ Wij \u00b7\n1\u2212 zi 1\u2212 qi(zi = 1) \u00b7 zj \u00b7 \u2202qi(zi = 1) \u2202\u03c6\n] . (31)\nThe term 1\u2212zi1\u2212qi is not necessary if j comes before i in the hierarchy.\nWhile Equation 31 appears similar to REINFORCE, it is better understood as an importanceweighted estimate of an efficient gradient calculation. Just as a ReLU only has a nonzero gradient in the linear regime, \u2202zi\u2202\u03c6 effectively only has a nonzero gradient when zi = 0, in which case \u2202zi \u2202\u03c6 \u223c \u2202qi(zi=1) \u2202\u03c6 . Unlike in REINFORCE, we do effectively differentiate the reward, Wijzizj . Moreover, the number of terms contributing to each gradient \u2202qi(zi=1)\u2202\u03c6 grows linearly with the number of units in an RBM, whereas it grows quadratically in the method of Section F.3."}, {"heading": "G MOTIVATION FOR BUILDING APPROXIMATING POSTERIOR AND PRIOR", "text": "HIERARCHIES IN THE SAME ORDER\nIntuition regarding the difficulty of approximating the posterior distribution over the latent variables given the data can be developed by considering sparse coding, an approach that uses a basis set of spatially locallized filters (Olshausen & Field, 1996). The basis set is overcomplete, and there are generally many basis elements similar to any selected basis element. However, the sparsity prior pushes the posterior distribution to use only one amongst each set of similar basis elements.\nAs a result, there is a large set of sparse representations of roughly equivalent quality for any single input. Each basis element individually can be replaced with a similar basis element. However, having changed one basis element, the optimal choice for the adjacent elements also changes so the filters mesh properly, avoiding redundancy or gaps. The true posterior is thus highly correlated, since even after conditioning on the input, the probability of a given basis element depends strongly on the selection of the adjacent basis elements.\nThese equivalent representations can easily be disambiguated by the successive layers of the representation. In the simplest case, the previous layer could directly specify which correlated set of basis elements to use amongst the applicable sets. We can therefore achieve greater efficiency by inferring the approximating posterior over the top-most latent layer first. Only then do we compute the conditional approximating posteriors of lower layers given a sample from the approximating posterior of the higher layers, breaking the symmetry between representations of similar quality."}, {"heading": "H ARCHITECTURE", "text": "The stochastic approximation to the ELBO is computed via one pass down the approximating posterior (Figure 4a), sampling from each continuous latent layer \u03b6i and zm>1 in turn; and another pass down the prior (Figure 4b), conditioned on the sample from the approximating posterior. In the pass down the prior, signals do not flow from layer to layer through the entire model. Rather, the input to each layer is determined by the approximating posterior of the previous layers, as follows from Equation 14. The gradient is computed by backpropagating the reconstruction log-likelihood, and the KL divergence between the approximating posterior and true prior at each layer, through this differentiable structure.\n19It might also be the case that \u03b6i = 0 when zi = 1, but with our choice of r(\u03b6|z), this has vanishingly small probability.\n20This takes advantage of the fact that zi \u2208 {0, 1}.\nAll hyperparameters were tuned via manual experimentation. Except in Figure 6, RBMs have 128 units (64 units per side, with full bipartite connections between the two sides), with 4 layers of hierarchy in the approximating posterior. We use 100 iterations of block Gibbs sampling, with 20 persistent chains per element of the minibatch, to sample from the prior in the stochastic approximation to Equation 11.\nWhen using the hierarchy of continuous latent variables described in Section 4, discrete VAEs overfit if any component of the prior is overparameterized, as shown in Figure 9a. In contrast, a larger and more powerful approximating posterior generally did not reduce performance within the range examined, as in Figure 9b. In response, we manually tuned the number of layers of continuous latent variables, the number of such continuous latent variables per layer, the number of deterministic hidden units per layer in the neural network defining each hierarchical layer of the prior, and the use of parameter sharing in the prior. We list the selected values in Table 2. All neural networks implementing components of the approximating posterior contain two hidden layers of 2000 units.\nOn statically binarized MNIST, Omniglot, and Caltech-101 Silhouettes, we further regularize using recurrent parameter sharing. In the simplest case, each p (zm|zl<m, \u03b8) and p (x|z, \u03b8) is a function of \u2211 l<m zl, rather than a function of the concatenation [z0, z1, . . . , zm\u22121]. Moreover, all p (zm\u22651|zl<m, \u03b8) share parameters. The RBM layer z0 is rendered compatible with this parameterization by using a trainable linear transformation of \u03b6, M \u00b7 \u03b6; where the number of rows in M is\nequal to the number of variables in each zm>0. We refer to this architecture as complete recurrent parameter sharing.\nOn datasets of intermediate size, a degree of recurrent parameter sharing somewhere between full independence and complete sharing is beneficial. We define the n group architecture by dividing the continuous latent layers zm\u22651 into n equally sized groups of consecutive layers. Each such group is independently subject to recurrent parameter sharing analogous to the complete sharing architecture, and the RBM layer z0 is independently parameterized.\nWe use the spike-and-exponential transformation described in Section 2.1. The exponent is a trainable parameter, but it is bounded above by a value that increases linearly with the number of training epochs. We use warm-up with strength 20 for 5 epochs, and additional warm-up of strength 2 on the RBM alone for 20 epochs (Raiko et al., 2007; Bowman et al., 2016; S\u00f8nderby et al., 2016).\nWhen p(x|z) is linear, all nonlinear transformations are part of the prior over the latent variables. In contrast, it is also possible to define the prior distribution over the continuous latent variables to be a simple factorial distribution, and push the nonlinearity into the final decoder p(x|z), as in traditional VAEs. The former case can be reduced to something analogous to the latter case using the reparameterization trick.\nHowever, a VAE with a completely independent prior does not regularize the nonlinearity of the prior; whereas a hierarchical prior requires that the nonlinearity of the prior (via its effect on the true posterior) be well-represented by the approximating posterior. Viewed another way, a completely independent prior requires the model to consist of many independent sources of variance, so the data manifold must be fully unfolded into an isotropic ball. A hierarchical prior allows the data manifold to remain curled within a higher-dimensional ambient space, with the approximating posterior merely tracking its contortions. A higher-dimensional ambient space makes sense when modeling multiple classes of objects. For instance, the parameters characterizing limb positions and orientations for people have no analog for houses.\nH.1 ESTIMATING THE LOG PARTITION FUNCTION\nWe estimate the log-likelihood by subtracting an estimate of the log partition function of the RBM (logZp from Equation 6) from an importance-weighted computation analogous to that of Burda et al. (2016). For this purpose, we estimate the log partition function using bridge sampling, a variant of Bennett\u2019s acceptance ratio method (Bennett, 1976; Shirts & Chodera, 2008), which produces unbiased estimates of the partition function. Interpolating distributions were of the form p(x)\u03b2 , and sampled with a parallel tempering routine (Swendsen & Wang, 1986). The set of smoothing parameters \u03b2 in [0, 1] were chosen to approximately equalize replica exchange rates at 0.5. This standard criteria simultaneously keeps mixing times small, and allows for robust inference. We make a conservative estimate for burn-in (0.5 of total run time), and choose the total length of run, and number of repeated experiments, to achieve sufficient statistical accuracy in the log partition function. In Figure 10, we plot the distribution of independent estimations of the log-partition function for a single model of each dataset. These estimates differ by no more than about 0.1, indicating that the estimate of the log-likelihood should be accurate to within about 0.05 nats.\nH.2 CONSTRAINED LAPLACIAN BATCH NORMALIZATION\nRather than traditional batch normalization (Ioffe & Szegedy, 2015), we base our batch normalization on the L1 norm. Specifically, we use:\ny = x\u2212 x xbn = y/ ( |y|+ ) s+ o,\nwhere x is a minibatch of scalar values, x denotes the mean of x, indicates element-wise multiplication, is a small positive constant, s is a learned scale, and o is a learned offset. For the approximating posterior over the RBM units, we bound 2 \u2264 s \u2264 3, and \u2212s \u2264 o \u2264 s. This helps ensure that all units are both active and inactive in each minibatch, and thus that all units are used."}, {"heading": "I COMPARISON MODELS", "text": "In Table 1, we compare the performance of the discrete variational autoencoder to a selection of recent, competitive models. For dynamically binarized MNIST, we compare to deep belief networks (DBN; Hinton et al., 2006), reporting the results of Murray & Salakhutdinov (2009); importanceweighted autoencoders (IWAE; Burda et al., 2016); and ladder variational autoencoders (Ladder VAE; S\u00f8nderby et al., 2016).\nFor the static MNIST binarization of (Salakhutdinov & Murray, 2008), we compare to Hamiltonian variational inference (HVI; Salimans et al., 2015); the deep recurrent attentive writer (DRAW; Gregor et al., 2015); the neural adaptive importance sampler with neural autoregressive distribution estimator (NAIS NADE; Du et al., 2015); deep latent Gaussian models with normalizing flows (Normalizing flows; Rezende & Mohamed, 2015); and the variational Gaussian process (Tran et al., 2016).\nOn Omniglot, we compare to the importance-weighted autoencoder (IWAE; Burda et al., 2016); ladder variational autoencoder (Ladder VAE; S\u00f8nderby et al., 2016); and the restricted Boltzmann machine (RBM; Smolensky, 1986) and deep belief network (DBN; Hinton et al., 2006), reporting the results of Burda et al. (2015).\nFinally, for Caltech-101 Silhouettes, we compare to the importance-weighted autoencoder (IWAE; Burda et al., 2016), reporting the results of Li & Turner (2016); reweighted wake-sleep with a deep sigmoid belief network (RWS SBN; Bornschein & Bengio, 2015); the restricted Boltzmann machine (RBM; Smolensky, 1986), reporting the results of Cho et al. (2013); and the neural adaptive importance sampler with neural autoregressive distribution estimator (NAIS NADE; Du et al., 2015)."}, {"heading": "J SUPPLEMENTARY RESULTS", "text": "To highlight the contribution of the various components of our generative model, we investigate performance on a selection of simplified models.21 First, we remove the continuous latent layers. The resulting prior, depicted in Figure 1b, consists of the bipartite Boltzmann machine (RBM), the smoothing variables \u03b6, and a factorial Bernoulli distribution over the observed variables x defined via a deep neural network with a logistic final layer. This probabilistic model achieves a log-likelihood of \u221286.9 with 128 RBM units and \u221285.2 with 200 RBM units. Next, we further restrict the neural network defining the distribution over the observed variables x given the smoothing variables \u03b6 to consist of a linear transformation followed by a pointwise logistic nonlinearity, analogous to a sigmoid belief network (SBN; Spiegelhalter & Lauritzen, 1990; Neal, 1992). This decreases the negative log-likelihood to \u221292.7 with 128 RBM units and \u221288.8 with 200 RBM units.\nWe then remove the lateral connections in the RBM, reducing it to a set of independent binary random variables. The resulting network is a noisy sigmoid belief network. That is, samples are produced by drawing samples from the independent binary random variables, multiplying by an independent noise source, and then sampling from the observed variables as in a standard SBN. With this SBN-like architecture, the discrete variational autoencoder achieves a log-likelihood of \u221297.0 with 200 binary latent variables. Finally, we replace the hierarchical approximating posterior of Figure 3a with the factorial approximating posterior of Figure 1a. This simplification of the approximating posterior, in addition to the prior, reduces the log-likelihood to \u2212102.9 with 200 binary latent variables.\n21In all cases, we report the negative log-likelihood on statically binarized MNIST (Salakhutdinov & Murray, 2008), estimated with 104 importance weighted samples (Burda et al., 2016).\nFigures 11, 12, and 13 repeat the analysis of Figure 5 for statically binarized MNIST, Omniglot, and Caltech-101 Silhouettes. Specifically, they show the generative output of a discrete VAE as the Markov chain over the RBM evolves via block Gibbs sampling. The RBM is held constant across each sub-row of five samples, and variation amongst these samples is due to the layers of continuous latent variables. Given a multimodal distribution with well-separated modes, Gibbs sampling passes through the large, low-probability space between the modes only infrequently. As a result, consistency of the object class over many successive rows in Figures 11, 12, and 13 indicates that the RBM prior has well-separated modes.\nOn statically binarized MNIST, the RBM still learns distinct, separated modes corresponding to most of the different digit types. However, these modes are not as well separated as in dynamically binarized MNIST, as is evident from the more rapid switching between digit types in Figure 11. There are not obvious modes for Omniglot in Figure 12; it is plausible that an RBM with 128 units could not represent enough well-separated modes to capture the large number of distinct character types in the Omniglot dataset. On Caltech-101 Silhouettes, there may be a mode corresponding to large, roughly convex blobs."}], "references": [{"title": "Adaptive dropout for training deep neural networks", "author": ["Jimmy Ba", "Brendan Frey"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Ba and Frey.,? \\Q2013\\E", "shortCiteRegEx": "Ba and Frey.", "year": 2013}, {"title": "Estimating or propagating gradients through stochastic neurons for conditional computation", "author": ["Yoshua Bengio", "Nicholas L\u00e9onard", "Aaron Courville"], "venue": "arXiv preprint arXiv:1308.3432,", "citeRegEx": "Bengio et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2013}, {"title": "Efficient estimation of free energy differences from Monte Carlo data", "author": ["Charles H. Bennett"], "venue": "Journal of Computational Physics,", "citeRegEx": "Bennett.,? \\Q1976\\E", "shortCiteRegEx": "Bennett.", "year": 1976}, {"title": "Reweighted wake-sleep", "author": ["J\u00f6rg Bornschein", "Yoshua Bengio"], "venue": "In Proceedings of the International Conference on Learning Representations,", "citeRegEx": "Bornschein and Bengio.,? \\Q2015\\E", "shortCiteRegEx": "Bornschein and Bengio.", "year": 2015}, {"title": "Bidirectional Helmholtz machines", "author": ["J\u00f6rg Bornschein", "Samira Shabanian", "Asja Fischer", "Yoshua Bengio"], "venue": "In Proceedings of The 33rd International Conference on Machine Learning,", "citeRegEx": "Bornschein et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Bornschein et al\\.", "year": 2016}, {"title": "Generating sentences from a continuous space", "author": ["Samuel R. Bowman", "Luke Vilnis", "Oriol Vinyals", "Andrew M. Dai", "Rafal Jozefowicz", "Samy Bengio"], "venue": "In Proceedings of the 20th SIGNLL Conference on Computational Natural Language Learning,", "citeRegEx": "Bowman et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Bowman et al\\.", "year": 2016}, {"title": "Accurate and conservative estimates of MRF log-likelihood using reverse annealing", "author": ["Yuri Burda", "Roger B. Grosse", "Ruslan Salakhutdinov"], "venue": "In Proceedings of the 18th International Conference on Artificial Intelligence and Statistics,", "citeRegEx": "Burda et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Burda et al\\.", "year": 2015}, {"title": "Importance weighted autoencoders", "author": ["Yuri Burda", "Roger Grosse", "Ruslan Salakhutdinov"], "venue": "Proceedings of the International Conference on Learning Representations,", "citeRegEx": "Burda et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Burda et al\\.", "year": 2016}, {"title": "Differentiation under the integral sign with weak derivatives", "author": ["Steve Cheng"], "venue": "Technical report, Working paper,", "citeRegEx": "Cheng.,? \\Q2006\\E", "shortCiteRegEx": "Cheng.", "year": 2006}, {"title": "Enhanced gradient for training restricted Boltzmann machines", "author": ["KyungHyun Cho", "Tapani Raiko", "Alexander Ilin"], "venue": "Neural Computation,", "citeRegEx": "Cho et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Cho et al\\.", "year": 2013}, {"title": "A recurrent latent variable model for sequential data", "author": ["Junyoung Chung", "Kyle Kastner", "Laurent Dinh", "Kratarth Goel", "Aaron C. Courville", "Yoshua Bengio"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Chung et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Chung et al\\.", "year": 2015}, {"title": "Unsupervised models of images by spike-and-slab rbms", "author": ["Aaron C. Courville", "James S. Bergstra", "Yoshua Bengio"], "venue": "In Proceedings of the 28th International Conference on Machine Learning,", "citeRegEx": "Courville et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Courville et al\\.", "year": 2011}, {"title": "Approximating probabilistic inference in Bayesian belief networks is NP-hard", "author": ["Paul Dagum", "Michael Luby"], "venue": "Artificial Intelligence,", "citeRegEx": "Dagum and Luby.,? \\Q1993\\E", "shortCiteRegEx": "Dagum and Luby.", "year": 1993}, {"title": "Learning deep generative models with doubly stochastic MCMC", "author": ["Chao Du", "Jun Zhu", "Bo Zhang"], "venue": "arXiv preprint arXiv:1506.04557,", "citeRegEx": "Du et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Du et al\\.", "year": 2015}, {"title": "Generative adversarial nets", "author": ["Ian Goodfellow", "Jean Pouget-Abadie", "Mehdi Mirza", "Bing Xu", "David Warde-Farley", "Sherjil Ozair", "Aaron Courville", "Yoshua Bengio"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Goodfellow et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Goodfellow et al\\.", "year": 2014}, {"title": "Stochastic backpropagation through mixture density distributions", "author": ["Alex Graves"], "venue": "arXiv preprint arXiv:1607.05690,", "citeRegEx": "Graves.,? \\Q2016\\E", "shortCiteRegEx": "Graves.", "year": 2016}, {"title": "Deep autoregressive networks", "author": ["Karol Gregor", "Ivo Danihelka", "Andriy Mnih", "Charles Blundell", "Daan Wierstra"], "venue": "In Proceedings of the 31st International Conference on Machine Learning,", "citeRegEx": "Gregor et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Gregor et al\\.", "year": 2014}, {"title": "DRAW: A recurrent neural network for image generation", "author": ["Karol Gregor", "Ivo Danihelka", "Alex Graves", "Daan Wierstra"], "venue": "In Proceedings of the 32nd International Conference on Machine Learning,", "citeRegEx": "Gregor et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Gregor et al\\.", "year": 2015}, {"title": "A fast learning algorithm for deep belief nets", "author": ["Geoffrey Hinton", "Simon Osindero", "Yee-Whye Teh"], "venue": "Neural Computation,", "citeRegEx": "Hinton et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Hinton et al\\.", "year": 2006}, {"title": "Autoencoders, minimum description length, and Helmholtz free energy", "author": ["Geoffrey E. Hinton", "R.S. Zemel"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "Hinton and Zemel.,? \\Q1994\\E", "shortCiteRegEx": "Hinton and Zemel.", "year": 1994}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "author": ["Sergey Ioffe", "Christian Szegedy"], "venue": "In Proceedings of the 32nd International Conference on Machine Learning,", "citeRegEx": "Ioffe and Szegedy.,? \\Q2015\\E", "shortCiteRegEx": "Ioffe and Szegedy.", "year": 2015}, {"title": "Composing graphical models with neural networks for structured representations and fast inference", "author": ["Matthew Johnson", "David K Duvenaud", "Alexander B Wiltschko", "Sandeep R Datta", "Ryan P Adams"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Johnson et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Johnson et al\\.", "year": 2016}, {"title": "An introduction to variational methods for graphical models", "author": ["Michael I. Jordan", "Zoubin Ghahramani", "Tommi S. Jaakkola", "Lawrence K. Saul"], "venue": "Machine learning,", "citeRegEx": "Jordan et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Jordan et al\\.", "year": 1999}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba"], "venue": "In Proceedings of the International Conference on Learning Representations,", "citeRegEx": "Kingma and Ba.,? \\Q2015\\E", "shortCiteRegEx": "Kingma and Ba.", "year": 2015}, {"title": "Semi-supervised learning with deep generative models", "author": ["Diederik P Kingma", "Shakir Mohamed", "Danilo Jimenez Rezende", "Max Welling"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Kingma et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Kingma et al\\.", "year": 2014}, {"title": "Auto-encoding variational bayes", "author": ["Durk P. Kingma", "Max Welling"], "venue": "In Proceedings of the International Conference on Learning Representations,", "citeRegEx": "Kingma and Welling.,? \\Q2014\\E", "shortCiteRegEx": "Kingma and Welling.", "year": 2014}, {"title": "One-shot learning by inverting a compositional causal process", "author": ["Brenden M. Lake", "Ruslan R. Salakhutdinov", "Josh Tenenbaum"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Lake et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Lake et al\\.", "year": 2013}, {"title": "The neural autoregressive distribution estimator", "author": ["Hugo Larochelle", "Iain Murray"], "venue": "In Proceedings of the 14th International Conference on Artificial Intelligence and Statistics,", "citeRegEx": "Larochelle and Murray.,? \\Q2011\\E", "shortCiteRegEx": "Larochelle and Murray.", "year": 2011}, {"title": "Gradient-based learning applied to document recognition", "author": ["Yann LeCun", "L\u00e9on Bottou", "Yoshua Bengio", "Patrick Haffner"], "venue": "Proceedings of the IEEE,", "citeRegEx": "LeCun et al\\.,? \\Q1998\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 1998}, {"title": "Variational inference with R\u00e9nyi divergence", "author": ["Yingzhen Li", "Richard E. Turner"], "venue": "arXiv preprint arXiv:1602.02311,", "citeRegEx": "Li and Turner.,? \\Q2016\\E", "shortCiteRegEx": "Li and Turner.", "year": 2016}, {"title": "Restricted Boltzmann machines are hard to approximately evaluate or simulate", "author": ["Philip M. Long", "Rocco Servedio"], "venue": "In Proceedings of the 27th International Conference on Machine Learning,", "citeRegEx": "Long and Servedio.,? \\Q2010\\E", "shortCiteRegEx": "Long and Servedio.", "year": 2010}, {"title": "Inductive principles for restricted Boltzmann machine learning", "author": ["Benjamin M Marlin", "Kevin Swersky", "Bo Chen", "Nando de Freitas"], "venue": "In Proceedings of the 13th International Conference on Artificial Intelligence and Statistics,", "citeRegEx": "Marlin et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Marlin et al\\.", "year": 2010}, {"title": "Neural variational inference and learning in belief networks", "author": ["Andriy Mnih", "Karol Gregor"], "venue": "Proceedings of the 31st International Conference on Machine Learning,", "citeRegEx": "Mnih and Gregor.,? \\Q2014\\E", "shortCiteRegEx": "Mnih and Gregor.", "year": 2014}, {"title": "Variational inference for Monte Carlo objectives", "author": ["Andriy Mnih", "Danilo J. Rezende"], "venue": "In Proceedings of the 33rd International Conference on Machine Learning,", "citeRegEx": "Mnih and Rezende.,? \\Q2016\\E", "shortCiteRegEx": "Mnih and Rezende.", "year": 2016}, {"title": "Evaluating probabilities under high-dimensional latent variable models", "author": ["Iain Murray", "Ruslan R. Salakhutdinov"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Murray and Salakhutdinov.,? \\Q2009\\E", "shortCiteRegEx": "Murray and Salakhutdinov.", "year": 2009}, {"title": "Connectionist learning of belief networks", "author": ["Radford M. Neal"], "venue": "Artificial Intelligence,", "citeRegEx": "Neal.,? \\Q1992\\E", "shortCiteRegEx": "Neal.", "year": 1992}, {"title": "Emergence of simple-cell receptive field properties by learning a sparse code for natural images", "author": ["Bruno A. Olshausen", "David J. Field"], "venue": null, "citeRegEx": "Olshausen and Field.,? \\Q1996\\E", "shortCiteRegEx": "Olshausen and Field.", "year": 1996}, {"title": "Variational Baysian inference with stochastic search", "author": ["John Paisley", "David M. Blei", "Michael I. Jordan"], "venue": "In Proceedings of the 29th International Conference on Machine Learning,", "citeRegEx": "Paisley et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Paisley et al\\.", "year": 2012}, {"title": "Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference", "author": ["Judea Pearl"], "venue": null, "citeRegEx": "Pearl.,? \\Q1988\\E", "shortCiteRegEx": "Pearl.", "year": 1988}, {"title": "Building blocks for variational Bayesian learning of latent variable models", "author": ["Tapani Raiko", "Harri Valpola", "Markus Harva", "Juha Karhunen"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Raiko et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Raiko et al\\.", "year": 2007}, {"title": "Techniques for learning binary stochastic feedforward neural networks", "author": ["Tapani Raiko", "Mathias Berglund", "Guillaume Alain", "Laurent Dinh"], "venue": "In Proceedings of the International Conference on Learning Representations,", "citeRegEx": "Raiko et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Raiko et al\\.", "year": 2015}, {"title": "Semisupervised learning with ladder networks", "author": ["Antti Rasmus", "Mathias Berglund", "Mikko Honkala", "Harri Valpola", "Tapani Raiko"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Rasmus et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Rasmus et al\\.", "year": 2015}, {"title": "Variational inference with normalizing flows", "author": ["Danilo Rezende", "Shakir Mohamed"], "venue": "In Proceedings of the 32nd International Conference on Machine Learning,", "citeRegEx": "Rezende and Mohamed.,? \\Q2015\\E", "shortCiteRegEx": "Rezende and Mohamed.", "year": 2015}, {"title": "Stochastic backpropagation and approximate inference in deep generative models", "author": ["Danilo J. Rezende", "Shakir Mohamed", "Daan Wierstra"], "venue": "In Proceedings of The 31st International Conference on Machine Learning,", "citeRegEx": "Rezende et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Rezende et al\\.", "year": 2014}, {"title": "Deep Boltzmann machines", "author": ["Ruslan Salakhutdinov", "Geoffrey E. Hinton"], "venue": "In Proceedings of the 12th International Conference on Artificial Intelligence and Statistics,", "citeRegEx": "Salakhutdinov and Hinton.,? \\Q2009\\E", "shortCiteRegEx": "Salakhutdinov and Hinton.", "year": 2009}, {"title": "On the quantitative analysis of deep belief networks", "author": ["Ruslan Salakhutdinov", "Iain Murray"], "venue": "In Proceedings of the 25th International Conference on Machine Learning,", "citeRegEx": "Salakhutdinov and Murray.,? \\Q2008\\E", "shortCiteRegEx": "Salakhutdinov and Murray.", "year": 2008}, {"title": "A structured variational auto-encoder for learning deep hierarchies of sparse features", "author": ["Tim Salimans"], "venue": "arXiv preprint arXiv:1602.08734,", "citeRegEx": "Salimans.,? \\Q2016\\E", "shortCiteRegEx": "Salimans.", "year": 2016}, {"title": "Markov chain Monte Carlo and variational inference: Bridging the gap", "author": ["Tim Salimans", "Diederik P. Kingma", "Max Welling"], "venue": "In Proceedings of the 32nd International Conference on Machine Learning,", "citeRegEx": "Salimans et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Salimans et al\\.", "year": 2015}, {"title": "Statistically optimal analysis of samples from multiple equilibrium states", "author": ["Michael R. Shirts", "John D. Chodera"], "venue": "The Journal of Chemical Physics,", "citeRegEx": "Shirts and Chodera.,? \\Q2008\\E", "shortCiteRegEx": "Shirts and Chodera.", "year": 2008}, {"title": "Information processing in dynamical systems: Foundations of harmony theory", "author": ["Paul Smolensky"], "venue": "Parallel Distributed Processing,", "citeRegEx": "Smolensky.,? \\Q1986\\E", "shortCiteRegEx": "Smolensky.", "year": 1986}, {"title": "Ladder variational autoencoders", "author": ["Casper Kaae S\u00f8nderby", "Tapani Raiko", "Lars Maal\u00f8e", "S\u00f8ren Kaae S\u00f8nderby", "Ole Winther"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "S\u00f8nderby et al\\.,? \\Q2016\\E", "shortCiteRegEx": "S\u00f8nderby et al\\.", "year": 2016}, {"title": "Sequential updating of conditional probabilities on directed graphical structures", "author": ["David J. Spiegelhalter", "Steffen L. Lauritzen"], "venue": null, "citeRegEx": "Spiegelhalter and Lauritzen.,? \\Q1990\\E", "shortCiteRegEx": "Spiegelhalter and Lauritzen.", "year": 1990}, {"title": "Dropout: A simple way to prevent neural networks from overfitting", "author": ["Nitish Srivastava", "Geoffrey E. Hinton", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Srivastava et al\\.,? \\Q1929\\E", "shortCiteRegEx": "Srivastava et al\\.", "year": 1929}, {"title": "Replica Monte Carlo simulation of spin-glasses", "author": ["Robert H. Swendsen", "Jian-Sheng Wang"], "venue": "Physical Review Letters,", "citeRegEx": "Swendsen and Wang.,? \\Q1986\\E", "shortCiteRegEx": "Swendsen and Wang.", "year": 1986}, {"title": "Training restricted Boltzmann machines using approximations to the likelihood gradient", "author": ["Tijmen Tieleman"], "venue": "In Proceedings of the 25th International Conference on Machine Learning,", "citeRegEx": "Tieleman.,? \\Q2008\\E", "shortCiteRegEx": "Tieleman.", "year": 2008}, {"title": "The variational Gaussian process", "author": ["Dustin Tran", "Rajesh Ranganath", "David M. Blei"], "venue": "Proceedings of the International Conference on Learning Representations,", "citeRegEx": "Tran et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Tran et al\\.", "year": 2016}, {"title": "Simple statistical gradient-following algorithms for connectionist reinforcement learning", "author": ["Ronald J. Williams"], "venue": "Machine learning,", "citeRegEx": "Williams.,? \\Q1992\\E", "shortCiteRegEx": "Williams.", "year": 1992}, {"title": "2015); and the variational Gaussian process (Tran et al., 2016). On Omniglot, we compare to the importance-weighted autoencoder (IWAE; Burda et al., 2016); ladder variational autoencoder (Ladder VAE; S\u00f8nderby et al., 2016); and the restricted Boltzmann machine (RBM; Smolensky, 1986) and deep belief network (DBN", "author": ["Rezende", "Mohamed"], "venue": null, "citeRegEx": "Rezende and Mohamed,? \\Q2006\\E", "shortCiteRegEx": "Rezende and Mohamed", "year": 2006}, {"title": "Silhouettes, we compare to the importance-weighted autoencoder (IWAE; Burda et al., 2016), reporting the results of Li & Turner (2016); reweighted wake-sleep with a deep sigmoid belief network (RWS SBN; Bornschein & Bengio, 2015); the restricted Boltzmann machine (RBM; Smolensky, 1986), reporting the results", "author": ["Burda"], "venue": null, "citeRegEx": "Burda,? \\Q2013\\E", "shortCiteRegEx": "Burda", "year": 2013}], "referenceMentions": [{"referenceID": 18, "context": "Unsupervised learning of probabilistic models is a powerful technique, facilitating tasks such as denoising and inpainting, and regularizing supervised tasks such as classification (Hinton et al., 2006; Salakhutdinov & Hinton, 2009; Rasmus et al., 2015).", "startOffset": 181, "endOffset": 253}, {"referenceID": 41, "context": "Unsupervised learning of probabilistic models is a powerful technique, facilitating tasks such as denoising and inpainting, and regularizing supervised tasks such as classification (Hinton et al., 2006; Salakhutdinov & Hinton, 2009; Rasmus et al., 2015).", "startOffset": 181, "endOffset": 253}, {"referenceID": 4, "context": "In contrast, most stateof-the-art probabilistic models use exclusively discrete variables \u2014 as do DBMs (Salakhutdinov & Hinton, 2009), NADEs (Larochelle & Murray, 2011), sigmoid belief networks (Spiegelhalter & Lauritzen, 1990; Bornschein et al., 2016), and DARNs (Gregor et al.", "startOffset": 194, "endOffset": 252}, {"referenceID": 16, "context": ", 2016), and DARNs (Gregor et al., 2014) \u2014 or exclusively continuous variables \u2014 as do VAEs (Kingma & Welling, 2014; Rezende et al.", "startOffset": 19, "endOffset": 40}, {"referenceID": 43, "context": ", 2014) \u2014 or exclusively continuous variables \u2014 as do VAEs (Kingma & Welling, 2014; Rezende et al., 2014) and GANs (Goodfellow et al.", "startOffset": 59, "endOffset": 105}, {"referenceID": 1, "context": "1 Moreover, it would be desirable to apply the efficient variational autoencoder framework to models with discrete values, but this has proven difficult, since backpropagation through discrete variables is generally not possible (Bengio et al., 2013; Raiko et al., 2015).", "startOffset": 229, "endOffset": 270}, {"referenceID": 40, "context": "1 Moreover, it would be desirable to apply the efficient variational autoencoder framework to models with discrete values, but this has proven difficult, since backpropagation through discrete variables is generally not possible (Bengio et al., 2013; Raiko et al., 2015).", "startOffset": 229, "endOffset": 270}, {"referenceID": 11, "context": "(1)Spike-and-slab RBMs (Courville et al., 2011) use both discrete and continuous latent variables.", "startOffset": 23, "endOffset": 47}, {"referenceID": 22, "context": "In contrast to the exact log-likelihood, it can be computationally efficient to optimize a lower bound on the log-likelihood (Jordan et al., 1999), such as the evidence lower bound (ELBO, L(x, \u03b8, \u03c6); Hinton & Zemel, 1994): L(x, \u03b8, \u03c6) = log p(x|\u03b8)\u2212 KL[q(z|x, \u03c6)||p(z|x, \u03b8)], (1) where q(z|x, \u03c6) is a computationally tractable approximation to the posterior distribution p(z|x, \u03b8).", "startOffset": 125, "endOffset": 146}, {"referenceID": 43, "context": "The variational autoencoder (VAE; Kingma & Welling, 2014; Rezende et al., 2014; Kingma et al., 2014) regroups the evidence lower bound of Equation 1 as: L(x, \u03b8, \u03c6) = \u2212KL [q(z|x, \u03c6)||p(z|\u03b8)] } {{ } KL term +Eq [log p(x|z, \u03b8)] } {{ } autoencoding term .", "startOffset": 28, "endOffset": 100}, {"referenceID": 24, "context": "The variational autoencoder (VAE; Kingma & Welling, 2014; Rezende et al., 2014; Kingma et al., 2014) regroups the evidence lower bound of Equation 1 as: L(x, \u03b8, \u03c6) = \u2212KL [q(z|x, \u03c6)||p(z|\u03b8)] } {{ } KL term +Eq [log p(x|z, \u03b8)] } {{ } autoencoding term .", "startOffset": 28, "endOffset": 100}, {"referenceID": 49, "context": "A formulation comparable to Equation 3 is not possible for discrete distributions, such as restricted Boltzmann machines (RBMs) (Smolensky, 1986):", "startOffset": 128, "endOffset": 145}, {"referenceID": 7, "context": "Importance weighted autoencoders (Burda et al., 2016), Hamiltonian variational inference (Salimans et al.", "startOffset": 33, "endOffset": 53}, {"referenceID": 47, "context": ", 2016), Hamiltonian variational inference (Salimans et al., 2015), normalizing flows (Rezende & Mohamed, 2015), and variational Gaussian processes (Tran et al.", "startOffset": 43, "endOffset": 66}, {"referenceID": 55, "context": ", 2015), normalizing flows (Rezende & Mohamed, 2015), and variational Gaussian processes (Tran et al., 2016) improve the approximation to the posterior distribution.", "startOffset": 89, "endOffset": 108}, {"referenceID": 50, "context": "Ladder variational autoencoders (S\u00f8nderby et al., 2016) increase the power of the architecture of both approximating posterior and prior.", "startOffset": 32, "endOffset": 55}, {"referenceID": 13, "context": "Neural adaptive importance sampling (Du et al., 2015) and reweighted wake-sleep (Bornschein & Bengio, 2015) use sophisticated approximations to the gradient of the log-likelihood that do not admit direct backpropagation.", "startOffset": 36, "endOffset": 53}, {"referenceID": 21, "context": "Structured variational autoencoders use conjugate priors to construct powerful approximating posterior distributions (Johnson et al., 2016).", "startOffset": 117, "endOffset": 139}, {"referenceID": 37, "context": "Unfortunately, this naive estimate is impractically high-variance, leading to slow training and poor performance (Paisley et al., 2012).", "startOffset": 113, "endOffset": 135}, {"referenceID": 56, "context": "The variance of the gradient can be reduced somewhat using the baseline technique, originally called REINFORCE in the reinforcement learning literature (Mnih & Gregor, 2014; Williams, 1992; Mnih & Rezende, 2016), which we discuss in greater detail in Appendix B.", "startOffset": 152, "endOffset": 211}, {"referenceID": 46, "context": "Rectified Gaussian units allow spike-and-slab sparsity in a VAE, but the discrete variables are also implicit, and their prior factorial and thus unimodal (Salimans, 2016).", "startOffset": 155, "endOffset": 171}, {"referenceID": 18, "context": "The generative model underlying the discrete variational autoencoder resembles a deep belief network (DBN; Hinton et al., 2006).", "startOffset": 101, "endOffset": 127}, {"referenceID": 38, "context": "When a probabilistic model is defined in terms of a prior distribution p(z) and a conditional distribution p(x|z), the observation of x often induces strong correlations in the posterior p(z|x) due to phenomena such as explaining-away (Pearl, 1988).", "startOffset": 235, "endOffset": 248}, {"referenceID": 16, "context": "If each group zj contains a single variable, this dependence structure is analogous to that of a deep autoregressive network (DARN; Gregor et al., 2014), and can represent any distribution.", "startOffset": 125, "endOffset": 152}, {"referenceID": 14, "context": "While these layers can be discrete, we focus on continuous variables, which have proven to be powerful in generative adversarial networks (Goodfellow et al., 2014) and traditional variational autoencoders (Kingma & Welling, 2014; Rezende et al.", "startOffset": 138, "endOffset": 163}, {"referenceID": 43, "context": ", 2014) and traditional variational autoencoders (Kingma & Welling, 2014; Rezende et al., 2014).", "startOffset": 49, "endOffset": 95}, {"referenceID": 17, "context": "prior, as in DRAW (Gregor et al., 2015), variational recurrent neural networks (Chung et al.", "startOffset": 18, "endOffset": 39}, {"referenceID": 10, "context": ", 2015), variational recurrent neural networks (Chung et al., 2015), the deep VAE of Salimans (2016), and ladder networks (Rasmus et al.", "startOffset": 47, "endOffset": 67}, {"referenceID": 41, "context": ", 2015), the deep VAE of Salimans (2016), and ladder networks (Rasmus et al., 2015; S\u00f8nderby et al., 2016).", "startOffset": 62, "endOffset": 106}, {"referenceID": 50, "context": ", 2015), the deep VAE of Salimans (2016), and ladder networks (Rasmus et al., 2015; S\u00f8nderby et al., 2016).", "startOffset": 62, "endOffset": 106}, {"referenceID": 43, "context": "Like NVIL (Mnih & Gregor, 2014) and VAEs (Kingma & Welling, 2014; Rezende et al., 2014), we define all approximating posteriors q to be explicit functions of x, with parameters \u03c6 shared between all inputs x.", "startOffset": 41, "endOffset": 87}, {"referenceID": 54, "context": "We stochastically approximate the expectation with respect to the RBM prior p(z|\u03b8) in Equation 11 using block Gibbs sampling on persistent Markov chains, analogous to persistent contrastive divergence (Tieleman, 2008).", "startOffset": 201, "endOffset": 217}, {"referenceID": 28, "context": "We train the resulting discrete VAEs on the permutation-invariant MNIST (LeCun et al., 1998), Omniglot8 (Lake et al.", "startOffset": 72, "endOffset": 92}, {"referenceID": 26, "context": ", 1998), Omniglot8 (Lake et al., 2013), and Caltech-101 Silhouettes datasets (Marlin et al.", "startOffset": 19, "endOffset": 38}, {"referenceID": 31, "context": ", 2013), and Caltech-101 Silhouettes datasets (Marlin et al., 2010).", "startOffset": 46, "endOffset": 67}, {"referenceID": 7, "context": "Estimates of the log-likelihood9 of these models, computed using the method of (Burda et al., 2016) with 10(4) importance-weighted samples, are listed in Table 1.", "startOffset": 79, "endOffset": 99}, {"referenceID": 7, "context": "For the discrete VAE, the reported log-likelihood is estimated with 10(4) importance-weighted samples (Burda et al., 2016).", "startOffset": 102, "endOffset": 122}, {"referenceID": 1, "context": "However, it is difficult to train probabilistic models over discrete latent variables using efficient gradient approximations based upon backpropagation, such as variational autoencoders, since it is generally not possible to backpropagate through a discrete variable (Bengio et al., 2013).", "startOffset": 268, "endOffset": 289}, {"referenceID": 37, "context": "Unfortunately, this naive estimate is impractically high-variance, leading to slow training and poor performance (Paisley et al., 2012).", "startOffset": 113, "endOffset": 135}, {"referenceID": 56, "context": "The variance of the gradient can be reduced somewhat using the baseline technique, originally called REINFORCE in the reinforcement learning literature (Mnih & Gregor, 2014; Williams, 1992; Bengio et al., 2013; Mnih & Rezende, 2016): \u2202 \u2202\u03c6 Eq(z|x,\u03c6) [log p(x|z, \u03b8)] = Eq(z|x,\u03c6) [ [log p(x|z, \u03b8)\u2212B(x)] \u00b7 \u2202 \u2202\u03c6 log q(z|x, \u03c6) ]", "startOffset": 152, "endOffset": 232}, {"referenceID": 1, "context": "The variance of the gradient can be reduced somewhat using the baseline technique, originally called REINFORCE in the reinforcement learning literature (Mnih & Gregor, 2014; Williams, 1992; Bengio et al., 2013; Mnih & Rezende, 2016): \u2202 \u2202\u03c6 Eq(z|x,\u03c6) [log p(x|z, \u03b8)] = Eq(z|x,\u03c6) [ [log p(x|z, \u03b8)\u2212B(x)] \u00b7 \u2202 \u2202\u03c6 log q(z|x, \u03c6) ]", "startOffset": 152, "endOffset": 232}, {"referenceID": 11, "context": "We can also use the spike-and-slab transformation, which is consistent with sparse coding and proven in other successful generative models (Courville et al., 2011):", "startOffset": 139, "endOffset": 163}, {"referenceID": 8, "context": "We can change the order of integration (via the expectation) and differentiation since |Wijzizj | \u2264Wij <\u221e for all \u03c1 and bounded \u03c6 (Cheng, 2006).", "startOffset": 130, "endOffset": 143}, {"referenceID": 39, "context": "We use warm-up with strength 20 for 5 epochs, and additional warm-up of strength 2 on the RBM alone for 20 epochs (Raiko et al., 2007; Bowman et al., 2016; S\u00f8nderby et al., 2016).", "startOffset": 114, "endOffset": 178}, {"referenceID": 5, "context": "We use warm-up with strength 20 for 5 epochs, and additional warm-up of strength 2 on the RBM alone for 20 epochs (Raiko et al., 2007; Bowman et al., 2016; S\u00f8nderby et al., 2016).", "startOffset": 114, "endOffset": 178}, {"referenceID": 50, "context": "We use warm-up with strength 20 for 5 epochs, and additional warm-up of strength 2 on the RBM alone for 20 epochs (Raiko et al., 2007; Bowman et al., 2016; S\u00f8nderby et al., 2016).", "startOffset": 114, "endOffset": 178}, {"referenceID": 2, "context": "For this purpose, we estimate the log partition function using bridge sampling, a variant of Bennett\u2019s acceptance ratio method (Bennett, 1976; Shirts & Chodera, 2008), which produces unbiased estimates of the partition function.", "startOffset": 127, "endOffset": 166}, {"referenceID": 18, "context": "For dynamically binarized MNIST, we compare to deep belief networks (DBN; Hinton et al., 2006), reporting the results of Murray & Salakhutdinov (2009); importanceweighted autoencoders (IWAE; Burda et al.", "startOffset": 68, "endOffset": 94}, {"referenceID": 7, "context": ", 2006), reporting the results of Murray & Salakhutdinov (2009); importanceweighted autoencoders (IWAE; Burda et al., 2016); and ladder variational autoencoders (Ladder VAE; S\u00f8nderby et al.", "startOffset": 97, "endOffset": 123}, {"referenceID": 50, "context": ", 2016); and ladder variational autoencoders (Ladder VAE; S\u00f8nderby et al., 2016).", "startOffset": 45, "endOffset": 80}, {"referenceID": 47, "context": "For the static MNIST binarization of (Salakhutdinov & Murray, 2008), we compare to Hamiltonian variational inference (HVI; Salimans et al., 2015); the deep recurrent attentive writer (DRAW; Gregor et al.", "startOffset": 117, "endOffset": 145}, {"referenceID": 17, "context": ", 2015); the deep recurrent attentive writer (DRAW; Gregor et al., 2015); the neural adaptive importance sampler with neural autoregressive distribution estimator (NAIS NADE; Du et al.", "startOffset": 45, "endOffset": 72}, {"referenceID": 13, "context": ", 2015); the neural adaptive importance sampler with neural autoregressive distribution estimator (NAIS NADE; Du et al., 2015); deep latent Gaussian models with normalizing flows (Normalizing flows; Rezende & Mohamed, 2015); and the variational Gaussian process (Tran et al.", "startOffset": 98, "endOffset": 126}, {"referenceID": 55, "context": ", 2015); deep latent Gaussian models with normalizing flows (Normalizing flows; Rezende & Mohamed, 2015); and the variational Gaussian process (Tran et al., 2016).", "startOffset": 143, "endOffset": 162}, {"referenceID": 7, "context": "On Omniglot, we compare to the importance-weighted autoencoder (IWAE; Burda et al., 2016); ladder variational autoencoder (Ladder VAE; S\u00f8nderby et al.", "startOffset": 63, "endOffset": 89}, {"referenceID": 50, "context": ", 2016); ladder variational autoencoder (Ladder VAE; S\u00f8nderby et al., 2016); and the restricted Boltzmann machine (RBM; Smolensky, 1986) and deep belief network (DBN; Hinton et al.", "startOffset": 40, "endOffset": 75}, {"referenceID": 49, "context": ", 2016); and the restricted Boltzmann machine (RBM; Smolensky, 1986) and deep belief network (DBN; Hinton et al.", "startOffset": 46, "endOffset": 68}, {"referenceID": 18, "context": ", 2016); and the restricted Boltzmann machine (RBM; Smolensky, 1986) and deep belief network (DBN; Hinton et al., 2006), reporting the results of Burda et al.", "startOffset": 93, "endOffset": 119}, {"referenceID": 7, "context": "Finally, for Caltech-101 Silhouettes, we compare to the importance-weighted autoencoder (IWAE; Burda et al., 2016), reporting the results of Li & Turner (2016); reweighted wake-sleep with a deep sigmoid belief network (RWS SBN; Bornschein & Bengio, 2015); the restricted Boltzmann machine (RBM; Smolensky, 1986), reporting the results of Cho et al.", "startOffset": 88, "endOffset": 114}, {"referenceID": 49, "context": ", 2016), reporting the results of Li & Turner (2016); reweighted wake-sleep with a deep sigmoid belief network (RWS SBN; Bornschein & Bengio, 2015); the restricted Boltzmann machine (RBM; Smolensky, 1986), reporting the results of Cho et al.", "startOffset": 182, "endOffset": 204}, {"referenceID": 13, "context": "(2013); and the neural adaptive importance sampler with neural autoregressive distribution estimator (NAIS NADE; Du et al., 2015).", "startOffset": 101, "endOffset": 129}, {"referenceID": 35, "context": "Next, we further restrict the neural network defining the distribution over the observed variables x given the smoothing variables \u03b6 to consist of a linear transformation followed by a pointwise logistic nonlinearity, analogous to a sigmoid belief network (SBN; Spiegelhalter & Lauritzen, 1990; Neal, 1992).", "startOffset": 256, "endOffset": 306}, {"referenceID": 7, "context": "In all cases, we report the negative log-likelihood on statically binarized MNIST (Salakhutdinov & Murray, 2008), estimated with 10(4) importance weighted samples (Burda et al., 2016).", "startOffset": 163, "endOffset": 183}], "year": 2017, "abstractText": "Probabilistic models with discrete latent variables naturally capture datasets composed of discrete classes. However, they are difficult to train efficiently, since backpropagation through discrete variables is generally not possible. We present a novel method to train a class of probabilistic models with discrete latent variables using the variational autoencoder framework, including backpropagation through the discrete latent variables. The associated class of probabilistic models comprises an undirected discrete component and a directed hierarchical continuous component. The discrete component captures the distribution over the disconnected smooth manifolds induced by the continuous component. As a result, this class of models efficiently learns both the class of objects in an image, and their specific realization in pixels, from unsupervised data; and outperforms state-ofthe-art methods on the permutation-invariant MNIST, Omniglot, and Caltech-101 Silhouettes datasets.", "creator": "TeX"}, "id": "ICLR_2017_172"}