{"name": "ICLR_2017_174.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Jiaqi Mu", "Suma Bhat", "Pramod Viswanath"], "emails": ["jiaqimu2@illinois.edu", "spbhat2@illinois.edu", "pramodv@illinois.edu"], "sections": [{"heading": "1 INTRODUCTION", "text": "Distributed representations are embeddings of words in a real vector space, achieved via an appropriate function that models the interaction between neighboring words in sentences (e.g.: neural networks (Bengio et al., 2003; Mikolov et al., 2010; Huang et al., 2012), log-bilinear models (Mnih & Hinton, 2007; Mikolov et al., 2013), co-occurrence statistics (Pennington et al., 2014; Levy & Goldberg, 2014)). Such an approach has been strikingly successful in capturing the (syntactic and semantic) similarity between words (and pairs of words), via simple linear algebraic relations between their corresponding vector representations. On the other hand, the polysemous nature of words, i.e., the phenomenon of the same surface form representing multiple senses, is a central feature of the creative process embodying natural languages. For example, a large, tall machine used for moving heavy objects and a tall, long-legged, long-necked bird both share the same surface form \u201ccrane\u201d. A vast majority of words, especially frequent ones, are polysemous, with each word taking on anywhere from two to a dozen different senses in many natural languages. For instance, WordNet collects 26,896 polysemous English words with an average of 4.77 senses each (Miller, 1995). Naturally, a single vector embedding does not appropriately represent a polysemous word.\nThere are currently two approaches to address the polysemy issue (a detailed discussion is in Appendix A): (a) sense specific representation learning (Chen et al., 2014; Rothe & Schu\u0308tze, 2015), usually aided by hand-crafted lexical resources such as WordNet (Miller, 1995); (b) unsupervised sense induction and sense/lexeme representation learning by inferring the senses directly from text (Huang et al., 2012; Neelakantan et al., 2015; Li & Jurafsky, 2015; Arora et al., 2016b).\nSince hand-crafted lexical resources sometimes do not reflect the actual meaning of a target word in a given context (Ve\u0301ronis, 2004) and, more importantly, such resources are lacking in many languages (and their creation draws upon intensive expert human resources), we focus on the second approach\nin this paper; such an approach is inherently scalable and potentially plausible with the right set of ideas. Indeed, a human expects the contexts to cue in on the particular sense of a specific word, and successful unsupervised sense representation and sense extraction algorithms would represent progress in the broader area of representation of natural language. Such are the goals of this work.\nFirth\u2019s hypothesis \u2013 a word is characterized by the company it keeps (Firth, 1957) \u2013 has motivated the development of single embeddings for words, but also suggests that multiple senses for a target word could be inferred from its contexts (neighboring words within the sentence). This task is naturally broken into three related questions: (a) how to represent contexts (neighboring words of the target word); (b) how to induce word senses (partition instances of contexts into groups where the target word is used in the same sense within each group) and (c) how to represent lexemes (word and sense pairs) by vectors.\nExisting works address these questions by exploring the latent structure of contexts. In an inspired work, Arora et al. (2016b) hypothesize that the global word representation is a linear combination of its sense representations, models the contexts by a finite number of discourse atoms, and recovers the sense representations via sparse coding of all the vectors of the vocabulary (a global fit). Other works perform a local context-specific sense induction: Li & Jurafsky (2015) introduce a sense-based language model to disambiguate word senses and to learn lexeme representations by incorporating the Chinese restaurant process, Reisinger & Mooney (2010) and Huang et al. (2012) label the word senses by clustering the contexts based on the average of the context word embeddings and learn lexeme representations using the labeled corpus. Neelakantan et al. (2015) retain the representation of contexts by the average of the word vectors, but improves the previous approach by jointly learning the lexeme vectors and the cluster centroids in one shot.\nGrassmannian Model: We depart from the linear latent models in these prior works by presenting a nonlinear (Grassmannian) geometric property of contexts. We empirically observe and hypothesize that the context word representations surrounding a target word reside roughly in a low dimensional subspace. Under this hypothesis, a specific sense representation for a target word should reside in all the subspaces of the contexts where the word means this sense. Note that these subspaces need not cluster at all: a word such as \u201claunch\u201d in the sense of \u201cbeginning or initiating a new endeavor\u201d could be used in a large variety of contexts. Nevertheless, our hypothesis that large semantic units (such as sentences) reside in low dimensional subspaces implies that the subspaces of all contexts where the target word shares the same meaning should intersect non-trivially. This further implies that there exists a direction (one dimensional subspace) that is very close to all subspaces and we treat such an intersection vector as the representation of a group of subspaces. Following this intuition, we propose a three-fold approach to deal with the three central questions posed above:\n\u2022 Context Representation: we define the context for a target word to be a set of left W and right W non-functional words of the target word (W \u2248 10 in our experiments), including the target word itself, and represent it by a low-dimensional subspace spanned by its context word representations;\n\u2022 Sense Induction and Disambiguation: we induce word senses from their contexts by partitioning multiple context instances into groups, where the target word has the same sense within each group. Each group is associated with a representation \u2013 the intersection direction \u2013 found viaK-Grassmeans, a novel clustering method that harnesses the geometry of subspaces. Finally, we disambiguate word senses for new context instances using the respecive group representations;\n\u2022 Lexeme Representation: the lexeme representations can be obtained by running an offthe-shelf word embedding algorithm on a labeled corpus. We label the corpus through hard decisions (involving erasure labels) and soft decisions (probabilistic labels), motivated by analogous successful approaches to decoding of turbo and low density parity check codes (LDPC).\nExperiments: The lexical aspect of our algorithm (i.e., senses can be induced and disambiguated individually for each word) as well as the novel geometry (subspace intersection vectors) jointly allow us to capture subtle shades of senses. For instance, in \u201cCan you hear me? You\u2019re on the air. One of the great moments of live television, isn\u2019t it?\u201d, our representation is able to capture the occurrence of \u201cair\u201d to mean \u201clive event on camera\u201d. In contrast, with a global fit such as that in\n(Arora et al., 2016b) the senses are inherently limited in the number and type of \u201cdiscourse atoms\u201d that can be captured.\nAs a quantitative demonstration of the latent geometry captured by our methods, we evaluate the proposed induction algorithm on standard Word Sense Induction (WSI) tasks. Our algorithm outperforms state-of-the-art on two datasets: (a) SemEval-2010 Task 14 (Manandhar et al., 2010) whose word senses are obtained from OntoNotes (Hovy et al., 2006); and (b) a custom-built dataset built by repurposing the polysemous dataset of (Arora et al., 2016b). In terms of lexeme vector embeddings, our representations have evaluations comparable to state-of-the-art on standard tasks \u2013 the word similarity task of SCWS (Huang et al., 2012) \u2013 and significantly better on a subset of the SCWS dataset which focuses on polysemous target words and the \u201cpolice lineup\u201d task of (Arora et al., 2016b). A detailed study of the experiments and quantitative results can be found in Section 3."}, {"heading": "2 OUR APPROACH", "text": "We propose a three-fold approach that includes: (a) context representation, (b) word sense induction and disambiguation, and (c) lexeme representation."}, {"heading": "2.1 CONTEXT REPRESENTATION", "text": "Contexts refer to entire sentences or (long enough) consecutive blocks of words in sentences surrounding a target word. Efficient distributed vector representations for sentences and paragraphs are active topics of research in the literature ((Le & Mikolov, 2014; Tai et al., 2015)), with much emphasis on appropriately relating the individual word embeddings with those of the sentences (and paragraphs) they reside in. The scenario of contexts studied here is similar in the sense that they constitute long semantic units similar to sentences, but different in that we are considering semantic units that all have a common target word residing inside them. Instead of a straightforward application of existing literature on sentence (and paragraph) vector embeddings to our setting, we deviate and propose a non-vector space representation; such a representation is central to the results of this paper and is best motivated by the following simple experiment.\nIn this paper, we represent a context c (as a multiset of words) by a point in the Grassmannian manifold \u2013 a subspace (denoted by S(c)) spanned by its top N principle components (denoted by {un(c)}Nn=1). Such representation is motivated by a subspace hypothesis (its empirical validation is given in Appendix B) that the context word representations surrounding a target word reside roughly in a low dimensional subspace. A detailed algorithm chart for context representations is provided in Appendix J, for completeness."}, {"heading": "2.2 SENSE INDUCTION AND DISAMBIGUATION", "text": "We now turn to sense induction, a basic task that explores polysemy: in this task, a set of sentences (each containing a common target word) have to be partitioned such that the target word is used in the same sense in all the sentences within each partition. The number of partitions relates to the number of senses being identified for the target word. The geometry of the subset representations plays a key role in our algorithm and we start with this next.\nGeometry of Polysemy Consider a target monosemous word w and a context sentence c containing this word w. The empirical experiment from the previous section allows us to represent c by a N -dimensional subspace of the vectors of the words in c. Since N (3\u223c5 in our experiments) is much smaller than the number of words in c (21, on average), one suspects that the representation associated with c wouldn\u2019t change very much if the target word w were expurgated from it, i.e., S(c) \u2248 S(c \\ w). Putting these two observations together, one arrives at the following hypothesis, in the context of monosemous target words:\nIntersection Hypothesis: the target word vector v(w) should reside in the intersection of S(c \\ w), where the intersection is over all its contexts c.\nWe propose an algorithmic approach to robustly discover the intersection direction involves finding that direction vector that is \u201cclosest\u201d to all subspaces; we propose doing so by solving the following\noptimization problem:\nu\u0302(w) = arg min \u2016u\u2016=1 \u2211 w\u2208c d(u, S(c \\ w))2, d(u, S) = \u221a\u221a\u221a\u221a\u2016u\u20162 \u2212 N\u2211 n=1 (uTun) 2 , (1)\nwhere d(v, S) is the shortest `2-distance between u and subspace S, and u1, . . . , uN areN orthonormal basis vectors for subspace S. It is worth mentioning that we chose d(\u00b7, \u00b7) as an `2-distance for simplicity and there are alternative metrics. Specifically, such metric gives an closed form solution,\nu\u0302(w) = arg max \u2016u\u2016=1 \u2211 w\u2208c N\u2211 n=1 ( uTun(c \\ w) )2 , (2)\nwhich can be solved by taking the first principle component of {un(c \\ w)}w\u2208c,n=1,...,N . The property that context subspaces of a monosemous word intersect at one direction naturally generalizes to polysemy:\nPolysemy Intersection Hypothesis: the context subspaces of a polysemous word intersect at different directions for different senses.\nA detailed study on validating the hypotheses and the corresponding visualization can be found in Appendix C and Appendix D.\nSense Induction We can use the representation of senses by the intersection directions of context subspaces for unsupervised sense induction: supposing the target polysemous word that has K senses (known ahead of time for now), the goal is to partition the contexts associated with this target word into K groups within each of which the target polysemous word shares the same sense. The fact that two groups of context subspaces, corresponding to different senses, intersect at different directions motivates our geometric algorithm: we note that each one of the contexts belongs to a group associated by the nearest intersection direction which serves as a prototype of the group. Part of the task is also to identify the most appropriate intersection direction vectors associated with each group. This task represents a form of unsupervised clustering which can be formalized as the optimization problem below.\nGiven a target polysemous word w, M contexts c1, ..., cM containing w and a number K indicating the number of senses w has, we would like to partition the M contexts into K sets S1, ..., SK so as to minimize the distance d(\u00b7, \u00b7) of each subspace to the intersection direction of its group,\nmin u1,...,uK ,S1,...,SK K\u2211 k=1 \u2211 c\u2208Sk d2(uk, S(c \\ w)). (3)\nThis problem (3) is analogous to the objective of K-means clustering for vectors and solving it exactly in the worst case can be shown to be NP-hard. We propose a natural algorithm by repurposing traditional K-means clustering built for vector spaces to the Grassmannian space (a detailed algorithm chart is provided in Appendix K). The difference between K-Grassmeans and K-means lies in the maximization step:\n\u2022 Initialization: we randomly initialize K unit-length vectors u1, ..., uK . \u2022 Expectation: we group contexts based on the distance to each intersection direction:\nSk \u2190 {cm :d(uk, S(cm \\ w)) \u2264 d(uk\u2032 , S(cm \\ w)) \u2200k\u2032},\u2200 k.\n\u2022 Maximization: we update the intersection direction for each group with the contexts in the group.\nuk \u2190 argmin u \u2211 c\u2208Sk d2(u, S(c \\ w)).\nNote that our algorithm can be run for any one specific target word, and makes for efficient online sense induction; this is relevant in information retrieval applications where the sense of the query\nwords may need to be found in real time. To get a qualitative feel for how good K-Grassmeans is for the sense induction task, we run the following synthetic experiment: we randomly pick K monosemous words, merge their surface forms to create a single artificial polsemous word, collect all the contexts corresponding to the K monosemous words, replace every occurrence of the K monosemous words by the single artificial polysemous word. Then we run the K-Grassmeans algorithm on these contexts with the artificial polysemous word as the target word, so as to recover their original labels (which are known ahead of time, since we merged known monosemous words together to create the artificial polysemous word). Figure 1(a) shows the clustering performances on a realization of the artificial polysemous word made of \u201cmonastery\u201d and \u201cphd\u201d (here K = 2) and Figure 1(b))shows the clustering performance when K = 5 monosemous words \u201cemployers\u201d, \u201cexiled\u201d, \u201cgrossed\u201d, \u201cincredible\u201d and \u201cunreleased\u201d are merged together. We repeat the experiment over 1,00 trials with K varying from 2\u223c8 and the accuracy of sense induction is reported in Figure 1(c). Compared to the baseline algorithm proposed in (Huang et al., 2012; Neelakantan et al., 2015), K-Grassmean on subspaces outperforms K-means on average word vectors by 5-6%. We also provide a qualitative study of this algorithm on real data in Appendix E, where we study the semantics of each group for an example target word \u201ccolumbia\u201d. From these experiments we see that K-Grassmeans performs very well, qualitatively and quantitatively.\nA quantitative experiment on large and standardized real datasets (which involves real polysemous target words as opposed to synthetic ones), with a comparison with other algorithms in the literature, is detailed in Section 3, where we see that K-Grassmeans outperforms state-of-the-art.\nSense Disambiguation Having the intersection directions to represent the senses, we are ready to disambiguate a target word sense in a given context using the learned intersection directions specific to this target word: for a new context instance for a polysemous word, the goal is to identify which sense this word means in the context. Our approach is three-fold: represent the context by a low dimensional subspace S(c \\ w) approximation of the linear span of the word embeddings of nonfunctional words in the context, find the orthogonal projection distance between the intersection vector uk(w) and the context subspace, and finally output k\u2217 that minimizes the distance, i.e.,\nk\u2217 = argmin k d(uk(w), S(c \\ w)). (4)\nWe refer to (4) as a hard decoding of word senses since this outputs a deterministic label. At times, it makes sense to consider a soft decoding algorithm where the output is a probability distribution. The probability that w takes k-th sense given the context c is defined via,\nP (w, c, k) = exp(\u2212d(uk(w), S(c \\ w)))\u2211 k\u2032 exp(\u2212d(uk\u2032(w), S(c \\ w))) . (5)\nHere we calculate the probability as a monotonic function of the cosine distance between the intersection vector uk(w) and the context subspace S(c \\ w), inspired by similar heuristics in the literature (Huang et al., 2012). A qualitative study of (4) and (5) is again provided in Appendix E, where we apply (4) and (5) on the target word \u201ccolumbia\u201d and five sentences as its contexts."}, {"heading": "2.3 LEXEME REPRESENTATION", "text": "Induction and disambiguation are important tasks by themselves, but several downstream applicatons can use a distributed vector representation of the multiple senses associated with a target word. Just as with word representations, we expect the distributed lexeme representations to have semantic meanings \u2013 similar lexemes should be represented by similar vectors.\nIt seems natural to represent a lexeme sk(w) of a given word w by the intersection vector associated with the k-th sense group of w, i.e., uk(w). Such an idea is supported by an observation that the intersection vector is close to the word representation vector for many monosemous words (a detailed study of this observation is provided in Appendix F). Despite this empirical evidence, somewhat surprisingly, lexeme representation using the intersection vectors turns out to be not such a good idea, and the reason is fairly subtle. It turns out that the intersection vectors are concentrated on a relatively small surface area on the sphere (magnitudes are not available in the intersection vectors) \u2013 the cosine similarity between two random intersection vectors among 10,000 intersection vectors (five intersection vectors each for 2,000 polysemous words) is 0.889 on average with standard deviation 0.068. This is quite in contrast to analogous statistics for (global) word embeddings from the word2vec algorithm: the cosine similarity between two random word vectors is 0.134 on average with standard deviation 0.072. Indeed, word vector representations are known to be approximately uniformly scattered on the unit sphere (the so-called isotropy property, see (Arora et al., 2016a)). The intersection vectors cluster together far more and are quite far from being isotropic \u2013 yet they are still able to distinguish different senses as shown by the empirical studies and qualitative experiments on prototypical examples above (and also on standard datasets, as seen in Section 3).\nDue to this geometric mismatch between word vectors and intersection directions, and corresponding mismatch in linear algebraic properties expected of these distributed representations, it is not appropriate to use the intersection direction as the lexeme vector representation. In this light, we propose to learn the lexeme representations by an alternate (and more direct) procedure: first label the polysemous words in the corpus using the proposed disambiguation algorithm from Section 2.2 and then run a standard word embedding algorithm (we use word2vec) on this labeled corpus, yielding lexeme embeddings. There are several possibilities regarding labeling and are discussed next.\nHard Decodings We label the corpus using the disambiguation algorithm as in (4). A special label \u201cIDK\u201d representing \u201cI don\u2019t know\u201d is introduced to avoid introducing too many errors during the labeling phase since (a) our approach is based on the bag-of-words model and cannot guarantee to label every sense correctly; (for example, \u201carm\u201d in \u201cthe boat commander was also not allowed to resume his career in the Greek Navy due to his missing arm which was deemed a factor that could possibly raise enquiries regarding the mission which caused the trauma.\u201d will be labeled as \u201cweapon\u201d); and (b) we are not clear how such errors will affect existing word embedding algorithms.\nAn \u201cIDK\u201d label is introduced via checking the closest distance between the context subspace and the intersection directions, i.e., let uk\u2217(w) be the closest intersection vector of w to context c, we will label this instance as k\u2217 if d(uk\u2217(w), S(c \\ w)) < \u03b8 and \u201cIDK\u201d otherwise, where \u03b8 is a hyperparameter. A detailed algorithm chart for sense disambiguation and corpus labeling is provided in Appendix L. The \u201cIDK\u201d label includes instances of words that means a rare sense, (for example: \u201ccrane\u201d as in stretching the neck), or a confusing sense which requires disambiguation of context words (for example: \u201cbook\u201d and \u201cticket\u201d in \u201cbook a flight ticket\u201d). The IDK labeling procedure is inspired by analogous scenarios in reliable communication over noisy channels where the log likelihood ratio of (coded) bits is close to zero and in practice are better labeled as \u201cerasures\u201d, than treating them as informative for the overall decoding task (Cidon et al., 2012).\nSoft Decodings Another way of labeling is via using the absolute scores of K-Grassmeans disambiguation for each sense of a target work in a specific context, cf. Equation (5). Soft decoding involves generating a random corpus by sampling one sense for every occurrence of a polysemous word according to its probability distribution from (5). Then lexeme representations are obtained via an application of a standard word embedding algorithm (we use word2vec) on this (random) labeled corpus. Since we only consider words that are frequent enough (i.e., whose occurrence is larger than 10,000), each sense of a polysemous word is sampled enough times to allow a robust lexeme representation with high probability.\nSoft decoding benefits in two scenarios: (a) when a context has enough information for disambiguation (i.e., the probability distribution (5) concentrates on one), the random sampling will have a high chance making a correct decision. (b) otherwise (i.e., the probability distribution have more than one peak), the random sampling will have a chance of not making a wrong (irreversible) decision."}, {"heading": "3 EXPERIMENTS", "text": "Throughout this paper we have conducted multiple qualitative and empirical experiments to highlight and motivate the various geometric representations. In this section we evaluate our algorithms (on sense disambiguation method and sense representation) empirically on (standardized) datasets from the literature, allowing us to get a quantitative feel for the performance on large datasets, as well as afford a comparison with other algorithms from the literature.\nPreliminaries All our algorithms are unsupervised and operate on a large corpus obtained from Wikipedia dated 09/15. We use WikiExtractor (http://medialab.di.unipi.it/wiki/ Wikipedia_Extractor) to extract the plain text. We use the skip-gram model from word2vec Mikolov et al. (2013) as the word embedding algorithm where we use the default parameter setting. We set c = 10 as the context window size and set N = 3 as the rank of PCA. We choose K = 2 and K = 5 in our experiment. For the disambiguation algorithm, we set \u03b8 = 0.6.\nBaselines Our main comparisons are with algorithms that conduct unsupervised polysemy disambiguation, specifically the sense clustering method of (Huang et al., 2012), the multi-sense skip gram model (MSSG) of (Neelakantan et al., 2015) with different parameters, and the sparse coding method with a global dictionary of (Arora et al., 2016b). We were able to download the word and sense representations for (Huang et al., 2012; Neelakantan et al., 2015) online, and trained the word and sense representations of (Arora et al., 2016b) on the same corpus as that used by our algorithms."}, {"heading": "3.1 SENSE INDUCTION AND DISAMBIGUATION", "text": "Word sense induction (WSI) tasks conduct the following test: given a set of context instances containing a target word, one is asked to partition the context instances into groups such that within each group the target word shares the same sense. We testK-Grassmeans on two datasets \u2013 a standard one from the test set of SemEval-2010 (Manandhar et al., 2010) and a custom-built Make-Sense-2016. Appendix G gives a detailed description about the two datasets.\nWe evaluate the performance of the algorithms on this (disambiguation) task according to standard measures in the literature: V-Measure and paired F-Score; these two evaluation metrics also feature in the SemEval-2010 WSI task (Manandhar et al., 2010). V-measure is an entropy-based external cluster evaluation metric. Paired F-score evaluates clustering performance by converting the clustering problem into a binary classification problem \u2013 given two instances, do they belong to the same cluster or not? Both metrics operate on a contingency table A = {atk}, where atk is the number of instances that are manually labeled as t and algorithmically labeled as k. A detailed description is given in Appendix M for completeness. Both the metrics range from 0 to 1, and perfect clustering gives a score of 1. Empirical statistics show that V-Measure favors those with a larger number of cluster and paired F-score favors those with a smaller number of cluster.\nTable 1 shows the detailed results of our experiments where all algorithms use Wikipedia as the training set, and from where we see that K-Grassmeans strongly outperforms the others. For completeness, we adapt the same setting from SemEval-2010 by using the given training corpus and compare K-Grassmeans against the top reporting systems (i.e., UoY (Korkontzelos & Manandhar, 2010), Hermit (Jurgens & Stevens, 2010), Duluth-WSI (Pedersen, 2010)) in (Manandhar et al., 2010) using all four metrics in Table 2. From Table 2 we can see K-Grassmeans also strongly outperforms participating systems."}, {"heading": "3.2 LEXEME REPRESENTATION", "text": "The key requirement of lexeme representations should be that they have the same properties as word embeddings, i.e., similar lexemes (or monosemous words) should be represented by similar vectors. Hence we evaluate our lexeme representations on a standard word similarity task focusing on context-specific scenarios: the Stanford Contextual Word Similarities (SCWS) dataset (Huang et al., 2012). In addition to word similarity task on SCWS, we also evaluate our lexeme representations on the \u201cpolice lineup\u201d task proposed in (Arora et al., 2016b).\nWord Similarity on SCWS The task is as follows: given a pair of target words, the algorithm assigns a measure of similarities between this pair of words. The algorithm is evaluated by checking the degree of agreement between the similarity measure given by the algorithm and the similarity measure given by humans in terms of Spearman\u2019s rank correlation coefficient. Although this SCWS dataset is not meant specifically for polysemy, we repurpose it for our tasks since it asks for the similarity between two words in two given sentential contexts (the contexts presumably provide important clues to the human rater on the senses of the target words) and also because this is a large (involving 2,003 word pairs) and standard dataset in the literature with 10 human rated similarity scores, each rated on an integral scale from 1 to 10. We take the average of 10 human scores to represent the human judgment.\nWe propose two measures between w and w\u2032 given their respective contexts c and c\u2032 \u2013 one (denoted by HardSim) is based on the hard decoding algorithm and the other one (denoted by SoftSim) is based on the soft one. HardSim and SoftSim are defined via,\nHardSim(w,w\u2032, c, c\u2032) = d(vk(w), vk\u2032(w \u2032)),\nwhere k, and k\u2032 are the senses obtained via (4), vk(w) and vk\u2032(w) are the lexeme representations for the two senses, d(v, v\u2032) is the cosine similarity between two vectors v and v\u2032, i.e., (d(v, v\u2032) = vTv/\u2016v\u2016\u2016v\u2032\u2016), and\nSoftSim(w,w\u2032, c, c\u2032) = \u2211 k \u2211 k\u2032 P (w, c, k)P (w\u2032, c\u2032, k\u2032)d(vk(w), vk\u2032(w \u2032)),\nwhere P (w, c, k) is the probability that w takes k-th sense given the context c defined in (5).\nTable 3 shows the detailed results on this task. Here we conclude that in general our lexeme representations have a similar performance as the state-of-the-art on both soft and hard decisions. It is worth mentioning that the vanilla word2vec representation (which simply ignores the provided contexts) also has a comparable performance \u2013 this makes some sense since some of the words in SCWS are monosemous (and hence their meanings are context-dependent).\nTo separate out the effect of the combination of monosemous and polysemous words in the SCWS dataset, we expurgate monosemous words from the corpus creating a smaller version that we denoted\nby SCWS-lite. In SCWS-lite, we only consider the pairs of sentences where both target words in one pair have the same surface form but different contexts (and hence potentially different senses). SCWS-lite now contains 241 pairs of words, which is roughly 12% of the original dataset. The performances of the various algorithms are detailed in Table 3, from where we see that our representations (and corresponding algorithms) outperform the state-of-the-art and showcases the superior representational performance when it comes to context-specific polysemy disambiguation.\nPolice Lineup Task This task is proposed in Arora et al. (2016b) to evaluate the efficacy of their sense representations (via the vector representations of the discourse atoms). The testbed contains 200 polysemous words and their 704 senses, where each sense is defined by eight related words. For example, the \u201ctool/weapon\u201d sense of \u201caxes\u201d is represented by \u201chandle\u201d, \u201charvest\u201d, \u201ccutting\u201d, \u201csplit\u201d, \u201ctool\u201d, and \u201cwood\u201d, \u201cbattle\u201d, \u201cchop\u201d. The task is the following: given a polysemous word, the algorithm needs to identify the true senses of this word from a group of m senses (which includes many distractors) by outputting k senses from the group. The algorithm is evaluated by the corresponding precision and recall scores.\nThis task offers another opportunity to test our representations with the others in the literature, and also provide insight into some of those representations themselves. One possible algorithm is to simply use that proposed in Arora et al. (2016b) where we replace their sense representations with ours: Let sk(w) denote a sense of w, and let L denote the set of words representing a sense. We define a similarity score between a sense representation of w and a sense set from the m senses as,\nscore(sk(w), L) = \u221a\u2211 w\u2032\u2208L(vk(w) Tvw)2, and group two senses with highest scores with respect\nto sk(w) for each k, and then output the top k senses with highest scores. A detailed algorithm is provided in Appendix H, with a discussion of the potential variants.\nFigure 2 shows the precision and recall curve in the polysemy test where we let m = 20 and let k vary from 1 to 6. First, we observe that our representations are uniformly better over the precision-recall curve than the state of the art, although by a relatively small margin. Soft decoding performs slightly better than hard decoding over this task. Second, the surprising finding is that the\nbaseline we create using vanilla word2vec representations (precise details of this baseline algorithm are provided in Appendix H for completeness) performs as well as the state-of-the-art described in Arora et al. (2016b). A careful look shows that all algorithm outputs (word2vec, ours and those in Arora et al. (2016b)) are highly correlated \u2013 they all make correct calls on obvious instances and all make mistakes for confusing instances. We believe that this is because of the following: (a) the algorithm 1 in Arora et al. (2016b) is highly correlated with word2vec since their overall similarity measure uses a linear combination of the similarity measures associated with the sense (discourse atom) vector and the word vector (see Step 6 of Algorithm 1 in Arora et al. (2016b)); (b) word2vec embeddings appear to have an ability to capture two different senses of a polysemous word (as discussed earlier ); (c) the instances where the errors occur all seem to be either genuinely subtle or rare in the domain where embeddings were trained (for instance \u201cbat\u201d in the sense of fluttering eyelashes is rare in the Wikipedia corpus, and is one of the error instances)."}, {"heading": "4 CONCLUSION", "text": "In this paper, we study the geometry of contexts and polysemy and propose a three-fold approach (entitled K-Grassmeans) to model target polysemous words in an unsupervised fashion: (a) we represent a context (non-function words surrounding the target word) by a low rank subspace, (b) induce word senses by clustering the subspaces in terms of a distance to an intersection vector and (c) representing lexemes (as a word and sense pair) by labeling the corpus. Our representations are novel and involve nonlinear (Grassmannian) geometry of subspaces and the clustering algorithms are designed to harness this specific geometry. The overall performance of the method is evaluated quantitatively on standardized word sense induction and word similarity tasks and we present new state-of-the-art results. Several new avenues of research in natural language representations arise from the ideas in this work and we discuss a few items in Appendix I."}, {"heading": "A RELATED WORK", "text": "There are two main approaches to model polysemy: one is supervised and uses linguistic resoures (Chen et al., 2014; Rothe & Schu\u0308tze, 2015) and the other is unsupervised inferring senses directly from a large text corpus (Huang et al., 2012; Neelakantan et al., 2015; Li & Jurafsky, 2015; Arora et al., 2016b). Our approach belongs to the latter category.\nThere are differing approaches to harness hand-crafted lexical resources (such as WordNet): Chen et al. (2014) leverages a \u201cgloss\u201d as a definition for each lexeme, and uses this to model and disambiguate word senses. Rothe & Schu\u0308tze (2015) models sense and lexeme representations through the ontology of WordNet. While the approaches are natural and interesting, they are inherently limited due to (a) the coverage of WordNet: WordNet only covers 26k polysemous words, and the senses for polysemous words are not complete and are domain-agnostic (for example, the mathematical sense for \u201cring\u201d is missing in WordNet and a majority of occurrences of \u201cring\u201d mean exactly this sense in the Wikipedia corpus) and (b) the fine-grained nature of WordNet: WordNet senses appear at times too pedantic to be useful in practical downstream applications (for example, \u201cair\u201d in \u201cThis show will air Saturdays at 2 P.M.\u201d and \u201cair\u201d in \u201cWe cannot air this X-rated song\u201d are identified to have different meanings).\nThe unsupervised methods do not suffer from the idiosyncracies of linguistic resources, but are inherently more challenging to pursue since they only rely on the latent structures of the word senses embedded inside their contexts. Existing unsupervised approaches can be divided into two categories, based on what aspects of the contexts of target words are used: (a) global structures of contexts and (b) local structures of contexts.\nGlobal structure: Arora et al. (2016b) hypothesizes that the global word representation is a linear combination of its sense vectors. This linear algebraic hypothesis is validated by a surprising experiment wherein a single artificial polysemous word is created by merging two random words. The experiment is ingenious and the finding quite surprising but was under a restricted setting: a single artificial polysemous word is created by merging only two random words. Upon enlargening these parameters (i.e., many artificial polysemous words are created by merging multiple random words) to better suit the landscape of polysemy in natural language, We find the linear-algebraic hypothesis to be fragile: Figure 3 plots the linearity fit as a function of the number of artificial polysemous words created, and also as a function of how many words were merged to create any polysemous word. We see that the linearity fit worsens fairly quickly as the number of polysemous words increases, a scenario that is typical of natural languages.\nThe main reason for this effect appears to be that the linearity fit is quite sensitive to the interaction between the word vectors, caused by the polysemous nature of the words. The linear algebraic hypothesis is mathematically justified in Section 5 in Arora et al. (2016b) in terms of the RANDWALK generative model of Arora et al. (2016a) with three extra simplifications. If one were to generalize this proof to handle multiple artificial words at the same time, it appears particularly relevant that the simplification 2 should continue to hold. This simplification step involved the assumption that if w1, ..., wn be the random words being merged, then (a) wi and wj do not occur\ntogether in a context window for any i 6= j and (b) any other word \u03ba can only occur with a single one of thewi\u2019s in all context windows. This simplification step clearly no longer holds when n increases, and especially so when n nears the size of vocabulary. However, this latter scenario (of n being the size of the vocabulary) is the very basis of of the sparse-coding algorithm proposed in (Arora et al., 2016b) where the latent structure of the multiple senses is modeled as a corpus of discourse atoms where every atom interacts with all the others.\nThe experiment, whose results are depicted in Figure 3, is designed to mimic these underlying simplifications of the proof in Arora et al. (2016b): we train word vectors via the skip-gram version of word2vec using the following steps. (a) We initialize the newly generated artificial polysemous words by random vectors; (b) we initialize, and do not update the (two sets of), vector representations of other words \u03ba by the existing word vectors. The embeddings are learnt on the 2016/06/01 Wikipedia dump, tokenized via WikiExtractor (http://medialab.di.unipi. it/wiki/Wikipedia_Extractor); words that occur less than 1,000 times are ignored; words being merged are chosen randomly in proportion to their frequencies. Due to computational constraints, each instance of mergers is subjected to a single run of the word2vec algorithm.\nLocal structure: Huang et al. (2012); Neelakantan et al. (2015) model a context by the average of its constituent word embeddings and use this average vector as a feature to induce word senses by partitioning context instances into groups and to disambiguate word senses for new context instances. Li & Jurafsky (2015) models the senses for a target word in a given context by a Chinese restaurant process, models the contexts also by averaging its constituent word embeddings and then applies standard word embedding algorithms (continuous bag-of-words (CBOW) or skip-gram). Our approach is broadly similar in spirit to these approaches, in that a local lexical-level model is conceived, but we depart in several ways, the most prominent one being the modeling of the contexts as subspaces (and not as vectors, which is what an average of constituent word embeddings would entail)."}, {"heading": "B EMPIRICAL VALIDATION OF THE SUBSPACE HYPOTHESIS", "text": "Given a random word and a set of its contexts (culled from the set of all sentences where the target word appears), we use principle component analysis (PCA) to project the context word embeddings for every context into an N -dimensional subspace and measure the low dimensional nature of context word embeddings. We randomly sampled 500 words whose occurrence (frequency) is larger than 10,000, extracted their contexts from Wikipedia, and plotted the histogram of the variance ratios being captured by rank-N PCA in Figure 4 for N = 3, 4, 5. We make the following observations: even rank-3 PCA captures at least 45% of the energy (i.e., variance ratio) of the context word representations and rank-4 PCA can capture at least half of the energy almost surely. As comparison, we note that the average the number of context words is roughly 21 and a rank-4 PCA over a random collection of 21 words would be expected to capture only 20% of the energy (this calculation is justified because word vectors have been observed to possess a spatial isotropy property (Arora et al., 2016a)). All word vectors were trained on the Wikipedia corpus with dimension d = 300 using the skip-gram of word2vec (Mikolov et al., 2013).\nThis experiment immediately suggests the low-dimensional nature of contexts, and that the contexts be represented in the space of subspaces, i.e., the Grassmannian manifold:"}, {"heading": "C EMPIRICAL VALIDATION OF THE INTERSECTION HYPOTHESIS", "text": "We illustrate the intersection phenomenon via another experiment. Consider a monosemous word \u201ctyphoon\u201d and consider all contexts in Wikipedia corpus where this word appears (there are 14,829 contexts). We represent each context by the rank-N PCA subspace of all the vectors (with N = 3) associated with the words in the context and consider their intersection. Each of these subspaces is 3 \u00d7 d dimensional (where d = 300 is the dimension of the word vectors). We find that cosine similarity (normalized projection distance) between the vector associated with \u201ctyphoon\u201d and each context subspace is very small: the average is 0.693 with standard deviation 0.211. For comparison, we randomly sample 14,829 contexts and find the average is 0.305 with standard deviation 0.041 (a detailed histogram is also provided in Figure 5(a)). This corroborates with the hypothesis that the target word vector is in the intersecton of the context subspaces.\nVisualization of Intersection Hypothesis A visual representation of this geometric phenomenon is in Figure 5(b), where we have projected the d-dimensional word representations into 3- dimensional vectors and use these 3-dimensional word vectors to get the subspaces for the four contexts (we set N = 2 for visualization) in Table 4 of the target word \u201ctyphoon\u201d, and plot the subspaces as 2-dimensional planes. From Figure 5, we can see that all the context subspaces roughly intersect at a common direction, thus empirically justifying the intersection hypothesis."}, {"heading": "D EMPIRICAL VALIDATION OF THE POLYSEMY HYPOTHESIS", "text": "This intuition behind the polysemy hypothesis is validated by the following experiment, which continues on the same theme as the one done for the monosemous word \u201ctyphoon\u201d. Now we study the geometry of contexts for a polysemous word \u201ccrane\u201d, which can either mean a large, tall machine used for moving heavy objects or a tall, long-legged, long-necked bird. We list four contexts for each sense of \u201ccrane\u201d in Table 5, repeat the experiment as conducted above for the monosemous word \u201ctyphoon\u201d and visualize the context subspaces for two senses in Figure 6(a) and 6(b) respectively. Figure 6(c) plots the direction of two intersections. This immediately suggests that the contexts where \u201ccrane\u201d stands for a bird intersect at one direction and the contexts where \u201ccrane\u201d stands for a machine, intersect at a different direction as visualized in 3 dimensions.\n2\n1\n2\nE A QUALITATIVE STUDY OF K-GRASSMEANS\nTo get a qualitative feel of this algorithm on real data, we consider an example target word \u201ccolumbia\u201d with K = 5 senses. We considered 100K sentences, extracted from the Wikipedia corpus. The goal of sense induction is to partition the set of contexts into 5 groups, so that within each group the target word \u201ccolumbia\u201d has the same sense. We run K-Grassmeans for this target word and extract the intersect vectors u1, . . . uK for K = 5. One sample sentence for each group is given in Table 6 as an example, from which we can see the first group corresponds to British Columbia in Canada, the second one corresponds to Columbia records, the third one corresponds to\nColumbia University in New York, the fourth one corresponds to the District of Columbia, and the fifth one corresponds to Columbia River.\nThe performance of K-Grassmeans in the context of the target word \u201ccolumbia\u201d can also be understood via disambiguation. We apply our hard decoding algorithm (4) and our soft decoding algorithm 5 on the five sentences listed in Table 6, the optimal k\u2217\u2019s returned by hard decoding algorithm and the probability distributions P (w, c, k) returned by the soft decoding algorithm are provided in Table 7. From Table 7 we can see that even though the hard decoding algorithm outputs the correct label, some information is missing if we return a single label k\u2217. For example, since we take bag-of-words model in K-Grassmean, some words (e.g. \u201cschool\u201d and \u201cnew york city\u201d in context (c) provided in Table 6) suggest that the meaning for \u201ccolumbia\u201d in this instance might also be Columbia University. The function of those words reflects in the probability distribution returned by the soft decoding algorithm, where we can see the probability that \u201ccolumbia\u201d in this instance means Columbia University is around 0.13. The misleading result mainly comes from the bag-of-words model, and how to resolve it remains open."}, {"heading": "F SIMILARITIES AND DIFFERENCES BETWEEN INTERSECTIONS AND REPRESENTATIONS", "text": "We observe another phenomenon that can support our intersection hypothesis \u2013 the intersection vector is close to the word representation vector for many monosemous word. We perform an experiment to directly confirm this phonomenon: we randomly sample 500 monosemous words\nwhich occur at least 10,000 times, for each word we compute the intersection vector and check the cosine similarity between the intersection vector and the corresponding word representation of these monosemous words. We find that on average the cosine similarity score is a very high 0.607, with a small standard deviation of 0.095 (a detailed histogram is provided in Figure 7.\nHowever, this phenomenon does not hold for polysemous words. It turns out, the intersection vectors for polysemous words are concentrated on a relatively small surface area on the sphere. The histogram of the cosine similarity between two random intersection vectors among 10,000 intersections (five intersections for 2,000 polysemous words) and the histogram of the cosine similarity between two random word vectors among 10,000 word embeddings are provided in Figure 8."}, {"heading": "G A DETAILED DESCRIPTION OF WSI DATASETS", "text": "We test our induction algorithm,K-Grassmeans, on two datasets \u2013 one standard from SemEval-2010 and the other custom-built.\n\u2022 SemEval-2010: The test set of SemEval-2010 shared task 14 (Manandhar et al., 2010) contains 50 polysemous nouns and 50 polysemous verbs whose senses are extracted from OntoNotes (Hovy et al., 2006), and in total 8,915 instances are expected to be disambiguated. The context instances are extracted from various sources including CNN and ABC.\n\u2022 Makes-Sense-2016: Several word senses from SemEval-2010 are too fine-grained in our view (no performance results on tests with native human speakers\u2019 is provided in the literature) \u2013 this creates \u201cnoise\u201d that that reduces the performance of all the algorithms, and the required senses are perhaps not that useful to downstream applications. For example, \u201cguarantee\u201d (as a noun) is labeled to have four different meanings in the following four sentences:\n\u2013 It has provided a legal guarantee to the development of China\u2019s Red Cross cause and connections with the International Red Cross movement, signifying that China\u2019s Red Cross cause has entered a new historical phase.\n\u2013 Some hotels in the hurricane - stricken Caribbean promise money - back guarantees. \u2013 Many agencies roll over their debt , paying off delinquent loans by issuing new loans\n, or converting defaulted loan guarantees into direct loans. \u2013 Litigation consulting isn\u2019t a guarantee of a favorable outcome.\nHowever, in general they all mean \u201ca formal promise or pledge\u201d. Towards a more humaninterpretable version of the WSI task, we custom-build a dataset whose senses are coarser and clearer. We do this by repurposing a recent dataset created in (Arora et al., 2016b), as part of their \u201cpolice lineup\u201d task. Our dataset contains 50 polysemous words, together with their senses (on average 2.78 senses per word) borrowed from (Arora et al., 2016b). We generate the testing instances for a target word by extracting all occurrences of it in the Wikipedia Corpus, analyzing its Wikipedia annotations (if any), grouping those which have the same annotations, and finally merging annotations where the target word shares the same sense. Since the senses are quite readily distinguishable from the perspective of native/fluent speakers of English, the disambiguation variability, among the human raters we tested our dataset on, is negligible (this effect is also seen in Figure 6 of (Arora et al., 2016b))."}, {"heading": "H ALGORITHMS FOR POLICE LINEUP TASK", "text": "We first introduce the baseline algorithm for word2vec and our algorithm, as given in Algorithm 1 and 2. Both algorithms are motivated by the algorithm in (Arora et al., 2016b).\nIn our algorithm, the similarity score can be thought as a mean value of the word similarities between a target word w and a definition word w\u2032 in the given sense L, we take the power mean with p = 2. Our algorithm can be adapted to different choice of p, i.e.,\nscorep(sk(w), L)\u2190 (\u2211 w\u2032\u2208L \u2223\u2223vk(w)Tvw\u2223\u2223p)1/p \u2212 1|V | \u2211 w\u2032\u2032\u2208V (\u2211 w\u2032\u2208L \u2223\u2223vk(w\u2032\u2032)Tvw\u2223\u2223p)1/p Different choice of p leads to different preferences of the similarities between w and w\u2032 \u2208 L, generally speaking larger weights put on relevant words with larger p:\n\u2022 If we take p = 0, score1(w,L) turns to be an average of the similarities; \u2022 If we take p =\u221e, score\u221e(w,L) measures the similarity betweenw andL by the similarity\nbetween w and the most relevant word w\u2032 \u2208 L, i.e., score\u221e(sk(w), L)\u2190 max\nw\u2032\u2208L |vk(w)Tv(w\u2032)|\nIn our case we take p = 2 to allow enough (but not too much) influence from the most relevant words.\nAlgorithm 1: The baseline algorithm with word2vec for Princeton Police Lineup Task. Input : a target word w, m senses L1, ..., Lm, word vectors v(w\u2032) for every w\u2032 in the vocabulary\nV . 1 Compute a similarity score between w and a sense Li,\nscore(w,Li)\u2190 \u221a \u2211\nw\u2032\u2208Li\n(v(w)Tv(w\u2032)) 2 \u2212 1 |V | \u2211 w\u2032\u2032 \u221a \u2211 w\u2032\u2208Li (v(w\u2032\u2032)Tv(w\u2032)) 2\n2 return Top k L\u2019s with highest similarity scores. Output: k candidate senses.\nBoth our algorithm and the algorithm in (Arora et al., 2016b) do not take into account that one atom represents one sense of the target word, and thus some atoms might generate two senses in the output k candidates. A more sophisticated algorithm is required to address this issue.\nAlgorithm 2: Our algorithm for Princeton Police Lineup Task. Input : a target word w, m senses L1, ..., Lm, lexeme representations vk(w) for every sense of w,\nand word representations v(w\u2032) for w\u2032 in the vocabulary. 1 candidates\u2190 list() 2 scores\u2190 list() 3 for every sense sk(w) of w do 4 for every i = 1, 2, ...,m do 5 Compute a similarity score between a lexeme sk(w) and a sense Li,\nscore(sk(w), L)\u2190 \u221a\u2211\nw\u2032\u2208L (vk(w)Tvw\u2032)2\n+ \u221a\u2211 w\u2032\u2208L (v(w)Tv(w\u2032))2 \u2212 1 |V | \u2211 w\u2032\u2032\u2208V \u221a\u2211 w\u2032\u2208L (v(w\u2032\u2032)Tv(w\u2032))2,\n6 end 7 Li1 , Li2 \u2190 top 2 senses. 8 candidates\u2190 candidates + Li1 + Li2 9 scores\u2190 scores + score(sk(w), Li1) + score(sk(w), Li1)\n10 end 11 return Top k L\u2019s with highest similarity scores.\nOutput: k candidate senses."}, {"heading": "I FUTURE WORK", "text": "Several new avenues of research in natural language representations arise from the ideas in this work and we discuss a few items below.\n1. Interactions between Polysemous Words: One of the findings of this work, via the experiments in Appendix A, is that polysemous words interact with each other in the corpus. One natural way to harness these intersections, and hence to sharpen K-Grassmeans, is to do an iterative labeling procedure. Both hard decoding and soft decoding (discussed in Section 2.3) can benefit from iterations. In hard decoding, the \u201cIDK\u201d labels may be resolved over multiple iterations since (a) the rare senses can become dominant senses once the major senses are already labeled, and (b) a confusing sense can be disambiguated once the polysemous words in its context are disambiguated. In soft decoding, the probability can be expected to concentrate on one sense since each iteration yields yet more precise context word embeddings. This hypothesis is inspired by the success of such procedures inherent in the message passing algorithms for turbo and LDPC codes in reliable wireless communication which share a fair bit of commonality with the setting of polysemy disambiguation (Richardson & Urbanke, 2008). A quantitative tool to measure the disambiguation improvements from iterations and when to stop the iterative process (akin to the EXIT charts for message passing iterative decoders of LDPC codes (Ten Brink, 2001)) is an interesting research direction, as is a detailed algorithm design of the iterative decoding and its implementation; both of these are beyond the scope of this paper.\n2. Low Dimensional Context Representation: A surprising finding of this work is that contexts (sentences) that contain a common target word tend to reside in a low dimensional subspace, as justified via empirical observations in Figure 4. Understanding this geometrical phenomenon in the context of a generative model (for instance, RAND-WALK of (Arora et al., 2016a) is not able to explain this) is a basic problem of interest, with several relevant applications (including language modeling Iyer et al. (1994); Chen & Goodman (1996) and semantic parsing of sentences (textual entailment, for example (Dagan et al., 2006; Bar-Haim et al., 2006; Giampiccolo et al., 2007))). Such an understanding could also provide new ideas for the topical subject of representing sentences and paragraphs (Le & Mikolov, 2014; Wieting et al., 2015; Kenter et al., 2016; Kusner et al., 2015) and eventu-\nally combining with document/topic modeling methods such as Latent Dirichlet Allocation Blei et al. (2003).\n3. Combining Linguistic Resources: Presently the methods of lexeme representation are either exclusive external resource-based or entirely unsupervised. The unsupervised method of K-Grassmeans reveals robust clusters of senses (and also provides a soft score measuring the robustness (in terms of how frequent the sense is and how sharply/crisply it is used) of the identified sense). On the other hand, WordNet lists a very detailed number of senses, some frequent and robust but many others very fine grained; the lack of any accompanying metric that relates to the frequency and robustness of this sense (which could potentially be domain/corpus specific) really makes this resource hard to make computational use of, at least within the context of polysemy representations. An interesting research direction would be to try to combine K-Grassmeans and existing linguistic resources to automatically define senses of multiple granularities, along with metrics relating to frequency and robustness of the identified senses."}, {"heading": "J CONTEXT REPRESENTATION ALGORITHM", "text": "The pseudocode for context representation (c.f. Section 2.1) is provided in Algorithm 3.\nAlgorithm 3: The algorithm for context representation. Input : a context c, word embeddings v(\u00b7), and a PCA rank N .\n1 Compute the first N principle components of samples {v(w\u2032), w\u2032 \u2208 c},\nu1, ..., uN \u2190 PCA({v(w\u2032), w\u2032 \u2208 c}),\nS \u2190\n{ N\u2211\nn=1\n: \u03b1nun, \u03b1n \u2208 R } Output: N orthonormal basis u1, ..., uN and a subspace S.\n2 ,"}, {"heading": "K SENSE INDUCTION ALGORITHM", "text": "The pseudocode for word sense induction (c.f. Section 2.2) is provided in Algorithm 4.\nAlgorithm 4: Word sense induction algorithm with given number of senses. Input : contexts c1, ..., cM , and integer K.\n1 Initialize unit length vectors u1, ..., uK randomly, initialize L\u2190\u221e, 2 while L does not converge do 3 Expectation step: assign subspaces to the group which has the closest intersection direction,\nSk \u2190 {cm : d(uk, S(cm \\ w)) \u2264 d(uk\u2032 , S(cm \\ w)) \u2200k\u2032},\n4 Maximization Step: update the new intersection direction that minimize the distances to all subspace in this group as (1).\nuk \u2190 argmin v \u2211 c\u2208Sk d2(u, S(c \\ w)),\nL\u2190 K\u2211\nk=1 \u2211 c\u2208Sk d2(uk, S(c \\ w)),\n5 end Output: K intersection directions v1, ..., vK .\nTo ensure good performance, we randomize the intersection directions with multiple different seeds and output the best one in terms of the objective function L; this step is analogous to the random initialization conducted in kmeans++ in classical clustering literature (Ostrovsky et al., 2006; Arthur & Vassilvitskii, 2007)."}, {"heading": "L SENSE DISAMBIGUATION ALGORITHM", "text": "The pseudocode for the word sense disambiguation (c.f. Section 2.2) is provided in Algorithm 5.\nAlgorithm 5: The algorithm for sense disambiguation. Input : a context c, word embeddings v(\u00b7), a PCA rank N , a set of intersection directions\nuk(w)\u2019s, and a threshold \u03b8. 1 Compute denoised context subspace, S \u2190 S(c \\ w), 2 Compute the distance between S(c \\ w) and intersections,\ndk \u2190 d(uk, S),\n3 if hard decoding then 4 Get the closest cluster, k\u2217 \u2190 argmin dk, 5 Check the threshold, 6 if dk\u2217 < \u03b8 then 7 return k\u2217; 8 end 9 return IDK;\n10 end 11 if soft decoding then 12 Compute the probabilities:\nP (w, c, k)\u2190 exp(\u221210d(uk(w), S(c \\ w)))\u2211 k\u2032 exp(\u221210d(uk\u2032(w), S(c \\ w))) ,\n13 end 14 return P (w, c, k) for k = 1, ...,K;\nOutput: An label indicating which sense this word means in this context.\nM V-MEASURE AND PAIRED F-SCORE\nClustering algorithms partition N data points into a set of clusters K = {1, 2, ...,K}. Given the ground truth, i.e., another partition of data into another set of clusters T = {1, 2, ..., T}, the performance of a clustering algorithm is evaluated based on a contingency table A = atk representing the clustering algorithm, where atk is the number of data whose ground truth label is t and algorithm label is k. There are two intrinsic properties of all desirable evaluation measures:\n\u2022 The measure should be permutation-invariant, i.e., the measure should be the same if we permutate the labels in K or T .\n\u2022 The measure should encourage intra-cluster similarity and penalize inter-cluster similarity.\nV-Measure (Rosenberg & Hirschberg, 2007) and paired F-Score (Artiles et al., 2009) are two standard measures, the definitions of which are given below.\nM.1 V-MEASURE\nV-Measure is an entropy-based metric, defined as a harmonic mean of homogeneity and completeness.\n\u2022 Homogeneity is satisfied if the data points belong to one algorithm cluster fall into a single ground truth cluster, formally defined as,\nh = { 1 if H(T ) = 0 1\u2212 H(T |K)H(T ) otherwise,\nwhere\nH(T |K) = \u2212 K\u2211\nk=1 T\u2211 t=1 atkN log atk\u2211T t=1 atk ,\nH(T ) = \u2212 T\u2211\nt=1\n\u2211K k=1 atk N log \u2211k k=1 ack N .\n\u2022 Completeness is analogous to homogeity. Formally this is defined as:\nc = { 1 if H(K) = 0 1\u2212 H(K|T )H(K) otherwise,\nwhere\nH(K|T ) = \u2212 T\u2211\nt=1 K\u2211 k=1 atkN log atk\u2211K k=1 atk,\nH(K) = \u2212 K\u2211\nk=1\n\u2211T t=1 atk N log \u2211T t=1 ack N .\nGiven h and c, the V-Measure is their harmonic mean, i.e.,\nV = 2hc\nh+ c .\nM.2 PAIRED F-SCORE\nPaired F-score evaluates clustering performance by converting the clustering into a binary classification problem \u2013 given two instances, do they belong to the same cluster or not?\nFor each cluster k identified by the algorithm, we generate (\u2211T\nt=1 atk 2\n) instance pairs, and for each\nground true cluster, we generate (\u2211K\nk=1 atk 2\n) instances pairs. Let F (K) be the set of instance pairs\nfrom the algorithm clusters and let F (T ) be the set of instances pairs from ground truth clusters. Precision and recall is defined accordingly:\nP = |F (K) \u2229 F (T )|\nF (K) ,\nR = |F (K) \u2229 F (T )|\nF (S) ,\nwhere |F (K)|, |F (T )| and |F (K) \u2229 F (T )| can be computed using the matrix A as below:\n|F (K)| = K\u2211\nk=1\n(\u2211T t=1 atk 2 ) ,\n|F (T )| = T\u2211\nt=1\n(\u2211K k=1 atk 2 ) ,\n|F (K) \u2229 F (T )| = T\u2211\nt=1 K\u2211 k=1 ( atk 2 ) ."}], "references": [{"title": "A latent variable model approach to pmi-based word embeddings", "author": ["REFERENCES Sanjeev Arora", "Yuanzhi Li", "Yingyu Liang", "Tengyu Ma", "Andrej Risteski"], "venue": "Transactions of the Association for Computational Linguistics,", "citeRegEx": "Arora et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Arora et al\\.", "year": 2016}, {"title": "Linear algebraic structure of word senses, with applications to polysemy", "author": ["Sanjeev Arora", "Yuanzhi Li", "Yingyu Liang", "Tengyu Ma", "Andrej Risteski"], "venue": "arXiv preprint arXiv:1601.03764,", "citeRegEx": "Arora et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Arora et al\\.", "year": 2016}, {"title": "k-means++: The advantages of careful seeding", "author": ["David Arthur", "Sergei Vassilvitskii"], "venue": "In Proceedings of the eighteenth annual ACM-SIAM symposium on Discrete algorithms,", "citeRegEx": "Arthur and Vassilvitskii.,? \\Q2007\\E", "shortCiteRegEx": "Arthur and Vassilvitskii.", "year": 2007}, {"title": "The role of named entities in web people search", "author": ["Javier Artiles", "Enrique Amig\u00f3", "Julio Gonzalo"], "venue": "In Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing: Volume 2-Volume", "citeRegEx": "Artiles et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Artiles et al\\.", "year": 2009}, {"title": "The second pascal recognising textual entailment challenge", "author": ["Roy Bar-Haim", "Ido Dagan", "Bill Dolan", "Lisa Ferro", "Danilo Giampiccolo", "Bernardo Magnini", "Idan Szpektor"], "venue": "In Proceedings of the second PASCAL challenges workshop on recognising textual entailment,", "citeRegEx": "Bar.Haim et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Bar.Haim et al\\.", "year": 2006}, {"title": "Latent dirichlet allocation", "author": ["David M Blei", "Andrew Y Ng", "Michael I Jordan"], "venue": "Journal of machine Learning research,", "citeRegEx": "Blei et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Blei et al\\.", "year": 2003}, {"title": "An empirical study of smoothing techniques for language modeling", "author": ["Stanley F Chen", "Joshua Goodman"], "venue": "In Proceedings of the 34th annual meeting on Association for Computational Linguistics,", "citeRegEx": "Chen and Goodman.,? \\Q1996\\E", "shortCiteRegEx": "Chen and Goodman.", "year": 1996}, {"title": "A unified model for word sense representation and disambiguation", "author": ["Xinxiong Chen", "Zhiyuan Liu", "Maosong Sun"], "venue": "In EMNLP,", "citeRegEx": "Chen et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Chen et al\\.", "year": 2014}, {"title": "The pascal recognising textual entailment challenge. In Machine learning challenges. evaluating predictive uncertainty, visual object classification, and recognising tectual entailment", "author": ["Ido Dagan", "Oren Glickman", "Bernardo Magnini"], "venue": null, "citeRegEx": "Dagan et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Dagan et al\\.", "year": 2006}, {"title": "The third pascal recognizing textual entailment challenge", "author": ["Danilo Giampiccolo", "Bernardo Magnini", "Ido Dagan", "Bill Dolan"], "venue": "In Proceedings of the ACL-PASCAL workshop on textual entailment and paraphrasing,", "citeRegEx": "Giampiccolo et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Giampiccolo et al\\.", "year": 2007}, {"title": "Ontonotes: the 90% solution", "author": ["Eduard Hovy", "Mitchell Marcus", "Martha Palmer", "Lance Ramshaw", "Ralph Weischedel"], "venue": "In Proceedings of the human language technology conference of the NAACL, Companion Volume: Short Papers,", "citeRegEx": "Hovy et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Hovy et al\\.", "year": 2006}, {"title": "Improving word representations via global context and multiple word prototypes", "author": ["Eric H Huang", "Richard Socher", "Christopher D Manning", "Andrew Y Ng"], "venue": "In Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics: Long Papers-Volume", "citeRegEx": "Huang et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Huang et al\\.", "year": 2012}, {"title": "Language modeling with sentence-level mixtures", "author": ["Rukmini Iyer", "Mari Ostendorf", "J Robin Rohlicek"], "venue": "In Proceedings of the workshop on Human Language Technology,", "citeRegEx": "Iyer et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Iyer et al\\.", "year": 1994}, {"title": "Siamese cbow: Optimizing word embeddings for sentence representations", "author": ["Tom Kenter", "Alexey Borisov", "Maarten de Rijke"], "venue": "arXiv preprint arXiv:1606.04640,", "citeRegEx": "Kenter et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Kenter et al\\.", "year": 2016}, {"title": "From word embeddings to document distances", "author": ["Matt J Kusner", "Yu Sun", "Nicholas I Kolkin", "Kilian Q Weinberger"], "venue": "In Proceedings of the 32nd International Conference on Machine Learning (ICML", "citeRegEx": "Kusner et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Kusner et al\\.", "year": 2015}, {"title": "Distributed representations of sentences and documents", "author": ["Quoc V Le", "Tomas Mikolov"], "venue": "In ICML,", "citeRegEx": "Le and Mikolov.,? \\Q2014\\E", "shortCiteRegEx": "Le and Mikolov.", "year": 2014}, {"title": "Do multi-sense embeddings improve natural language understanding", "author": ["Jiwei Li", "Dan Jurafsky"], "venue": "arXiv preprint arXiv:1506.01070,", "citeRegEx": "Li and Jurafsky.,? \\Q2015\\E", "shortCiteRegEx": "Li and Jurafsky.", "year": 2015}, {"title": "Semeval-2010 task 14: Word sense induction & disambiguation", "author": ["Suresh Manandhar", "Ioannis P Klapaftis", "Dmitriy Dligach", "Sameer S Pradhan"], "venue": "In Proceedings of the 5th international workshop on semantic evaluation,", "citeRegEx": "Manandhar et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Manandhar et al\\.", "year": 2010}, {"title": "Efficient estimation of word representations in vector space", "author": ["Tomas Mikolov", "Kai Chen", "Greg Corrado", "Jeffrey Dean"], "venue": "arXiv preprint arXiv:1301.3781,", "citeRegEx": "Mikolov et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Mikolov et al\\.", "year": 2013}, {"title": "Efficient non-parametric estimation of multiple embeddings per word in vector space", "author": ["Arvind Neelakantan", "Jeevan Shankar", "Alexandre Passos", "Andrew McCallum"], "venue": "arXiv preprint arXiv:1504.06654,", "citeRegEx": "Neelakantan et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Neelakantan et al\\.", "year": 2015}, {"title": "The effectiveness of lloyd-type methods for the k-means problem", "author": ["Rafail Ostrovsky", "Yuval Rabani", "Leonard J Schulman", "Chaitanya Swamy"], "venue": "In 2006 47th Annual IEEE Symposium on Foundations of Computer Science", "citeRegEx": "Ostrovsky et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Ostrovsky et al\\.", "year": 2006}, {"title": "Modern coding theory", "author": ["Tom Richardson", "Ruediger Urbanke"], "venue": null, "citeRegEx": "Richardson and Urbanke.,? \\Q2008\\E", "shortCiteRegEx": "Richardson and Urbanke.", "year": 2008}, {"title": "V-measure: A conditional entropy-based external cluster evaluation measure", "author": ["Andrew Rosenberg", "Julia Hirschberg"], "venue": "In EMNLP-CoNLL,", "citeRegEx": "Rosenberg and Hirschberg.,? \\Q2007\\E", "shortCiteRegEx": "Rosenberg and Hirschberg.", "year": 2007}, {"title": "Autoextend: Extending word embeddings to embeddings for synsets and lexemes", "author": ["Sascha Rothe", "Hinrich Sch\u00fctze"], "venue": "arXiv preprint arXiv:1507.01127,", "citeRegEx": "Rothe and Sch\u00fctze.,? \\Q2015\\E", "shortCiteRegEx": "Rothe and Sch\u00fctze.", "year": 2015}, {"title": "Convergence behavior of iteratively decoded parallel concatenated codes", "author": ["Stephan Ten Brink"], "venue": "IEEE transactions on communications,", "citeRegEx": "Brink.,? \\Q2001\\E", "shortCiteRegEx": "Brink.", "year": 2001}, {"title": "Towards universal paraphrastic sentence embeddings", "author": ["John Wieting", "Mohit Bansal", "Kevin Gimpel", "Karen Livescu"], "venue": "arXiv preprint arXiv:1511.08198,", "citeRegEx": "Wieting et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Wieting et al\\.", "year": 2015}], "referenceMentions": [{"referenceID": 11, "context": ": neural networks (Bengio et al., 2003; Mikolov et al., 2010; Huang et al., 2012), log-bilinear models (Mnih & Hinton, 2007; Mikolov et al.", "startOffset": 18, "endOffset": 81}, {"referenceID": 18, "context": ", 2012), log-bilinear models (Mnih & Hinton, 2007; Mikolov et al., 2013), co-occurrence statistics (Pennington et al.", "startOffset": 29, "endOffset": 72}, {"referenceID": 7, "context": "There are currently two approaches to address the polysemy issue (a detailed discussion is in Appendix A): (a) sense specific representation learning (Chen et al., 2014; Rothe & Sch\u00fctze, 2015), usually aided by hand-crafted lexical resources such as WordNet (Miller, 1995); (b) unsupervised sense induction and sense/lexeme representation learning by inferring the senses directly from text (Huang et al.", "startOffset": 150, "endOffset": 192}, {"referenceID": 11, "context": ", 2014; Rothe & Sch\u00fctze, 2015), usually aided by hand-crafted lexical resources such as WordNet (Miller, 1995); (b) unsupervised sense induction and sense/lexeme representation learning by inferring the senses directly from text (Huang et al., 2012; Neelakantan et al., 2015; Li & Jurafsky, 2015; Arora et al., 2016b).", "startOffset": 229, "endOffset": 317}, {"referenceID": 19, "context": ", 2014; Rothe & Sch\u00fctze, 2015), usually aided by hand-crafted lexical resources such as WordNet (Miller, 1995); (b) unsupervised sense induction and sense/lexeme representation learning by inferring the senses directly from text (Huang et al., 2012; Neelakantan et al., 2015; Li & Jurafsky, 2015; Arora et al., 2016b).", "startOffset": 229, "endOffset": 317}, {"referenceID": 17, "context": "Our algorithm outperforms state-of-the-art on two datasets: (a) SemEval-2010 Task 14 (Manandhar et al., 2010) whose word senses are obtained from OntoNotes (Hovy et al.", "startOffset": 85, "endOffset": 109}, {"referenceID": 10, "context": ", 2010) whose word senses are obtained from OntoNotes (Hovy et al., 2006); and (b) a custom-built dataset built by repurposing the polysemous dataset of (Arora et al.", "startOffset": 54, "endOffset": 73}, {"referenceID": 11, "context": "In terms of lexeme vector embeddings, our representations have evaluations comparable to state-of-the-art on standard tasks \u2013 the word similarity task of SCWS (Huang et al., 2012) \u2013 and significantly better on a subset of the SCWS dataset which focuses on polysemous target words and the \u201cpolice lineup\u201d task of (Arora et al.", "startOffset": 159, "endOffset": 179}, {"referenceID": 11, "context": "Compared to the baseline algorithm proposed in (Huang et al., 2012; Neelakantan et al., 2015), K-Grassmean on subspaces outperforms K-means on average word vectors by 5-6%.", "startOffset": 47, "endOffset": 93}, {"referenceID": 19, "context": "Compared to the baseline algorithm proposed in (Huang et al., 2012; Neelakantan et al., 2015), K-Grassmean on subspaces outperforms K-means on average word vectors by 5-6%.", "startOffset": 47, "endOffset": 93}, {"referenceID": 11, "context": "Here we calculate the probability as a monotonic function of the cosine distance between the intersection vector uk(w) and the context subspace S(c \\ w), inspired by similar heuristics in the literature (Huang et al., 2012).", "startOffset": 203, "endOffset": 223}, {"referenceID": 11, "context": "Baselines Our main comparisons are with algorithms that conduct unsupervised polysemy disambiguation, specifically the sense clustering method of (Huang et al., 2012), the multi-sense skip gram model (MSSG) of (Neelakantan et al.", "startOffset": 146, "endOffset": 166}, {"referenceID": 19, "context": ", 2012), the multi-sense skip gram model (MSSG) of (Neelakantan et al., 2015) with different parameters, and the sparse coding method with a global dictionary of (Arora et al.", "startOffset": 51, "endOffset": 77}, {"referenceID": 11, "context": "We were able to download the word and sense representations for (Huang et al., 2012; Neelakantan et al., 2015) online, and trained the word and sense representations of (Arora et al.", "startOffset": 64, "endOffset": 110}, {"referenceID": 19, "context": "We were able to download the word and sense representations for (Huang et al., 2012; Neelakantan et al., 2015) online, and trained the word and sense representations of (Arora et al.", "startOffset": 64, "endOffset": 110}, {"referenceID": 17, "context": "We testK-Grassmeans on two datasets \u2013 a standard one from the test set of SemEval-2010 (Manandhar et al., 2010) and a custom-built Make-Sense-2016.", "startOffset": 87, "endOffset": 111}, {"referenceID": 17, "context": "We evaluate the performance of the algorithms on this (disambiguation) task according to standard measures in the literature: V-Measure and paired F-Score; these two evaluation metrics also feature in the SemEval-2010 WSI task (Manandhar et al., 2010).", "startOffset": 227, "endOffset": 251}, {"referenceID": 17, "context": ", UoY (Korkontzelos & Manandhar, 2010), Hermit (Jurgens & Stevens, 2010), Duluth-WSI (Pedersen, 2010)) in (Manandhar et al., 2010) using all four metrics in Table 2.", "startOffset": 106, "endOffset": 130}, {"referenceID": 11, "context": "Hence we evaluate our lexeme representations on a standard word similarity task focusing on context-specific scenarios: the Stanford Contextual Word Similarities (SCWS) dataset (Huang et al., 2012).", "startOffset": 177, "endOffset": 197}], "year": 2017, "abstractText": "Vector representations of words have heralded a transformational approach to classical problems in NLP; the most popular example is word2vec. However, a single vector does not suffice to model the polysemous nature of many (frequent) words, i.e., words with multiple meanings. In this paper, we propose a three-fold approach for unsupervised polysemy modeling: (a) context representations, (b) sense induction and disambiguation and (c) lexeme (as a word and sense pair) representations. A key feature of our work is the finding that a sentence containing a target word is well represented by a low rank subspace, instead of a point in a vector space. We then show that the subspaces associated with a particular sense of the target word tend to intersect over a line (one-dimensional subspace), which we use to disambiguate senses using a clustering algorithm that harnesses the Grassmannian geometry of the representations. The disambiguation algorithm, which we call K-Grassmeans, leads to a procedure to label the different senses of the target word in the corpus \u2013 yielding lexeme vector representations, all in an unsupervised manner starting from a large (Wikipedia) corpus in English. Apart from several prototypical target (word,sense) examples and a host of empirical studies to intuit and justify the various geometric representations, we validate our algorithms on standard sense induction and disambiguation datasets and present new state-of-the-art results.", "creator": "TeX"}, "id": "ICLR_2017_174"}