{"name": "ICLR_2017_349.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Farkhondeh Kiaee", "Christian Gagn\u00e9", "Mahdieh Abbasi"], "emails": ["farkhondeh.kiaee.1@ulaval.ca", "mahdieh.abbasi.1@ulaval.ca", "christian.gagne@gel.ulaval.ca"], "sections": [{"heading": "1 INTRODUCTION", "text": "Deep Convolutional Neural Networks (CNNs) have achieved remarkable performance in challenging computer vision problems such as image classification and object detection tasks, at the cost of a large number of parameters and computational complexity. These costs can be problematic for deployment especially on mobile devices and when real-time operation is needed.\nTo improve the efficiency of CNNs, several attempts have been made to reduce the redundancy in the network. Jaderberg et al. (2014) proposed to represent the full-rank original convolutional filters tensor by a low-rank approximation composed of a sequence of two regular convolutional layers, with rectangular filters in the spatial domain. A different network connection structure is suggested by Ioannou et al. (2015), which implicitly learns linear combinations of rectangular filters in the spatial domain, with different vertical/horizontal orientations. Tai et al. (2015) presented an exact and closed-form solution to the low-rank decomposition approach of Jaderberg et al. (2014) to enforce connection sparsity on CNNs.\nSparse learning has been shown to be efficient at pruning the irrelevant parameters in many practical applications, by incorporating sparsity-promoting penalty functions into the original problem, where the added sparsity-promoting terms penalize the number of parameters (Kiaee et al. (2016a;b;c)). Motivated by learning efficient architectures of a deep CNN for embedded implementations, our work focuses on the design of a sparse network using an initial pre-trained dense CNN.\nThe alternating direction method of multipliers (ADMM) (Boyd et al. (2011)) has been extensively studied to minimize the augmented Lagrangian function for optimization problems, by breaking them into smaller pieces. It turns out that ADMM has been recently applied in a variety of contexts (Lin et al. (2013a); Shen et al. (2012); Meshi & Globerson (2011)). We demonstrate that the ADMM\nprovides an effective tool for optimal sparsity imposing on deep neural connections. This is achieved by augmenting a sparsity-inducing penalty term to the recognition loss of a pre-trained network. Different functions including the l0-norm and its convex l1-norm relaxations can be considered as a penalty term. The variables are then partitioned into two subsets, playing two different roles: 1) promoting the sparsity of the network at the level of a predetermined sparse block structure; 2) minimizing the recognition error.\nThe augmented Lagrangian function is then minimized with respect to each subset by fixing all other subsets at each iteration. In the absence of the penalty term, the performance results correspond to the original network with a dense structure. By gradually increasing the regularization factor of the sparsity-promoting penalty term, the optimal parameters move from their initial setting to the sparse structure of interest. This regularization factor is increased until the desired balance between performance and sparsity is achieved.\nSeveral approaches have been developed to create sparse networks by applying pruning or sparsity regularizers: Wen et al. (2016); Alvarez & Salzmann (2016); Liu et al. (2015); Han et al. (2015). The most relevant to our work in these papers is the Structured Sparsity Learning (SSL) method of Wen et al. (2016), that regularizes the structures (i.e., filters, channels, filter shapes, and layer depth) of CNNs using a group lasso penalty function. However, the SSL approach suffers from two limitations compared to our proposed method. First, it relies on a rigid framework that disallows incorporation of non-differentiable penalty functions (e.g., l0-norm). Second, it requires training the original full model, while our proposed method allows to decompose the corresponding optimization problems into two sub-problems and exploit the separability of the sparsity-promoting penalty functions to find an analytical solution for one of the sub-problems (see Sec. 5 for more details).\nOur numerical experiments on three benchmark datasets, namely CIFAR-10, CIFAR-100, and SVHN, show that the structure of the baseline networks can be significantly sparsified. While most previous efforts report a small drop or no change in performance, we found a slight increase of classification accuracy in some cases."}, {"heading": "2 CNN WITH SPARSE FILTERS", "text": "Consider a CNN network consisting of a total of L layers, including convolutional and fully connected layers, which are typically interlaced with rectified linear units and pooling (see Fig. 1). Let the l-th layer includes ml input feature maps and nl output feature maps, with W lij representing the convolution filter between the i-th and j-th input and output feature maps, respectively1. Our goal\n1Each fully connected layer can also be thought to be composed of several 1-dim convolutions, where the filter is of the same size as the input, hence is applied only at one location. In this context, if you look at the\nis to design the optimal filters, subject to sparse structural constraints. In order to obtain the filters which balance a trade-off between the minimization of the loss function and sparseness, we consider the following objective function\nminimize W\nLnet(W ) + \u00b5f(W ), (1)\nwhere Lnet stands for the logistic loss function of the output layer of the network which is a function of the convolutional filters of all layers W = {W lij |i = 1, . . . ,ml, j = 1, . . . , nl, l = 1, . . . , L}. The term f(W ) is a penalty function on the total size of the filters. The l0-norm (cardinality) function or relaxations to higher orders such as l1-norm function can be employed to promote the sparsity of the filters.\nThe parameter \u00b5 controls the effect of sparse penalty term. As \u00b5 varies, the solution of (1) traces the trade-off path between the performance and the sparsity. In the next section, the alternating direction method of multipliers (ADMM) which is employed to find the optimal solution of (1) is described."}, {"heading": "3 USING ADMM FOR SPARSIFYING CNNS", "text": "Consider the following constrained optimization problem: minimize\nW ,F Lnet(W ) + \u00b5f(F ),\ns.t. W \u2212 F = 0, (2) which is clearly equivalent to the problem stated in (1). The key point here is that by introducing an additional variable F and an additional constraint W \u2212 F = 0, the objective function of the problem (1) is decoupled into two parts that depend on two different variables.\nThe augmented Lagrangian associated with the constrained problem (2) is given by C(W ,F ,\u0393) = Lnet(W ) + \u00b5f(F )\n+ \u2211 l,i,j trace(\u0393lij T (W lij \u2212 F l ij)) + \u03c1 2 \u2211 l,i,j \u2016W lij \u2212 F l ij \u20162F , (3)\nwhere \u0393lij is the dual variable (i.e., the Lagrange multiplier), \u03c1 is a positive scalar, \u2016 . \u2016F and is the Frobenius norm.\nIn order to find a minimizer of the constrained problem (3), the ADMM algorithm uses a sequence of iterative computations:\n1. Make use of a descent method to solve the following performance promoting problem,\nW {k+1} = argmin W\nC ( W ,F {k},\u0393{k} ) ; (4)\n2. Find the analytical expressions for the solutions of the following sparsity promoting problem,\nF {k+1} = argmin F\nC ( W {k+1},F ,\u0393{k} ) ; (5)\n3. Update the dual variable \u0393lij using a step-size equal to \u03c1, in order to guarantee that the dual feasibility conditions is satisfied in each ADMM iteration,\n\u0393lij {k+1} = \u0393lij {k} + \u03c1 ( W lij {k+1} \u2212 F lij {k+1}) . (6)\nThe three described computation steps are applied in an alternating manner. Re-estimation stops when the Frobenius distance of F in two consecutive iterations as well as the Frobenius distance of W and F at current iterations are less than a small threshold value. The details of steps 1 and 2 are described in the next sections. The outline of the proposed sparse CNN approach is summarized in Algorithm 1. At each individual regularization \u00b5, in order to improve the performance of the sparsestructured network we fine tune the initial non-augmented recognition loss subject to the parameters belonging to the identified sparse structure.\nfully connected layer at Fig. 1, you can see that it is just composed of one (ml = 1) vectorized input feature map and nl 1-dim convolutions, one for each output class.\nAlgorithm 1 Outline of the proposed sparse CNN algorithm 1: function SPARSE-CNN(data, model) 2: Set W to a pre-trained reference CNN model 3: \u0393 = 0, F = W 4: S: a set of small logarithmically spaced points in increasing order, as regularization factor. 5: for each \u00b5 in S do 6: do 7: Find the estimate of W {k+1} by minimizing (7) 8: Find the estimate of F {k+1} from (9) or (10) 9: Update dual variable \u0393{k+1} from (6) 10: while \u2016W {k+1} \u2212 F {k+1} \u2016F> or \u2016 F {k+1} \u2212 F {k} \u2016F> 11: Fix the identified sparse structure and fine-tune network according to Lnet w.r.t. non-\nzero parameters 12: end for 13: return W lij 14: end function"}, {"heading": "3.1 PERFORMANCE PROMOTING STEP", "text": "By completing the squares with respect to W in the augmented Lagrangian C(W ,F ,\u0393), we obtain the following equivalent problem to (4)\nminimize W\nLnet(W ) + \u03c1\n2 \u2211 l,i,j \u2016W lij \u2212U l ij \u20162F , (7)\nwhere U lij = F l ij \u2212 1\u03c1\u0393 l ij . From (7), it can be seen that by exploiting the separability property of ADMM method in the minimization of the augmented Lagrangian, the sparsity penalty term which might be non-differentiable is excluded from (7). Consequently, descent algorithms that rely on the differentiability can be utilized to solve the performance promoting sub-problem (7)\nThis property allows that popular software and toolkit resources for Deep Learning, including Caffe, Theano, Torch, and TensorFlow, to be employed for implementing the proposed approach. In our work, we use Stochastic Gradient Descent (SGD) method of TensorFlow to optimize the weights (W ), which seemed a reasonable choice for the high-dimensional optimization problem at hand. The entire procedure relies mainly on the standard forward-backward pass that is used to train the convolutional network."}, {"heading": "3.2 SPARSITY PROMOTING STEP", "text": "The completion of squares with respect to F in the augmented Lagrangian can be used to show that (5) is equivalent to\nminimize F\n\u00b5f(F ) + \u03c1\n2 \u2211 l,i,j \u2016 F lij \u2212 V l ij \u20162F , (8)\nwhere V lij = W l ij + 1 \u03c1\u0393 l ij . From (8), it can be seen that the proposed method provides a flexible framework to select arbitrary sparsity blocks. Sparse structure can then be achieved at the level of the selected block. Specifically, both terms on the right-hand side of (8), f(F ) (for either the case of l1-norm or l0-norm) as well as the square of the Frobenius norm can be written as a summation of component-wise functions of a tensor. In our experiments, individual filter components are selected as the sparsity blocks (see Fig. 1). Hence (8) can simply be expressed in terms of F lij components corresponding to the filters. However, any other individual sub-tensor components can be selected as the sparsity block.\nMore precisely, if f(F ) is selected to be the l1-norm function, then C(F ) = \u2211 l,i,j(\u00b5 \u2016 F l ij \u2016F +\u03c12 \u2016 F l ij \u2212 V l ij \u20162F ) and consequently (8) is converted to a minimization problem that only involves spatial filters. The solution of (8) can then be determined analytically by the following soft\nthresholding operation,\nF lij \u2217 =\n{ ( 1\u2212 a\u2016V l\nij \u2016F\n) V lij , if \u2016 V l ij \u2016F> a\n0, otherwise , (9)\nwhere a = \u00b5\u03c1 . Similarly, the following hard thresholding operation is the analytical solution for the case of the selection of the l0-norm f(F ) penalty term.\nF lij \u2217 =\n{ V lij , if \u2016 V l ij \u2016F> b\n0, otherwise , (10)\nwhere b = \u221a\n2\u00b5 \u03c1 ."}, {"heading": "3.3 CONVERGENCE OF THE PROPOSED ADMM-BASED SPARSE CNN METHOD", "text": "For convex problems, the ADMM is guaranteed to converge to the global optimum solution (Boyd et al. (2011)). For non-convex problems, where there is a general lack of theoretical proof, extensive computational experience suggests that ADMM works well when the penalty parameter \u03c1 in the augmented Lagrangian is chosen to be sufficiently large. This is related to the quadratic term that tends to locally convexify the objective function for sufficiently large \u03c1.\nUnfortunately, in the deep learning problems, the objective is inherently highly non-convex and consequently there is the risk that it becomes trapped into a local optimum. This difficulty could be circumvented by considering a warm start that may be obtained by running a pre-trained version of the network. The proposed ADMM approach is then used to sparsify the final solution. Using this procedure, as the experiments in the next section show, we have obtained good empirical results."}, {"heading": "4 EXPERIMENTAL RESULTS", "text": "In order to validate our approach, we show that our proposed sparse CNN approach can be efficiently applied to existing state-of-the-art network architectures to reduce the computational complexity without reducing the accuracy performance. For this purpose, we evaluate the proposed scheme on the CIFAR-10, CIFAR-100, and SVHN datasets with several CNN models.\nIn the implementation of the performance promoting step in Sec. 3.1, the batch size is 128 and the learning rate is set to a rather small value (i.e., 0.001 to search the space around the dense initialized filters to find a sparse solution). Since the regularization factor \u00b5 is selected from gradually increasing values, for the first small values of \u00b5 the selection of long epochs for performance-promoting step (inner loop) and fine-tuning steps is computationally prohibitive and would result in over-fitting. Instead, we start with one epoch for the first \u00b5 and increase the number of epochs by \u03b4 for the next \u00b5 values up to the \u03bd-th \u00b5 value, after which the number of epochs is limited to \u03b4\u03bd. We found that \u03b4 = 1 and \u03bd = 15 generally work well in our experiments. We already incorporated the number of training epochs at tables 3, 4, and 5 of Appendix B. If the maximum limiting number of iterations of inner loop is \u03be (suggested value of \u03be=10), the training time of the \u03bd-th \u00b5 value takes a total of \u03b4\u03bd\u03be + \u03b4\u03bd epochs (\u03b4\u03bd\u03be for performance-promoting step and \u03b4\u03bd for fine-tuning) under the worst-case assumption, where the inner loop has not converged and completes only at the \u03be-th iteration."}, {"heading": "4.1 RESULTS ON CIFAR-10 OBJECT CLASSIFICATION", "text": "The CIFAR-10 dataset is a well-known small dataset of 60,000 32 x 32 images in 10 classes. This dataset comprises standard sets of 50,000 training images, and 10,000 test images. As a baseline for the CIFAR-10 dataset, we deploy four models: the Network in Network (NIN) architecture (Lin et al., 2013b), its low-rank version (Ioannou et al., 2015), a custom CNN, and its low-rank counterpart as well, two last being learned from scratch on the CIFAR dataset. The configurations of the baseline models are outlined in Table 1. The architecture of the NIN model is slightly different from the one introduced in Lin et al. (2013b). The original NIN uses 5x5 filters in the first and second convolutional layer which are replaced with one and two layers of 3x3 filters, respectively. As suggested by Ioannou et al. (2015), this modified architecture has comparable accuracy and less\ncomputational complexity. In the low-rank networks, every single convolutional layer of the fullrank model is replaced with two convolutional layers with horizontal and vertical filters. NIN and low-rank NIN have an accuracy of 90.71% and 90.07%, respectively. The custom CNN and its low-rank variant show a baseline accuracy of 80.0% and 80.2%, respectively. The results of our experiments are plotted in Fig. 2 for both l0-norm and l1-norm sparsity constraints.\nFig. 2 shows how the accuracy performance changes as we increase the regularization factor \u00b5. The case with \u00b5 = 0 can be considered as the baseline model. In order to avoid over pruning of some layers, if the number of pruned filters in one layer exceeds 50% of the total number of filters in that layer, then we change the pruning threshold to the statistical mean of the Frobenius norm of all the filters at that layer in the sparsity promoting step (explained in Sec. 3.2) to stop the over pruning of that layer. Taking the NIN and low-rank-NIN as an example, using the l0-norm sparsity function, the parameters in the networks are reduced by 34.13% and 28.5% and the relative accuracy performance is +.5% and +1.23%, respectively. Using the l1-norm sparsity constraint achieves slightly lower accuracy compared to the l0-norm, although it still conveniently sparsifies the network.\nUsing the proposed sparsity promoting approach on the custom CNN models, the networks with sparse connections and similar accuracy (79.9% vs 80%) are achieved, but they have approximately 49.4% fewer parameters than the original networks model. Since the target solution is likely to be sparse, enforcing sparsity at the beginning of the learning process with our proposed method provides a way to avoid overfitting for achieving a better performance. However, as the experiment results show, increasing more the sparsity strength of the solution may lead to slight oversmoothing and drop in the performance. For the low-rank CNN, we achieve a comparable accuracy of 80.14%, with 25% fewer parameters.\nTo further verify that the advantage of ADMM training is statistically significant, a t-test is conducted by repeating the experiment 15 times on CIFAR-10 by using NIN model. The t-test results are in Appendix A. In Appendix B, however, we present detailed results for random sample runs over the configurations tested. According to the results presenting in Table 3 of Appendix B, the number of parameters in the network can be reduced by a large factor, especially for the higher convolution layers. Interestingly, even with significant reductions in the number of parameters, the performance does not decrease that much. This parameter reduction also gives rise to the speed-up of the network, reported at the last columns of the tables. Note that most of the results listed in Table 3 outperform the baseline model."}, {"heading": "4.2 RESULTS ON CIFAR-100 OBJECT CLASSIFICATION", "text": "The CIFAR-100 dataset is similar to the CIFAR-10 dataset containing 100 classes with 600 images per class. For CIFAR-100 we again use the baseline networks in Table 1 with only one structural difference (i.e., the NIN networks contain 100 feature maps at the last convolution layer and custom CNN networks contain 100 output labels). The baseline NIN, low-rank NIN, custom CNN, and low-rank CNN models show a test accuracy of 63.3%, 63.6%, 60.11%, and 60.23%, respectively.\nUsing the proposed sparsity promoting approach on these networks, the total number of parameters in the layers can be reduced by a large factor with comparable or even better performance accuracy.\nIn particular, on the CIFAR-100 dataset, we achieve 64.09% classification accuracy with 34.1% sparsity for the NIN model, which improves upon the original NIN on this dataset. A test accuracy of 65.23% is obtained for CIFAR-100 for the low-rank NIN model with 28.5% sparsity which\nsurpasses the performance of the baseline model. The proposed method on custom CNN and lowrank CNN show comparable performance accuracy to their corresponding baseline models (59.82% vs 60.11% and 60.1% vs 60.23%) with much less computation (49.7% and 24.4% number of zero elements, respectively). The details of changing sparsity in different layers of the networks on the CIFAR-100 dataset are presented in Table 4 of Appendix B. The same conclusions made for CIFAR10 can be drawn from these results."}, {"heading": "4.3 RESULTS ON SVHN OBJECT CLASSIFICATION", "text": "The SVHN dataset consists of 630,420 32x32 color images of house numbers collected by Google Street View. The task of this dataset is to classify the digit located at the center of each image. The structure of the baseline models used in SVHN is similar to those used for CIFAR-10, which are presented in Table 1. The training and testing procedure of the baseline models follows Lin et al. (2013b). The baseline NIN, low-rank NIN, custom CNN, and low-rank CNN models show the accuracy of 96.2%, 96.7%, 85.1%, and 87.6%, respectively. For this dataset, by applying our proposed sparse approach to NIN and low-rank NIN models, we obtain a higher accuracy of 96.97% and 99% with 34.17% and 28.6% fewer parameters, respectively. We also achieve comparable accuracy of 83.3% and 86.3% using 49.7% and 24.7% less parameters of the original model parameters on custom CNN and low-rank CNN models, respectively (see Table 5 of Appendix B for the details on changing the sparsity in different layers of the networks on SVHN dataset)."}, {"heading": "5 DISCUSSION", "text": "In this paper we proposed a framework to optimal sparsification of a pre-trained CNN approach. We employed the ADMM algorithm to solve the optimal sparsity-promoting problem, whose solution gradually moves from the original dense network to the sparse structure of interest as our emphasis on the sparsity-promoting penalty term is increased. The proposed method could potentially reduce the memory and computational complexity of the CNNs significantly.\nBriefly, the main contributions of the proposed sparse CNN can be summarized as follows:\nSeparability : The penalty function is separable with respect to the individual elements of the weight tensors. In contrast, the recognition loss function cannot be decomposed into component-wise functions of the weight tensors. By separating the two parts in the minimization of the augmented Lagrangian, we can analytically determine the solution to the sparsity promoting sub-problem (8).\nDifferentiability : The recognition loss function Lnet(W ) is typically differentiable with respect to the parameters, as opposed to some choices of sparsity penalty terms (e.g., l0-norm which is a non-differentiable function). In our approach, by separating the two parts in the minimization of the augmented Lagrangian, descent algorithms can be utilized to solve the performance promoting sub-problem (7) while different functions (e.g., l0-norm and l1-norm) can be incorporated as means of sparsity penalty terms in the original problem (1).\nModel size reduction : There are recent works focusing on reducing the parameters in the convolutional layers (Jaderberg et al. (2014); Ioannou et al. (2015); Tai et al. (2015)). In CNN models, the model size is dominated by the fully connected layers. Thus, the previous approaches are not capable of reducing the size of the whole model. Our proposed approach can be applied on both the convolution and fully connected layers and can speed up the computation as well as compressing the size of the model.\nCombinability with other methods : Several attempts have been made to compress the deep networks using the weights sharing and quantization (Han et al. (2016); Gupta et al. (2015); Vanhoucke et al. (2011)). However, these techniques can be used in conjunction with our proposed sparse method to achieve further speedup.\nSome methods such as SSL (Wen et al. (2016)), based on group Lasso regularization of the block structures (e.g. filters), appears to be closely related to our work. Indeed, these methods learn sparse filters and minimize the classification error simultaneously. In contrast, our proposed approach uses ADMM to provide a separate scheme that optimize the sparse blocks and classification error\nseparately. Indeed, at the core of our contribution, ADMM brings the above major separability and differentiability benefits to the proposed sparse CNN method. Our proposed algorithm has the advantage that it is partially and analytically solvable due to the separability property. This contributes to the efficient trainability of the model. Moreover, the differentiability problem of l0norm penalty function makes it unusable for a joint performance/sparsity optimization, while it can be conveniently incorporated as a sparsity penalty term in our proposed method.\nFurthermore, in the SSL method, strengths of structured sparsity regularization is selected by cross validation and the networks weights are initialized by the baseline. This is computationally beneficial for small regularization level. However, for larger regularization value, the presented SSL approach requires training the original full model from scratch. In contrast, our approach gradually modifies the regularization factor and each step continues training from the solution achieved in the previous step (corresponding to the previous regularization factor), which plays an important role in reducing the computational complexity of the method."}, {"heading": "ACKNOWLEDGMENTS", "text": "The authors gratefully acknowledge financial support by NSERC-Canada, MITACS, and E Machine Learning Inc., a GPU grant from NVidia, and access to the computational resources of Calcul Que\u0301bec and Compute Canada. The authors are also grateful to Annette Schwerdtfeger for proofreading this manuscript."}, {"heading": "APPENDIX A SIGNIFICANCE VALIDATION OF IMPROVEMENTS", "text": "On order to verify that the advantage of ADMM training is statistically significant, we conduct t-test by repeating the experiment 15 times on CIFAR-10 using NIN to compare the error rate of ADMM training and standard fine-tuning (by dropping the learning rate upon \u201cconvergence\u201d and continuing to learn), with the same number of epochs and learning rates. Initialized from the same baseline model with 90.71% accuracy, the ADMM training using l0-norm and standard fine-tuning on average achieve accuracy of 91.34% and 91.09%, respectively. The results demonstrate the ADMM training achieves improvement of 0.63% from the baseline model which is statistically significant (t-test result with p < 0.001). ADMM training performance is also significantly 25% better than what the standard fine-tuning achieves (t-test result with p < 0.001). The t-test experiment also shows that ADMM could reduce the variance of learning. In the 15 repeated experiments, ADMM training has the lowest standard deviation of errors compared with their counterparts using standard fine-tuning (standard deviation of 0.04% for ADMM vs 0.06% for standard fine-tuning)."}, {"heading": "APPENDIX B SINGLE RUN RESULTS", "text": "Due to space consideration, we present some extra results in the current appendix. First, the results for our sparsity promoting approach for the different models on CIFAR-10, CIFAR-100, and SVHN are presented in Tables 3, 4 and 5, respectively. Follows in Table 6 results showing joint variations of accuracy and sparsity obtained with increasing \u00b5 values, for the three tested datasets. All these results are for a single random run of each method on the dataset at hand."}], "references": [{"title": "Learning the number of neurons in deep networks", "author": ["Jose M Alvarez", "Mathieu Salzmann"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Alvarez and Salzmann.,? \\Q2016\\E", "shortCiteRegEx": "Alvarez and Salzmann.", "year": 2016}, {"title": "Deep learning with limited numerical precision", "author": ["Suyog Gupta", "Ankur Agrawal", "Kailash Gopalakrishnan", "Pritish Narayanan"], "venue": "In Proceedings of the 32nd International Conference on Machine Learning", "citeRegEx": "Gupta et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Gupta et al\\.", "year": 2015}, {"title": "Learning both weights and connections for efficient neural network", "author": ["Song Han", "Jeff Pool", "John Tran", "William Dally"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Han et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Han et al\\.", "year": 2015}, {"title": "Deep compression: Compressing deep neural network with pruning, trained quantization and Huffman coding", "author": ["Song Han", "Huizi Mao", "William J Dally"], "venue": "International Conference on Learning Representations,", "citeRegEx": "Han et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Han et al\\.", "year": 2016}, {"title": "Training CNNs with low-rank filters for efficient image classification", "author": ["Yani Ioannou", "Duncan Robertson", "Jamie Shotton", "Roberto Cipolla", "Antonio Criminisi"], "venue": "International Conference on Learning Representations,", "citeRegEx": "Ioannou et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Ioannou et al\\.", "year": 2015}, {"title": "Speeding up convolutional neural networks with low rank expansions", "author": ["Max Jaderberg", "Andrea Vedaldi", "Andrew Zisserman"], "venue": "In Proceedings of the British Machine Vision Conference (BMVC),", "citeRegEx": "Jaderberg et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Jaderberg et al\\.", "year": 2014}, {"title": "A double-layer ELM with added feature selection ability using a sparse bayesian approach", "author": ["Farkhondeh Kiaee", "Christian Gagn\u00e9", "Hamid Sheikhzadeh"], "venue": null, "citeRegEx": "Kiaee et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Kiaee et al\\.", "year": 2016}, {"title": "Relevance vector machine for survival analysis", "author": ["Farkhondeh Kiaee", "Hamid Sheikhzadeh", "Samaneh Eftekhari Mahabadi"], "venue": "IEEE Trans. on Neural Networks and Learning Systems,", "citeRegEx": "Kiaee et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Kiaee et al\\.", "year": 2016}, {"title": "Sparse bayesian mixedeffects extreme learning machine, an approach for unobserved clustered heterogeneity", "author": ["Farkhondeh Kiaee", "Hamid Sheikhzadeh", "Samaneh Eftekhari Mahabadi"], "venue": null, "citeRegEx": "Kiaee et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Kiaee et al\\.", "year": 2016}, {"title": "Design of optimal sparse feedback gains via the alternating direction method of multipliers", "author": ["Fu Lin", "Makan Fardad", "Mihailo R Jovanovi\u0107"], "venue": "IEEE Transactions on Automatic Control,", "citeRegEx": "Lin et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Lin et al\\.", "year": 2013}, {"title": "Sparse convolutional neural networks", "author": ["Baoyuan Liu", "Min Wang", "Hassan Foroosh", "Marshall Tappen", "Marianna Pensky"], "venue": "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,", "citeRegEx": "Liu et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Liu et al\\.", "year": 2015}, {"title": "An alternating direction method for dual map LP relaxation", "author": ["Ofer Meshi", "Amir Globerson"], "venue": "In Joint European Conference on Machine Learning and Knowledge Discovery in Databases,", "citeRegEx": "Meshi and Globerson.,? \\Q2011\\E", "shortCiteRegEx": "Meshi and Globerson.", "year": 2011}, {"title": "Distributed robust multicell coordinated beamforming with imperfect CSI: An ADMM approach", "author": ["Chao Shen", "Tsung-Hui Chang", "Kun-Yu Wang", "Zhengding Qiu", "Chong-Yung Chi"], "venue": "IEEE Transactions on signal processing,", "citeRegEx": "Shen et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Shen et al\\.", "year": 2012}, {"title": "Convolutional neural networks with low-rank regularization", "author": ["Cheng Tai", "Tong Xiao", "Xiaogang Wang"], "venue": "arXiv preprint arXiv:1511.06067,", "citeRegEx": "Tai et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Tai et al\\.", "year": 2015}, {"title": "Improving the speed of neural networks on CPUs", "author": ["Vincent Vanhoucke", "Andrew Senior", "Mark Z Mao"], "venue": "In Deep Learning and Unsupervised Feature Learning Workshop,", "citeRegEx": "Vanhoucke et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Vanhoucke et al\\.", "year": 2011}, {"title": "Learning structured sparsity in deep neural networks", "author": ["Wei Wen", "Chunpeng Wu", "Yandan Wang", "Yiran Chen", "Hai Li"], "venue": "In Advances In Neural Information Processing Systems,", "citeRegEx": "Wen et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Wen et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 4, "context": "Jaderberg et al. (2014) proposed to represent the full-rank original convolutional filters tensor by a low-rank approximation composed of a sequence of two regular convolutional layers, with rectangular filters in the spatial domain.", "startOffset": 0, "endOffset": 24}, {"referenceID": 4, "context": "A different network connection structure is suggested by Ioannou et al. (2015), which implicitly learns linear combinations of rectangular filters in the spatial domain, with different vertical/horizontal orientations.", "startOffset": 57, "endOffset": 79}, {"referenceID": 4, "context": "A different network connection structure is suggested by Ioannou et al. (2015), which implicitly learns linear combinations of rectangular filters in the spatial domain, with different vertical/horizontal orientations. Tai et al. (2015) presented an exact and closed-form solution to the low-rank decomposition approach of Jaderberg et al.", "startOffset": 57, "endOffset": 237}, {"referenceID": 4, "context": "A different network connection structure is suggested by Ioannou et al. (2015), which implicitly learns linear combinations of rectangular filters in the spatial domain, with different vertical/horizontal orientations. Tai et al. (2015) presented an exact and closed-form solution to the low-rank decomposition approach of Jaderberg et al. (2014) to enforce connection sparsity on CNNs.", "startOffset": 57, "endOffset": 347}, {"referenceID": 4, "context": "A different network connection structure is suggested by Ioannou et al. (2015), which implicitly learns linear combinations of rectangular filters in the spatial domain, with different vertical/horizontal orientations. Tai et al. (2015) presented an exact and closed-form solution to the low-rank decomposition approach of Jaderberg et al. (2014) to enforce connection sparsity on CNNs. Sparse learning has been shown to be efficient at pruning the irrelevant parameters in many practical applications, by incorporating sparsity-promoting penalty functions into the original problem, where the added sparsity-promoting terms penalize the number of parameters (Kiaee et al. (2016a;b;c)). Motivated by learning efficient architectures of a deep CNN for embedded implementations, our work focuses on the design of a sparse network using an initial pre-trained dense CNN. The alternating direction method of multipliers (ADMM) (Boyd et al. (2011)) has been extensively studied to minimize the augmented Lagrangian function for optimization problems, by breaking them into smaller pieces.", "startOffset": 57, "endOffset": 943}, {"referenceID": 4, "context": "A different network connection structure is suggested by Ioannou et al. (2015), which implicitly learns linear combinations of rectangular filters in the spatial domain, with different vertical/horizontal orientations. Tai et al. (2015) presented an exact and closed-form solution to the low-rank decomposition approach of Jaderberg et al. (2014) to enforce connection sparsity on CNNs. Sparse learning has been shown to be efficient at pruning the irrelevant parameters in many practical applications, by incorporating sparsity-promoting penalty functions into the original problem, where the added sparsity-promoting terms penalize the number of parameters (Kiaee et al. (2016a;b;c)). Motivated by learning efficient architectures of a deep CNN for embedded implementations, our work focuses on the design of a sparse network using an initial pre-trained dense CNN. The alternating direction method of multipliers (ADMM) (Boyd et al. (2011)) has been extensively studied to minimize the augmented Lagrangian function for optimization problems, by breaking them into smaller pieces. It turns out that ADMM has been recently applied in a variety of contexts (Lin et al. (2013a); Shen et al.", "startOffset": 57, "endOffset": 1178}, {"referenceID": 4, "context": "A different network connection structure is suggested by Ioannou et al. (2015), which implicitly learns linear combinations of rectangular filters in the spatial domain, with different vertical/horizontal orientations. Tai et al. (2015) presented an exact and closed-form solution to the low-rank decomposition approach of Jaderberg et al. (2014) to enforce connection sparsity on CNNs. Sparse learning has been shown to be efficient at pruning the irrelevant parameters in many practical applications, by incorporating sparsity-promoting penalty functions into the original problem, where the added sparsity-promoting terms penalize the number of parameters (Kiaee et al. (2016a;b;c)). Motivated by learning efficient architectures of a deep CNN for embedded implementations, our work focuses on the design of a sparse network using an initial pre-trained dense CNN. The alternating direction method of multipliers (ADMM) (Boyd et al. (2011)) has been extensively studied to minimize the augmented Lagrangian function for optimization problems, by breaking them into smaller pieces. It turns out that ADMM has been recently applied in a variety of contexts (Lin et al. (2013a); Shen et al. (2012); Meshi & Globerson (2011)).", "startOffset": 57, "endOffset": 1198}, {"referenceID": 4, "context": "A different network connection structure is suggested by Ioannou et al. (2015), which implicitly learns linear combinations of rectangular filters in the spatial domain, with different vertical/horizontal orientations. Tai et al. (2015) presented an exact and closed-form solution to the low-rank decomposition approach of Jaderberg et al. (2014) to enforce connection sparsity on CNNs. Sparse learning has been shown to be efficient at pruning the irrelevant parameters in many practical applications, by incorporating sparsity-promoting penalty functions into the original problem, where the added sparsity-promoting terms penalize the number of parameters (Kiaee et al. (2016a;b;c)). Motivated by learning efficient architectures of a deep CNN for embedded implementations, our work focuses on the design of a sparse network using an initial pre-trained dense CNN. The alternating direction method of multipliers (ADMM) (Boyd et al. (2011)) has been extensively studied to minimize the augmented Lagrangian function for optimization problems, by breaking them into smaller pieces. It turns out that ADMM has been recently applied in a variety of contexts (Lin et al. (2013a); Shen et al. (2012); Meshi & Globerson (2011)).", "startOffset": 57, "endOffset": 1224}, {"referenceID": 12, "context": "Several approaches have been developed to create sparse networks by applying pruning or sparsity regularizers: Wen et al. (2016); Alvarez & Salzmann (2016); Liu et al.", "startOffset": 111, "endOffset": 129}, {"referenceID": 12, "context": "Several approaches have been developed to create sparse networks by applying pruning or sparsity regularizers: Wen et al. (2016); Alvarez & Salzmann (2016); Liu et al.", "startOffset": 111, "endOffset": 156}, {"referenceID": 8, "context": "(2016); Alvarez & Salzmann (2016); Liu et al. (2015); Han et al.", "startOffset": 35, "endOffset": 53}, {"referenceID": 2, "context": "(2015); Han et al. (2015). The most relevant to our work in these papers is the Structured Sparsity Learning (SSL) method of Wen et al.", "startOffset": 8, "endOffset": 26}, {"referenceID": 2, "context": "(2015); Han et al. (2015). The most relevant to our work in these papers is the Structured Sparsity Learning (SSL) method of Wen et al. (2016), that regularizes the structures (i.", "startOffset": 8, "endOffset": 143}, {"referenceID": 4, "context": ", 2013b), its low-rank version (Ioannou et al., 2015), a custom CNN, and its low-rank counterpart as well, two last being learned from scratch on the CIFAR dataset.", "startOffset": 31, "endOffset": 53}, {"referenceID": 4, "context": ", 2013b), its low-rank version (Ioannou et al., 2015), a custom CNN, and its low-rank counterpart as well, two last being learned from scratch on the CIFAR dataset. The configurations of the baseline models are outlined in Table 1. The architecture of the NIN model is slightly different from the one introduced in Lin et al. (2013b). The original NIN uses 5x5 filters in the first and second convolutional layer which are replaced with one and two layers of 3x3 filters, respectively.", "startOffset": 32, "endOffset": 334}, {"referenceID": 4, "context": ", 2013b), its low-rank version (Ioannou et al., 2015), a custom CNN, and its low-rank counterpart as well, two last being learned from scratch on the CIFAR dataset. The configurations of the baseline models are outlined in Table 1. The architecture of the NIN model is slightly different from the one introduced in Lin et al. (2013b). The original NIN uses 5x5 filters in the first and second convolutional layer which are replaced with one and two layers of 3x3 filters, respectively. As suggested by Ioannou et al. (2015), this modified architecture has comparable accuracy and less", "startOffset": 32, "endOffset": 524}, {"referenceID": 9, "context": "The training and testing procedure of the baseline models follows Lin et al. (2013b). The baseline NIN, low-rank NIN, custom CNN, and low-rank CNN models show the accuracy of 96.", "startOffset": 66, "endOffset": 85}, {"referenceID": 1, "context": "Model size reduction : There are recent works focusing on reducing the parameters in the convolutional layers (Jaderberg et al. (2014); Ioannou et al.", "startOffset": 111, "endOffset": 135}, {"referenceID": 1, "context": "Combinability with other methods : Several attempts have been made to compress the deep networks using the weights sharing and quantization (Han et al. (2016); Gupta et al.", "startOffset": 141, "endOffset": 159}, {"referenceID": 15, "context": "Some methods such as SSL (Wen et al. (2016)), based on group Lasso regularization of the block structures (e.", "startOffset": 26, "endOffset": 44}], "year": 2017, "abstractText": "The storage and computation requirements of Convolutional Neural Networks (CNNs) can be prohibitive for exploiting these models over low-power or embedded devices. This paper reduces the computational complexity of the CNNs by minimizing an objective function, including the recognition loss that is augmented with a sparsity-promoting penalty term. The sparsity structure of the network is identified using the Alternating Direction Method of Multipliers (ADMM), which is widely used in large optimization problems. This method alternates between promoting the sparsity of the network and optimizing the recognition performance, which allows us to exploit the two-part structure of the corresponding objective functions. In particular, we take advantage of the separability of the sparsity-inducing penalty functions to decompose the minimization problem into sub-problems that can be solved sequentially. Applying our method to a variety of state-of-the-art CNN models, our proposed method is able to simplify the original model, generating models with less computation and fewer parameters, while maintaining and often improving generalization performance. Accomplishments on a variety of models strongly verify that our proposed ADMM-based method can be a very useful tool for simplifying and improving deep CNNs.", "creator": "LaTeX with hyperref package"}, "id": "ICLR_2017_349"}