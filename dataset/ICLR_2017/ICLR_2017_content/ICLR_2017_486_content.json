{"name": "ICLR_2017_486.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["MARKOV CHAINS", "Antonia Creswell", "Kai Arulkumaran", "Anil A. Bharath"], "emails": ["ac2211@ic.ac.uk", "ka709@ic.ac.uk", "aab01@ic.ac.uk"], "sections": [{"heading": "1 INTRODUCTION", "text": "Unsupervised learning has benefited greatly from the introduction of deep generative models. In particular, the introduction of generative adversarial networks (GANs) (Goodfellow et al., 2014) and variational autoencoders (VAEs) (Kingma & Welling, 2014; Rezende et al., 2014) has led to a plethora of research into learning latent variable models that are capable of generating data from complex distributions, including the space of natural images (Radford et al., 2015). Both of these models, and their extensions, operate by placing a prior distribution, P (Z), over a latent space Z \u2286 Rb, and learn mappings from the latent space, Z, to the space of the observed data, X \u2286 Ra. We are interested in autoencoding generative models, models which learn not just the generative mapping Z 7\u2192 X , but also the inferential mapping X 7\u2192 Z. Specifically, we define generative autoencoders as autoencoders which softly constrain their latent distribution, to match a specified prior distribution, P (Z). This is achieved by minimising a loss, Lprior, between the latent distribution and the prior. This includes VAEs (Kingma & Welling, 2014; Rezende et al., 2014), extensions of VAEs (Kingma et al., 2016), and also adversarial autoencoders (AAEs) (Makhzani et al., 2015). Whilst other autoencoders also learn an encoding function, e : Ra \u2192 Z, together with a decoding function, d : Rb \u2192 X , the latent space is not necessarily constrained to conform to a specified probability distribution. This is the key distinction for generative autoencoders; both e and d can still be deterministic functions (Makhzani et al., 2015).\nThe functions e and d are defined for any input from Ra and Rb respectively, however the outputs of the functions may be constrained practically by the type of functions that e and d are, such that e maps to Z \u2286 Rb and d maps to X \u2286 Ra. During training however, the encoder, e is only fed with training data samples, x \u2208 X and the decoder, d is only fed with samples from the encoder, z \u2208 Z, and so the encoder and decoder learn mappings between X and Z.\nThe process of encoding and decoding may be interpreted as sampling the conditional probabilities Q\u03c6(Z|X) and P\u03b8(X|Z) respectively. The conditional distributions may be sampled using the encoding and decoding functions e(X;\u03c6) and d(Z; \u03b8), where \u03c6 and \u03b8 are learned parameters of the\nencoding and decoding functions respectively. The decoder of a generative autoencoder may be used to generate new samples that are consistent with the data. There are two traditional approaches for sampling generative autoencoders:\nApproach 1 (Bengio et al., 2014):\nx0 \u223c P (X), z0 \u223c Q\u03c6(Z|X = x0), x1 \u223c P\u03b8(X|Z = z0)\nwhere P (X) is the data generating distribution. However, this approach is likely to generate samples similar to those in the training data, rather than generating novel samples that are consistent with the training data.\nApproach 2 (Kingma & Welling, 2014; Makhzani et al., 2015; Rezende et al., 2014): z0 \u223c P (Z), x0 \u223c P\u03b8(X|Z = z0)\nwhere P (Z) is the prior distribution enforced during training and P\u03b8(X|Z) is the decoder trained to map samples drawn from Q\u03c6(Z|X) to samples consistent with P (X). This approach assumes that\u222b Q\u03c6(Z|X)P (X)dX = P (Z), suggesting that the encoder maps all data samples from P (X)\nto a distribution that matches the prior distribution, P (Z). However, it is not always true that\u222b Q\u03c6(Z|X)P (X)dX = P (Z). Rather Q\u03c6(Z|X) maps data samples to a distribution which we\ncall, P\u0302 (Z): \u222b Q\u03c6(Z|X)P (X)dX = P\u0302 (Z)\nwhere it is not necessarily true that P\u0302 (Z) = P (Z) because the prior is only softly enforced. The decoder, on the other hand, is trained to map encoded data samples (i.e. samples from\u222b Q\u03c6(Z|X)P (X)dX) to samples from X which have the distribution P (X). If the encoder maps\nobserved samples to latent samples with the distribution P\u0302 (Z), rather than the desired prior distribution, P (Z), then: \u222b\nP\u03b8(X|Z)P (Z)dZ 6= P (X)\nThis suggests that samples drawn from the decoder, P\u03b8(X|Z), conditioned on samples drawn from the prior, P (Z), may not be consistent with the data generating distribution, P (X). However, by conditioning on P\u0302 (Z): \u222b\nP\u03b8(X|Z)P\u0302 (Z)dZ = P (X)\nThis suggests that to obtain more realistic generations, latent samples should be drawn via z \u223c P\u0302 (Z) rather than z \u223c P (Z), followed by x \u223c P\u03b8(X|Z). A limited number of latent samples may be drawn from P\u0302 (Z) using the first two steps in Approach 1 - however this has the drawbacks discussed in Approach 1. We introduce an alternative method for sampling from P\u0302 (Z) which does not have the same drawbacks.\nOur main contribution is the formulation of a Markov chain Monte Carlo (MCMC) sampling process for generative autoencoders, which allows us to sample from P\u0302 (Z). By iteratively sampling the chain, starting from an arbitrary zt=0 \u2208 Rb, the chain converges to zt\u2192\u221e \u223c P\u0302 (Z), allowing us to draw latent samples from P\u0302 (Z) after several steps of MCMC sampling. From a practical perspective, this is achieved by iteratively decoding and encoding, which may be easily applied to existing generative autoencoders. Because P\u0302 (Z) is optimised to be close to P (Z), the initial sample, zt=0 can be drawn from P (Z), improving the quality of the samples within a few iterations.\nWhen interpolating between latent encodings, there is no guarantee that z stays within high density regions of P\u0302 (Z). Previously, this has been addressed by using spherical, rather than linear interpolation of the high dimensional Z space (White, 2016). However, this approach attempts to keep z\nwithin P (Z), rather than trying to sample from P\u0302 (Z). By instead applying several steps of MCMC sampling to the interpolated z samples before sampling P\u03b8(X|Z), unrealistic artifacts can be reduced (see Figure 2). Whilst most methods that aim to generate realistic samples from X rely on adjusting encodings of the observed data (White, 2016), our use of MCMC allows us to walk any latent sample to more probable regions of the learned latent distribution, resulting in more convincing generations. We demonstrate that the use of MCMC sampling improves generations from both VAEs and AAEs with high-dimensional Z; this is important as previous studies have shown that the dimensionality of Z should be scaled with the intrinsic latent dimensionality of the observed data.\nOur second contribution is the modification of the proposed transition operator for the MCMC sampling process to denoising generative autoencoders. These are generative autoencoders trained using a denoising criterion, (Seung, 1997; Vincent et al., 2008). We reformulate our original MCMC sampling process to incorporate the noising and denoising processes, allowing us to use MCMC sampling on denoising generative autoencoders. We apply this sampling technique to two models. The first is the denoising VAE (DVAE) introduced by Im et al. (2015). We found that MCMC sampling revealed benefits of the denoising criterion. The second model is a denoising AAE (DAAE), constructed by applying the denoising criterion to the AAE. There were no modifications to the cost function. For both the DVAE and the DAAE, the effects of the denoising crtierion were not immediately obvious from the initial samples. Training generative autoencoders with a denoising criterion reduced visual artefacts found both in generations and in interpolations. The effect of the denoising criterion was revealed when sampling the denoising models using MCMC sampling."}, {"heading": "2 BACKGROUND", "text": "One of the main tasks in machine learning is to learn explanatory factors for observed data, commonly known as inference. That is, given a data sample x \u2208 X \u2286 Ra, we would like to find a corresponding latent encoding z \u2208 Z \u2286 Rb. Another task is to learn the inverse, generative mapping from a given z to a corresponding x. In general, coming up with a suitable criterion for learning these mappings is difficult. Autoencoders solve both tasks efficiently by jointly learning an inferential mapping e(X;\u03c6) and generative mapping d(Z; \u03b8), using unlabelled data from X in a self-supervised fashion (Kingma & Welling, 2014). The basic objective of all autoencoders is to minimise a reconstruction cost, Lreconstruct, between the original data, X , and its reconstruction, d(e(X;\u03c6); \u03b8). Examples of Lreconstruct include the squared error loss, 12 \u2211N n=1 \u2016d(e(xn;\u03c6); \u03b8) \u2212 xn\u20162, and the cross-entropy loss, H[P (X)\u2016P (d(e(X;\u03c6); \u03b8))] =\n\u2212 \u2211N n=1 xn log(d(e(xn;\u03c6); \u03b8)) + (1\u2212 xn) log(1\u2212 d(e(xn;\u03c6); \u03b8)).\nAutoencoders may be cast into a probablistic framework, by considering samples x \u223c P (X) and z \u223c P (Z), and attempting to learn the conditional distributions Q\u03c6(Z|X) and P\u03b8(X|Z) as e(X;\u03c6) and d(Z; \u03b8) respectively, with Lreconstruct representing the negative log-likelihood of the reconstruction given the encoding (Bengio, 2009). With any autoencoder, it is possible to create novel x \u2208 X by passing a z \u2208 Z through d(Z; \u03b8), but we have no knowledge of appropriate choices of z beyond those obtained via e(X;\u03c6). One solution is to constrain the latent space to which the encoding model maps observed samples. This can be achieved by an additional loss, Lprior, that penalises encodings far away from a specified prior distribution, P (Z). We now review two types of generative autoencoders, VAEs (Kingma & Welling, 2014; Rezende et al., 2014) and AAEs (Makhzani et al., 2015), which each take different approaches to formulating Lprior."}, {"heading": "2.1 GENERATIVE AUTOENCODERS", "text": "Consider the case where e is constructed with stochastic neurons that can produce outputs from a specified probability distribution, and Lprior is used to constrain the distribution of outputs to P (Z). This leaves the problem of estimating the gradient of the autoencoder over the expectation EQ\u03c6(Z|X), which would typically be addressed with a Monte Carlo method. VAEs sidestep this by constructing latent samples using a deterministic function and a source of noise, moving the source of stochasticity to an input, and leaving the network itself deterministic for standard gradient calculations\u2014a technique commonly known as the reparameterisation trick (Kingma & Welling, 2014). e(X;\u03c6) then consists of a deterministic function, erep(X;\u03c6), that outputs parameters for a probability distribution, plus a source of noise. In the case where P (Z) is a diagonal covariance Gaussian, erep(X;\u03c6)\nmaps x to a vector of means, \u00b5 \u2208 Rb, and a vector of standard deviations, \u03c3 \u2208 Rb+, with the noise \u223c N (0, I). Put together, the encoder outputs samples z = \u00b5+ \u03c3, where is the Hadamard product. VAEs attempt to make these samples from the encoder match up with P (Z) by using the KL divergence between the parameters for a probability distribution outputted by erep(X;\u03c6), and the parameters for the prior distribution, giving Lprior = DKL[Q\u03c6(Z|X)\u2016P (Z)]. A multivariate Gaussian has an analytical KL divergence that can be further simplified when considering the unit Gaussian, resulting in Lprior = 12 \u2211N n=1 \u00b5\n2 + \u03c32 \u2212 log(\u03c32)\u2212 1. Another approach is to deterministically output the encodings z. Rather than minimising a metric between probability distributions using their parameters, we can turn this into a density ratio estimation problem where the goal is to learn a conditional distribution, Q\u03c6(Z|X), such that the distribution of the encoded data samples, P\u0302 (Z) = \u222b Q\u03c6(Z|X)P (X)dX , matches the prior distribution, P (Z). The GAN framework solves this density ratio estimation problem by transforming it into a class estimation problem using two networks (Goodfellow et al., 2014). The first network in GAN training is the discriminator network, D\u03c8 , which is trained to maximise the log probability of samples from the \u201creal\u201d distribution, z \u223c P (Z), and minimise the log probability of samples from the \u201cfake\u201d distribution, z \u223c Q\u03c6(Z|X). In our case e(X;\u03c6) plays the role of the second network, the generator network, G\u03c6, which generates the \u201cfake\u201d samples.1 The two networks compete in a minimax game, where G\u03c6 receives gradients from D\u03c8 such that it learns to better fool D\u03c8 . The training objective for both networks is given by Lprior = argmin\u03c6 argmax\u03c8 EP (Z)[log(D\u03c8(Z))]+ EP (X)[log(1\u2212D\u03c8(G\u03c6(X)))] = argmin\u03c6 argmax\u03c8 EP (Z)[log(D\u03c8(Z))] + EQ\u03c6(Z|X)P (X) log[1\u2212 D\u03c8(Z)]. This formulation can create problems during training, so instead G\u03c6 is trained to minimise \u2212 log(D\u03c8(G\u03c6(X))), which provides the same fixed point of the dynamics of G\u03c6 and D\u03c8 . The result of applying the GAN framework to the encoder of an autoencoder is the deterministic AAE (Makhzani et al., 2015)."}, {"heading": "2.2 DENOISING AUTOENCODERS", "text": "In a more general viewpoint, generative autoencoders fulfill the purpose of learning useful representations of the observed data. Another widely used class of autoencoders that achieve this are denoising autoencoders (DAEs), which are motivated by the idea that learned features should be robust to \u201cpartial destruction of the input\u201d (Vincent et al., 2008). Not only does this require encoding the inputs, but capturing the statistical dependencies between the inputs so that corrupted data can be recovered (see Figure 3). DAEs are presented with a corrupted version of the input, x\u0303 \u2208 X\u0303 , but must still reconstruct the original input, x \u2208 X , where the noisy inputs are created through sampling x\u0303 \u223c C(X\u0303|X), a corruption process. The denoising criterion, Ldenoise, can be applied to any type of autoencoder by replacing the straightforward reconstruction criterion, Lreconstruct(X, d(e(X;\u03c6); \u03b8)), with the reconstruction criterion applied to noisy inputs: Lreconstruct(X, d(e(X\u0303;\u03c6); \u03b8)). The encoder is now used to model samples drawn from Q\u03c6(Z|X\u0303). As such, we can construct denoising generative autoencoders by training autoencoders to minimise Ldenoise + Lprior. One might expect to see differences in samples drawn from denoising generative autoencoders and their non-denoising counterparts. However, Figures 4 and 6 show that this is not the case. Im et al.\n1We adapt the variables to better fit the conventions used in the context of autoencoders.\n(2015) address the case of DVAEs, claiming that the noise mapping requires adjusting the original VAE objective function. Our work is orthogonal to theirs, and others which adjust the training or model (Kingma et al., 2016), as we focus purely on sampling from generative autoencoders after training. We claim that the existing practice of drawing samples from generative autoencoders conditioned on z \u223c P (Z) is suboptimal, and the quality of samples can be improved by instead conditioning on z \u223c P\u0302 (Z) via MCMC sampling."}, {"heading": "3 MARKOV SAMPLING", "text": "We now consider the case of sampling from generative autoencoders, where d(Z; \u03b8) is used to draw samples from P\u03b8(X|Z). In Section 1, we showed that it was important, when sampling P\u03b8(X|Z), to condition on z\u2019s drawn from P\u0302 (Z), rather than P (Z) as is often done in practice. However, we now show that for any initial z0 \u2208 Z0 = Rb, Markov sampling can be used to produce a chain of samples zt, such that as t \u2192 \u221e, produces samples zt that are from the distribution P\u0302 (Z), which may be used to draw meaningful samples from P\u03b8(X|Z), conditioned on z \u223c P\u0302 (Z). To speed up convergence we can initialise z0 from a distribution close to P\u0302 (Z), by drawing z0 \u223c P (Z)."}, {"heading": "3.1 MARKOV SAMPLING PROCESS", "text": "A generative autoencoder can be sampled by the following process:\nz0 \u2208 Z0 = Rb, xt+1 \u223c P\u03b8(X|Zt), zt+1 \u223c Q\u03c6(Z|Xt+1)\nThis allows us to define a Markov chain with the transition operator\nT (Zt+1|Zt) = \u222b Q\u03c6(Zt+1|X)P\u03b8(X|Zt)dX (1)\nfor t \u2265 0. Drawing samples according to the transition operator T (Zt+1|Zt) produces a Markov chain. For the transition operator to be homogeneous, the parameters of the encoding and decoding functions are fixed during sampling."}, {"heading": "3.2 CONVERGENCE PROPERTIES", "text": "We now show that the stationary distribution of sampling from the Markov chain is P\u0302 (Z).\nTheorem 1. If T (Zt+1|Zt) defines an ergodic Markov chain, {Z1, Z2...Zt}, then the chain will converge to a stationary distribution, \u03a0(Z), from any arbitrary initial distribution. The stationary distribution \u03a0(Z) = P\u0302 (Z).\nThe proof of Theorem 1 can be found in (Rosenthal, 2001).\nLemma 1. T (Zt+1|Zt) defines an ergodic Markov chain.\nProof. For a Markov chain to be ergodic it must be both irreducible (it is possible to get from any state to any other state in a finite number of steps) and aperiodic (it is possible to get from any state to any other state without having to pass through a cycle). To satisfy these requirements, it is more than sufficient to show that T (Zt+1|Zt) > 0, since every z \u2208 Z would be reachable from every other z \u2208 Z. We show that P\u03b8(X|Z) > 0 and Q\u03c6(Z|X) > 0, giving T (Zt+1|Zt) > 0, providing the proof of this in Section A of the supplementary material.\nLemma 2. The stationary distribution of the chain defined by T (Zt+1|Zt) is \u03a0(Z) = P\u0302 (Z).\nProof. For the transition operator defined in Equation (1), the asymptotic distribution to which T (Zt+1|Zt) converges to is P\u0302 (Z), because P\u0302 (Z) is, by definition, the marginal of the joint distributionQ\u03c6(Z|X)P (X), over which theLprior used to learn the conditional distributionQ\u03c6(Z|X).\nUsing Lemmas 1 and 2 with Theorem 1, we can say that the Markov chain defined by the transition operator in Equation (1) will produce a Markov chain that converges to the stationary distribution \u03a0(Z) = P\u0302 (Z)."}, {"heading": "3.3 EXTENSION TO DENOISING GENERATIVE AUTOENCODERS", "text": "A denoising generative autoencoder can be sampled by the following process:\nz0 \u2208 Z0 = Rb, xt+1 \u223c P\u03b8(X|Zt), x\u0303t+1 \u223c C(X\u0303|Xt+1), zt+1 \u223c Q\u03c6(Z|X\u0303t+1).\nThis allows us to define a Markov chain with the transition operator\nT (Zt+1|Zt) = \u222b Q\u03c6(Zt+1|X\u0303)C(X\u0303|X)P\u03b8(X|Zt)dXdX\u0303 (2)\nfor t \u2265 0. The same arguments for the proof of convergence of Equation (1) can be applied to Equation (2)."}, {"heading": "3.4 RELATED WORK", "text": "Our work is inspired by that of Bengio et al. (2013); denoising autoencoders are cast into a probabilistic framework, where P\u03b8(X|X\u0303) is the denoising (decoder) distribution and C(X\u0303|X) is the corruption (encoding) distribution. X\u0303 represents the space of corrupted samples. Bengio et al. (2013) define a transition operator of a Markov chain \u2013 using these conditional distributions \u2013 whose stationary distribution is P (X) under the assumption that P\u03b8(X|X\u0303) perfectly denoises samples. The chain is initialised with samples from the training data, and used to generate a chain of samples from P (X). This work was generalised to include a corruption process that mapped data samples to latent variables (Bengio et al., 2014), to create a new type of network called Generative Stochastic Networks (GSNs). However in GSNs (Bengio et al., 2014) the latent space is not regularised with a prior.\nOur work is similar to several approaches proposed by Bengio et al. (2013; 2014) and Rezende et al. (Rezende et al., 2014). Both Bengio et al. and Rezende et al. define a transition operator in terms of Xt and Xt\u22121. Bengio et al. generate samples with an initial X0 drawn from the observed data, while Rezende et al. reconstruct samples from an X0 which is a corrupted version of a data sample. In contrasts to Bengio et al. and Rezende et al., in this work we define the transition operator in terms of Zt+1 and Zt, initialise samples with a Z0 that is drawn from a prior distribution we can directly sample from, and then sample X1 conditioned on Z0. Although the initial samples may be poor, we are likely to generate a novel X1 on the first step of MCMC sampling, which would not be achieved using Bengio et al.\u2019s or Rezende et al.\u2019s approach. We are able draw initial Z0 from a prior because we constrain P\u0302 (Z) to be close to a prior distribution P (Z); in Bengio et al. a latent space is either not explicitly modeled (Bengio et al., 2013) or it is not constrained (Bengio et al., 2014).\nFurther, Rezende et al. (2014) explicitly assume that the distribution of latent samples drawn from Q\u03c6(Z|X) matches the prior, P (Z). Instead, we assume that samples drawn from Q\u03c6(Z|X) have a distribution P\u0302 (Z) that does not necessarily match the prior, P (Z). We propose an alternative method for sampling P\u0302 (Z) in order to improve the quality of generated image samples. Our motivation is also different to Rezende et al. (2014) since we use sampling to generate improved, novel data samples, while they use sampling to denoise corrupted samples."}, {"heading": "3.5 EFFECT OF REGULARISATION METHOD", "text": "The choice of Lprior may effect how much improvement can be gained when using MCMC sampling, assuming that the optimisation process converges to a reasonable solution. We first consider the case of VAEs, which minimise DKL[Q\u03c6(Z|X)\u2016P (Z)]. Minimising this KL divergence penalises the model P\u0302 (Z) if it contains samples that are outside the support of the true distribution P (Z), which might mean that P\u0302 (Z) captures only a part of P (Z). This means that when sampling\nP (Z), we may draw from a region that is not captured by P\u0302 (Z). This suggests that MCMC sampling can improve samples from trained VAEs by walking them towards denser regions in P\u0302 (Z).\nGenerally speaking, using the reverse KL divergence during training, DKL[P (Z)\u2016Q\u03c6(Z|X)], penalises the model Q\u03c6(Z|X) if P (Z) produces samples that are outside of the support of P\u0302 (Z). By minimising this KL divergence, most samples in P (Z) will likely be in P\u0302 (Z) as well. AAEs, on the other hand are regularised using the JS entropy, given by 12DKL[P (Z)\u2016 1 2 (P (Z) + Q\u03c6(Z|X))] + 1 2DKL[Q\u03c6(Z|X)\u2016 1 2 (P (Z) + Q\u03c6(Z|X))]. Minimising this cost function attempts to find a compromise between the aforementioned extremes. However, this still suggests that some samples from P (Z) may lie outside P\u0302 (Z), and so we expect AAEs to also benefit from MCMC sampling."}, {"heading": "4 EXPERIMENTS", "text": ""}, {"heading": "4.1 MODELS", "text": "We utilise the deep convolutional GAN (DCGAN) (Radford et al., 2015) as a basis for our autoencoder models. Although the recommendations from Radford et al. (2015) are for standard GAN architectures, we adopt them as sensible defaults for an autoencoder, with our encoder mimicking the DCGAN\u2019s discriminator, and our decoder mimicking the generator. The encoder uses strided convolutions rather than max-pooling, and the decoder uses fractionally-strided convolutions rather than a fixed upsampling. Each convolutional layer is succeeded by spatial batch normalisation (Ioffe & Szegedy, 2015) and ReLU nonlinearities, except for the top of the decoder which utilises a sigmoid function to constrain the output values between 0 and 1. We minimise the cross-entropy between the original and reconstructed images. Although this results in blurry images in regions which are ambiguous, such as hair detail, we opt not to use extra loss functions that improve the visual quality of generations (Larsen et al., 2015; Dosovitskiy & Brox, 2016; Lamb et al., 2016) to avoid confounding our results.\nAlthough the AAE is capable of approximating complex probabilistic posteriors (Makhzani et al., 2015), we construct ours to output a deterministic Q\u03c6(Z|X). As such, the final layer of the encoder part of our AAEs is a convolutional layer that deterministically outputs a latent sample, z. The adversary is a fully-connected network with dropout and leaky ReLU nonlinearities. erep(X;\u03c6) of our VAEs have an output of twice the size, which corresponds to the means, \u00b5, and standard deviations, \u03c3, of a diagonal covariance Gaussian distribution. For all models our prior, P (Z), is a 200D isotropic Gaussian with zero mean and unit variance: N (0, I)."}, {"heading": "4.2 DATASETS", "text": "Our primary dataset is the (aligned and cropped) CelebA dataset, which consists of 200,000 images of celebrities (Liu et al., 2015). The DCGAN (Radford et al., 2015) was the first generative neural network model to show convincing novel samples from this dataset, and it has been used ever since as a qualitative benchmark due to the amount and quality of samples. In Figures 7 and 8 of the supplementary material, we also include results on the SVHN dataset, which consists of 100,000 images of house numbers extracted from Google Street view images (Netzer et al., 2011)."}, {"heading": "4.3 TRAINING & EVALUATION", "text": "For all datasets we perform the same preprocessing: cropping the centre to create a square image, then resizing to 64 \u00d7 64px. We train our generative autoencoders for 20 epochs on the training split of the datasets, using Adam (Kingma & Ba, 2014) with \u03b1 = 0.0002, \u03b21 = 0.5 and \u03b22 = 0.999. The denoising generative autoencoders use the additive Gaussian noise mapping C(X\u0303|X) = N (X, 0.25I). All of our experiments were run using the Torch library (Collobert et al., 2011).2\nFor evaluation, we generate novel samples from the decoder using z initially sampled from P (Z); we also show spherical interpolations (White, 2016) between four images of the testing split, as depicted in Figure 2. We then perform several steps of MCMC sampling on the novel samples and interpolations. During this process, we use the training mode of batch normalisation (Ioffe &\n2Example code is available at https://github.com/Kaixhin/Autoencoders.\nSzegedy, 2015), i.e., we normalise the inputs using minibatch rather than population statistics, as the normalisation can partially compensate for poor initial inputs (see Figure 4) that are far from the training distribution. We compare novel samples between all models below, and leave further interpolation results to Figures 5 and 6 of the supplementary material."}, {"heading": "4.4 SAMPLES", "text": ""}, {"heading": "5 CONCLUSION", "text": "Autoencoders consist of a decoder, d(Z; \u03b8) and an encoder, e(X;\u03c6) function, where \u03c6 and \u03b8 are learned parameters. Functions e(X;\u03c6) and d(Z; \u03b8) may be used to draw samples from the conditional distributions P\u03b8(X|Z) andQ\u03c6(Z|X) (Bengio et al., 2014; 2013; Rezende et al., 2014), where X refers to the space of observed samples and Z refers to the space of latent samples. The encoder distribution, Q\u03c6(Z|X), maps data samples from the data generating distribution, P (X), to a latent distribution, P\u0302 (Z). The decoder distribution, P\u03b8(X|Z), maps samples from P\u0302 (Z) to P (X). We are concerned with generative autoencoders, which we define to be a family of autoencoders where regularisation is used during training to encourage P\u0302 (Z) to be close to a known prior P (Z). Commonly it is assumed that P\u0302 (Z) and P (Z) are similar, such that samples from P (Z) may be used to sample a decoder P\u03b8(X|Z); we do not make the assumption that P\u0302 (Z) and P (Z) are \u201csufficiently close\u201d (Rezende et al., 2014). Instead, we derive an MCMC process, whose stationary distribution is P\u0302 (Z), allowing us to directly draw samples from P\u0302 (Z). By conditioning on samples from P\u0302 (Z), samples drawn from x \u223c P\u03b8(X|Z) are more consistent with the training data. In our experiments, we compare samples x \u223c P\u03b8(X|Z = z0), z0 \u223c P (Z) to x \u223c P\u03b8(X|Z = zi) for i = {1, 5, 10}, where zi\u2019s are obtained through MCMC sampling, to show that MCMC sampling improves initially poor samples (see Figure 4). We also show that artifacts in x samples induced by interpolations across the latent space can also be corrected by MCMC sampling see (Figure 2). We further validate our work by showing that the denoising properties of denoising generative autoencoders are best revealed by the use of MCMC sampling.\nOur MCMC sampling process is straightforward, and can be applied easily to existing generative autoencoders. This technique is orthogonal to the use of more powerful posteriors in AAEs (Makhzani et al., 2015) and VAEs (Kingma et al., 2016), and the combination of both could result in further improvements in generative modeling. Finally, our basic MCMC process opens the doors to apply a large existing body of research on sampling methods to generative autoencoders."}, {"heading": "ACKNOWLEDGEMENTS", "text": "We would like to acknowledge the EPSRC for funding through a Doctoral Training studentship and the support of the EPSRC CDT in Neurotechnology."}, {"heading": "B CELEBA", "text": "B.1 INTERPOLATIONS"}, {"heading": "C STREET VIEW HOUSE NUMBERS", "text": "C.1 SAMPLES\nC.2 INTERPOLATIONS"}], "references": [{"title": "Generalized denoising auto-encoders as generative models", "author": ["Yoshua Bengio", "Li Yao", "Guillaume Alain", "Pascal Vincent"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Bengio et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2013}, {"title": "Deep generative stochastic networks trainable by backprop", "author": ["Yoshua Bengio", "Eric Thibodeau-Laufer", "Guillaume Alain", "Jason Yosinski"], "venue": "In Journal of Machine Learning Research: Proceedings of the 31st International Conference on Machine Learning,", "citeRegEx": "Bengio et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2014}, {"title": "Torch7: A matlab-like environment for machine learning", "author": ["Ronan Collobert", "Koray Kavukcuoglu", "Cl\u00e9ment Farabet"], "venue": "In BigLearn, NIPS Workshop, number EPFL-CONF-192376,", "citeRegEx": "Collobert et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Collobert et al\\.", "year": 2011}, {"title": "Generating images with perceptual similarity metrics based on deep networks", "author": ["Alexey Dosovitskiy", "Thomas Brox"], "venue": "arXiv preprint arXiv:1602.02644,", "citeRegEx": "Dosovitskiy and Brox.,? \\Q2016\\E", "shortCiteRegEx": "Dosovitskiy and Brox.", "year": 2016}, {"title": "Generative Adversarial Nets", "author": ["Ian Goodfellow", "Jean Pouget-Abadie", "Mehdi Mirza", "Bing Xu", "David Warde-Farley", "Sherjil Ozair", "Aaron Courville", "Yoshua Bengio"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Goodfellow et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Goodfellow et al\\.", "year": 2014}, {"title": "Denoising criterion for variational auto-encoding framework", "author": ["Daniel Jiwoong Im", "Sungjin Ahn", "Roland Memisevic", "Yoshua Bengio"], "venue": "arXiv preprint arXiv:1511.06406,", "citeRegEx": "Im et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Im et al\\.", "year": 2015}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "author": ["Sergey Ioffe", "Christian Szegedy"], "venue": "In Proceedings of the 32nd International Conference on Machine Learning", "citeRegEx": "Ioffe and Szegedy.,? \\Q2015\\E", "shortCiteRegEx": "Ioffe and Szegedy.", "year": 2015}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba"], "venue": "In Proceedings of the 2015 International Conference on Learning Representations (ICLR-2015), arXiv preprint arXiv:1412.6980,", "citeRegEx": "Kingma and Ba.,? \\Q2014\\E", "shortCiteRegEx": "Kingma and Ba.", "year": 2014}, {"title": "Auto-encoding variational Bayes", "author": ["Diederik P Kingma", "Max Welling"], "venue": "In Proceedings of the 2015 International Conference on Learning Representations (ICLR-2015), arXiv preprint arXiv:1312.6114,", "citeRegEx": "Kingma and Welling.,? \\Q2014\\E", "shortCiteRegEx": "Kingma and Welling.", "year": 2014}, {"title": "Improving variational inference with inverse autoregressive flow", "author": ["Diederik P Kingma", "Tim Salimans", "Max Welling"], "venue": "arXiv preprint arXiv:1606.04934,", "citeRegEx": "Kingma et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Kingma et al\\.", "year": 2016}, {"title": "Discriminative regularization for generative models", "author": ["Alex Lamb", "Vincent Dumoulin", "Aaron Courville"], "venue": "arXiv preprint arXiv:1602.03220,", "citeRegEx": "Lamb et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Lamb et al\\.", "year": 2016}, {"title": "Autoencoding beyond pixels using a learned similarity metric", "author": ["Anders Boesen Lindbo Larsen", "S\u00f8ren Kaae S\u00f8nderby", "Ole Winther"], "venue": "In Proceedings of The 33rd International Conference on Machine Learning, arXiv preprint arXiv:1512.09300,", "citeRegEx": "Larsen et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Larsen et al\\.", "year": 2015}, {"title": "Deep learning face attributes in the wild", "author": ["Ziwei Liu", "Ping Luo", "Xiaogang Wang", "Xiaoou Tang"], "venue": "In Proceedings of the IEEE International Conference on Computer Vision, pp", "citeRegEx": "Liu et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Liu et al\\.", "year": 2015}, {"title": "Reading digits in natural images with unsupervised feature learning", "author": ["Yuval Netzer", "Tao Wang", "Adam Coates", "Alessandro Bissacco", "Bo Wu", "Andrew Y Ng"], "venue": "In NIPS Workshop on Deep Learning and Unsupervised Feature Learning,", "citeRegEx": "Netzer et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Netzer et al\\.", "year": 2011}, {"title": "Unsupervised representation learning with deep convolutional generative adversarial networks", "author": ["Alec Radford", "Luke Metz", "Soumith Chintala"], "venue": "In International Conference on Learning Representations (ICLR)", "citeRegEx": "Radford et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Radford et al\\.", "year": 2016}, {"title": "Stochastic backpropagation and approximate inference in deep generative models", "author": ["Danilo Jimenez Rezende", "Shakir Mohamed", "Daan Wierstra"], "venue": "In Proceedings of the 31st International Conference on Machine Learning, arXiv preprint arXiv:1401.4082,", "citeRegEx": "Rezende et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Rezende et al\\.", "year": 2014}, {"title": "A review of asymptotic convergence for general state space markov chains", "author": ["Jeffrey S Rosenthal"], "venue": "Far East J. Theor. Stat,", "citeRegEx": "Rosenthal.,? \\Q2001\\E", "shortCiteRegEx": "Rosenthal.", "year": 2001}, {"title": "Learning continuous attractors in recurrent networks", "author": ["H Sebastian Seung"], "venue": "In NIPS Proceedings,", "citeRegEx": "Seung.,? \\Q1997\\E", "shortCiteRegEx": "Seung.", "year": 1997}, {"title": "Extracting and composing robust features with denoising autoencoders", "author": ["Pascal Vincent", "Hugo Larochelle", "Yoshua Bengio", "Pierre-Antoine Manzagol"], "venue": "In Proceedings of the 25th International Conference on Machine Learning,", "citeRegEx": "Vincent et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Vincent et al\\.", "year": 2008}, {"title": "Sampling generative networks: Notes on a few effective techniques", "author": ["Tom White"], "venue": "arXiv preprint arXiv:1609.04468,", "citeRegEx": "White.,? \\Q2016\\E", "shortCiteRegEx": "White.", "year": 2016}], "referenceMentions": [{"referenceID": 4, "context": "In particular, the introduction of generative adversarial networks (GANs) (Goodfellow et al., 2014) and variational autoencoders (VAEs) (Kingma & Welling, 2014; Rezende et al.", "startOffset": 74, "endOffset": 99}, {"referenceID": 15, "context": ", 2014) and variational autoencoders (VAEs) (Kingma & Welling, 2014; Rezende et al., 2014) has led to a plethora of research into learning latent variable models that are capable of generating data from complex distributions, including the space of natural images (Radford et al.", "startOffset": 44, "endOffset": 90}, {"referenceID": 15, "context": "This includes VAEs (Kingma & Welling, 2014; Rezende et al., 2014), extensions of VAEs (Kingma et al.", "startOffset": 19, "endOffset": 65}, {"referenceID": 9, "context": ", 2014), extensions of VAEs (Kingma et al., 2016), and also adversarial autoencoders (AAEs) (Makhzani et al.", "startOffset": 28, "endOffset": 49}, {"referenceID": 1, "context": "There are two traditional approaches for sampling generative autoencoders: Approach 1 (Bengio et al., 2014):", "startOffset": 86, "endOffset": 107}, {"referenceID": 15, "context": "Approach 2 (Kingma & Welling, 2014; Makhzani et al., 2015; Rezende et al., 2014): z0 \u223c P (Z), x0 \u223c P\u03b8(X|Z = z0) where P (Z) is the prior distribution enforced during training and P\u03b8(X|Z) is the decoder trained to map samples drawn from Q\u03c6(Z|X) to samples consistent with P (X).", "startOffset": 11, "endOffset": 80}, {"referenceID": 19, "context": "Previously, this has been addressed by using spherical, rather than linear interpolation of the high dimensional Z space (White, 2016).", "startOffset": 121, "endOffset": 134}, {"referenceID": 19, "context": "Figure 2: Prior work: Spherically interpolating (White, 2016) between two faces using a VAE (a, c).", "startOffset": 48, "endOffset": 61}, {"referenceID": 19, "context": "Whilst most methods that aim to generate realistic samples from X rely on adjusting encodings of the observed data (White, 2016), our use of MCMC allows us to walk any latent sample to more probable regions of the learned latent distribution, resulting in more convincing generations.", "startOffset": 115, "endOffset": 128}, {"referenceID": 17, "context": "These are generative autoencoders trained using a denoising criterion, (Seung, 1997; Vincent et al., 2008).", "startOffset": 71, "endOffset": 106}, {"referenceID": 18, "context": "These are generative autoencoders trained using a denoising criterion, (Seung, 1997; Vincent et al., 2008).", "startOffset": 71, "endOffset": 106}, {"referenceID": 15, "context": "We now review two types of generative autoencoders, VAEs (Kingma & Welling, 2014; Rezende et al., 2014) and AAEs (Makhzani et al.", "startOffset": 57, "endOffset": 103}, {"referenceID": 4, "context": "The GAN framework solves this density ratio estimation problem by transforming it into a class estimation problem using two networks (Goodfellow et al., 2014).", "startOffset": 133, "endOffset": 158}, {"referenceID": 18, "context": "Another widely used class of autoencoders that achieve this are denoising autoencoders (DAEs), which are motivated by the idea that learned features should be robust to \u201cpartial destruction of the input\u201d (Vincent et al., 2008).", "startOffset": 204, "endOffset": 226}, {"referenceID": 9, "context": "Our work is orthogonal to theirs, and others which adjust the training or model (Kingma et al., 2016), as we focus purely on sampling from generative autoencoders after training.", "startOffset": 80, "endOffset": 101}, {"referenceID": 16, "context": "The proof of Theorem 1 can be found in (Rosenthal, 2001).", "startOffset": 39, "endOffset": 56}, {"referenceID": 1, "context": "This work was generalised to include a corruption process that mapped data samples to latent variables (Bengio et al., 2014), to create a new type of network called Generative Stochastic Networks (GSNs).", "startOffset": 103, "endOffset": 124}, {"referenceID": 1, "context": "However in GSNs (Bengio et al., 2014) the latent space is not regularised with a prior.", "startOffset": 16, "endOffset": 37}, {"referenceID": 0, "context": "a latent space is either not explicitly modeled (Bengio et al., 2013) or it is not constrained (Bengio et al.", "startOffset": 48, "endOffset": 69}, {"referenceID": 11, "context": "Although this results in blurry images in regions which are ambiguous, such as hair detail, we opt not to use extra loss functions that improve the visual quality of generations (Larsen et al., 2015; Dosovitskiy & Brox, 2016; Lamb et al., 2016) to avoid confounding our results.", "startOffset": 178, "endOffset": 244}, {"referenceID": 10, "context": "Although this results in blurry images in regions which are ambiguous, such as hair detail, we opt not to use extra loss functions that improve the visual quality of generations (Larsen et al., 2015; Dosovitskiy & Brox, 2016; Lamb et al., 2016) to avoid confounding our results.", "startOffset": 178, "endOffset": 244}, {"referenceID": 12, "context": "2 DATASETS Our primary dataset is the (aligned and cropped) CelebA dataset, which consists of 200,000 images of celebrities (Liu et al., 2015).", "startOffset": 124, "endOffset": 142}, {"referenceID": 13, "context": "In Figures 7 and 8 of the supplementary material, we also include results on the SVHN dataset, which consists of 100,000 images of house numbers extracted from Google Street view images (Netzer et al., 2011).", "startOffset": 186, "endOffset": 207}, {"referenceID": 2, "context": "All of our experiments were run using the Torch library (Collobert et al., 2011).", "startOffset": 56, "endOffset": 80}, {"referenceID": 19, "context": "2 For evaluation, we generate novel samples from the decoder using z initially sampled from P (Z); we also show spherical interpolations (White, 2016) between four images of the testing split, as depicted in Figure 2.", "startOffset": 137, "endOffset": 150}, {"referenceID": 1, "context": "Functions e(X;\u03c6) and d(Z; \u03b8) may be used to draw samples from the conditional distributions P\u03b8(X|Z) andQ\u03c6(Z|X) (Bengio et al., 2014; 2013; Rezende et al., 2014), where X refers to the space of observed samples and Z refers to the space of latent samples.", "startOffset": 111, "endOffset": 160}, {"referenceID": 15, "context": "Functions e(X;\u03c6) and d(Z; \u03b8) may be used to draw samples from the conditional distributions P\u03b8(X|Z) andQ\u03c6(Z|X) (Bengio et al., 2014; 2013; Rezende et al., 2014), where X refers to the space of observed samples and Z refers to the space of latent samples.", "startOffset": 111, "endOffset": 160}, {"referenceID": 15, "context": "Commonly it is assumed that P\u0302 (Z) and P (Z) are similar, such that samples from P (Z) may be used to sample a decoder P\u03b8(X|Z); we do not make the assumption that P\u0302 (Z) and P (Z) are \u201csufficiently close\u201d (Rezende et al., 2014).", "startOffset": 205, "endOffset": 227}, {"referenceID": 9, "context": ", 2015) and VAEs (Kingma et al., 2016), and the combination of both could result in further improvements in generative modeling.", "startOffset": 17, "endOffset": 38}], "year": 2017, "abstractText": "We focus on generative autoencoders, such as variational or adversarial autoencoders, which jointly learn a generative model alongside an inference model. Generative autoencoders are those which are trained to softly enforce a prior on the latent distribution learned by the inference model. We call the distribution to which the inference model maps observed samples, the learned latent distribution, which may not be consistent with the prior. We formulate a Markov chain Monte Carlo (MCMC) sampling process, equivalent to iteratively decoding and encoding, which allows us to sample from the learned latent distribution. Since, the generative model learns to map from the learned latent distribution, rather than the prior, we may use MCMC to improve the quality of samples drawn from the generative model, especially when the learned latent distribution is far from the prior. Using MCMC sampling, we are able to reveal previously unseen differences between generative autoencoders trained either with or without a denoising criterion.", "creator": "LaTeX with hyperref package"}, "id": "ICLR_2017_486"}